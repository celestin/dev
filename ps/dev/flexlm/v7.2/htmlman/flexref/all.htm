<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="TEMPLATEBASE" content="Users Guide Template">
<meta name="LASTUPDATED" content="12/22/00 14:02:51">
<title>FLEXlm Reference Manual</title>
</head>

<body link="#0066CC" vlink="#800080" text="#000000" alink="#FF0000" bgcolor="#FFFFFF"
background="graphics/backgrnd.gif">

<blockquote>
<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="946320"> </a>Chapter 1 <br>Introduction
</h2>
<hr>


<h3>
  <a name="880453"> </a>1.1	 About This Manual
</h3>


<p>
  <a name="880457"> </a>This manual, the <em>FLEXlm Reference Manual</em>, provides a comprehensive description of all aspects of FLEX<em>lm</em><sup>&reg;</sup> from the software developer's perspective, including a complete description of the FLEXible API, the most complete API available for license management.
</p>


<p>
  <a name="880468"> </a>The <em>FLEXlm Programmers Guide</em> provides an introduction to FLEX<em>lm</em>, instructions for evaluating FLEX<em>lm</em> on UNIX and Windows systems, descriptions of the Trivial and Simple APIs, and guidelines for integration of FLEX<em>lm</em> into your application.
</p>


<p>
  <a name="880480"> </a>The <em>FLEXlm End Users Guide</em> contains information relevant to users of products that utilize FLEX<em>lm</em> as their licensing system, including descriptions of the license administration tools which are bundled with FLEX<em>lm</em>. It describes setup and administration of a FLEX<em>lm</em> licensing system.
</p>


<h3>
  <a name="880487"> </a>1.2	 How to Use This Manual
</h3>


<p>
  <a name="880491"> </a>This manual should be used as a reference to the advanced features of FLEX<em>lm</em>. It should also be used if you plan to use the FLEXible API in your application.
</p>


<p>
  <a name="901614"> </a>All documentation is provided online in the <code>htmlman</code> directory and can be accessed through any HTML browser.
</p>


<h3>
  <a name="901624"> </a>1.3	 Typographic Conventions
</h3>


<p>
  <a name="901625"> </a>The following typographic conventions are used in this manual:
</p>

<ul>
  <li><a name="901626"> </a>The first time a new term is used it is presented in <em>italics</em>.

  <li><a name="901627"> </a>Commands and path, file, and environment variable names are presented in a <code>fixed_font</code>.

  <li><a name="901628"> </a>Other variable names are in an <code><em>italic_fixed_font</em></code>. 

  <li><a name="901629"> </a>API function calls are in a <font  face="Arial" size="2">sans-serif font</font>.

</ul>

<h3>
  <a name="880495"> </a>1.4	 FLEX<em>lm</em> Terms and Definitions
</h3>


<p>
  <a name="880499"> </a>The following terms are used as defined to describe FLEX<em>lm</em> concepts and software components:
</p>


<p>
  <a name="892613"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="892620"> </a>Feature
<br></td>
    <td><a name="892672"> </a>Any functionality that needs to be licensed. The 
<br>meaning of a feature will depend entirely on how it 
<br>is used by an application developer. For example, a 
<br>feature could represent any of the following:
<br><ul>
<br>  <li><a name="892673"> </a>An application software system consisting of hundreds of programs
<br>
<br>  <li><a name="892674"> </a>A single program (regardless of version)
<br>
<br>  <li><a name="892675"> </a>A specific version of a program
<br>
<br>  <li><a name="892676"> </a>A part of a program
<br>
<br>  <li><a name="892677"> </a>A piece of data (restricted via the access routines)
<br>
<br></ul>
<br></td>
  </tr>
  <tr>
    <td><a name="892624"> </a>License
<br></td>
    <td><a name="892626"> </a>The legal right to use a feature. FLEX<em>lm</em> can restrict 
<br>licenses for features by counting the number of 
<br>licenses already in use for a feature when new 
<br>requests are made by the application software 
<br>(<em>client</em>). FLEX<em>lm</em> can also restrict software usage to 
<br>particular nodes or user names.
<br></td>
  </tr>
  <tr>
    <td><a name="892628"> </a>Client
<br></td>
    <td><a name="892630"> </a>An application program requesting or receiving a 
<br>license.
<br></td>
  </tr>
  <tr>
    <td><a name="892632"> </a>Daemon
<br></td>
    <td><a name="892634"> </a>A process that "serves" clients. Sometimes referred 
<br>to as a <em>server.
<br></em></td>
  </tr>
  <tr>
    <td><a name="892636"> </a>Vendor daemon
<br></td>
    <td><a name="892638"> </a>The server process that dispenses licenses for the 
<br>requested features. This binary is built by an 
<br>application's vendor (from libraries supplied by 
<br>GLOBEtrotter Software) and contains the vendor's 
<br>unique encryption seeds.
<br></td>
  </tr>
  <tr>
    <td><a name="919159"> </a>Vendor name
<br></td>
    <td><a name="919161"> </a>Name of the vendor as found in <code>lm_code.h</code>. Used 
<br>as the name of the vendor daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="892640"> </a>lmgrd
<br></td>
    <td><a name="892642"> </a>The daemon process, or license manager daemon, 
<br>that sends client processes to the correct vendor 
<br>daemon on the correct machine. The same license 
<br>manager daemon process can be used by any 
<br>application from any vendor because this daemon 
<br>neither authenticates nor dispenses licenses.
<br><a name="901666"> </a><code>lmgrd</code> processes no user requests on its own, but 
<br>forwards these requests to the vendor daemons.
<br></td>
  </tr>
  <tr>
    <td><a name="892644"> </a>Server node
<br></td>
    <td><a name="892646"> </a>A computer system that is running the license server 
<br>software. The server node will contain all the site-
<br>specific information regarding all feature usage. 
<br>Multiple server nodes used for redundancy can 
<br>logically be considered the server node.
<br></td>
  </tr>
  <tr>
    <td><a name="892648"> </a>License file
<br></td>
    <td><a name="892650"> </a>A text file specific to an end-user site that contains 
<br>descriptions of 1) license server node(s), 2) vendor 
<br>daemons, and 3) licenses (features) for all supported 
<br>products.
<br></td>
  </tr>
  <tr>
    <td><a name="892652"> </a>License file list
<br></td>
    <td><a name="892654"> </a>A list of license files separated with a colon " : " on 
<br>UNIX and a semi-colon " ; " on Windows. A license 
<br>file list can be accepted in most places where a 
<br>license file is appropriate. When a directory is 
<br>specified, all files matching <code>*.lic</code> in that directory 
<br>are automatically used, as if specified as a list.
<br></td>
  </tr>
  <tr>
    <td><a name="908633"> </a>License key
<br></td>
    <td><a name="908635"> </a>See <a href="allApp.htm#921207">Appendix&nbsp;F, "Migrating to the Counterfeit 
<br>Resistant Option</a>."
<br></td>
  </tr>
  <tr>
    <td><a name="892656"> </a>Signature
<br></td>
    <td><a name="892658"> </a> A secure 12- to 120-character hexadecimal number 
<br>which "authenticates" the readable license file text, 
<br>ensuring that the license text has not been modified.
<br></td>
  </tr>
  <tr>
    <td><a name="892660"> </a>License server
<br></td>
    <td><a name="892662"> </a>An <code>lmgrd</code> and one or more vendor daemon 
<br>processes. License server refers to the processes, not 
<br>the computer on which they run.
<br></td>
  </tr>
</table>




<p>
  <a name="919173"> </a>
</p>


<h3>
  <a name="919177"> </a>1.5	 FLEX<em>lm</em> APIs
</h3>


<p>
  <a name="919181"> </a>The application program interfaces to FLEX<em>lm</em> via a set of routines that request (checkout) and release (checkin) licenses of selected feature(s). 
</p>


<p>
  <a name="919182"> </a>There are four major FLEX<em>lm</em> APIs available to the developer: 
</p>

<ul>
  <li><a name="919184"> </a>Trivial API

  <li><a name="919186"> </a>Simple API

  <li><a name="919188"> </a>FLEXible API

  <li><a name="919189"> </a>Java API

</ul>

<p>
  <a name="919193"> </a>GLOBEtrotter recommends using the Trivial API; if, however, the application requires FLEX<em>lm</em> functionality not provided in the Trivial API, use the Simple API. For complete flexibility, use the FLEXible API.
</p>


<p>
  <a name="919197"> </a>In the Trivial and Simple APIs, a licensing "policy" is selected as an argument to the license request call. In these APIs a "heartbeat" function is usually called explicitly by the application, and the policy upon server failure must be programmed into the application.
</p>


<p>
  <a name="919198"> </a>The Simple API must be used instead of the Trivial API when:
</p>

<ul>
  <li><a name="919199"> </a>A single process needs to separately license sub-functionality--that is, when two or more feature names may be checked out.

  <li><a name="919200"> </a>The checkout call needs to be able to check out more than one license of a feature.

</ul>

<p>
  <a name="919201"> </a>Most commonly, the FLEXible API is required for:
</p>

<ul>
  <li><a name="919202"> </a>Asynchronous queuing, especially in GUI-based applications where queueing is required.

  <li><a name="919220"> </a>To obtain a list of users of a given feature.

  <li><a name="919221"> </a>Vendor-defined hostid.

</ul>

<p>
  <a name="919222"> </a>If your application requires the FLEXible API <em>only</em> for a list of users, you can concurrently use the Simple or Trivial API for licensing and the FLEXible API only for a list of users--this is the recommended solution for this problem.
</p>


<p>
  <a name="919206"> </a>The Simple and Trivial APIs (as well as the Java API) are documented in the <em>FLEXlm Programmers Guide</em>, while the FLEXible API is documented in detail in this manual.
</p>


<p>
  <a name="919213"> </a>Most of the important functionality and flexibility in FLEX<em>lm</em> is contained in the license file; all license file attributes are available to all APIs.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="919214"> </a>Chapter 2 <br>Incorporating FLEX<em>lm</em> Into Your Application
</h2>
<hr>


<p>
  <a name="880641"> </a>To incorporate FLEX<em>lm</em> into your application, you will add function calls to your application program, build your application, and build a custom vendor daemon as discussed in the following sections.
</p>


<h3>
  <a name="901711"> </a>2.1	 FLEX<em>lm</em> Naming Conventions
</h3>


<p>
  <a name="901715"> </a>All FLEX<em>lm</em> client routines and variables adhere to certain naming conventions. These conventions are:
</p>

<ul>
  <li><a name="901716"> </a>Trivial API functions are all uppercase <font  face="Arial" size="2">MACROS</font> defined in <code>lmpolicy.h</code>.

  <li><a name="901717"> </a>Simple API function names start with <font  face="Arial" size="2">lp_</font>. The "p" stands for "policy," since this is policy-based licensing.

  <li><a name="901718"> </a>FLEXible API client routine names start with <font  face="Arial" size="2">lc_</font>.

</ul>

<h3>
  <a name="880645"> </a>2.2	 FLEX<em>lm</em> Example Applications
</h3>


<p>
  <a name="880650"> </a>On both UNIX and Windows, the FLEX<em>lm</em> SDK contains the source for an example FLEXible API client application program called <code><em></em></code><code>lmflex.c</code><code><em>.</em></code> <code><em></em></code><code>lmclient.c</code> is a small standalone program using Trivial API macros and is a good place to start to learn how to integrate FLEX<em>lm</em> with your application. A Simple API example program, <code>lmsimple.c</code>, is also available. The source to these three example programs is in the <code>machind</code> directory.
</p>


<p>
  <a name="880665"> </a>For Windows systems, the <code>machind</code> directory contains<code> lmwin.c</code>, the source for an example GUI application. <code>lmwin</code> uses Microsoft Visual C++ to build a slightly more complicated Trivial API example program to demonstrate the usage of UDP and other more advanced options.
</p>


<p>
  <a name="880666"> </a>The <code>lmcrypt</code> and <code>makekey</code> programs can be used to generate licenses for your customers, or they can be used as examples of license generation programs. Source to the <code>lmcrypt</code> and <code>makekey</code> programs is in the <code>machind</code> directory.
</p>


<p>
  <a name="880670"> </a>The <code>lmcrypt</code> and <code>makekey</code> programs generate the same signatures on all FLEX<em>lm</em>-supported platforms for all FLEX<em>lm</em> versions, thus allowing you to create licenses for any supported platform on any other supported platform.
</p>


<p>
  <a name="880677"> </a>FLEX<em>lm</em> SDKs also contain an <code>examples</code> directory at the top level of the kit hierarchy. The <code>examples</code> directory contains example programs, which have been put in the SDK to illustrate how to perform various operations with FLEX<em>lm</em>. These programs are <strong>not supported</strong>, and GLOBEtrotter Software may not include them in future FLEX<em>lm</em> releases.
</p>


<h3>
  <a name="880689"> </a>2.3	 Client Heartbeats and License Server Failures
</h3>


<p>
  <a name="880690"> </a>Your application will need to communicate regularly with the license server via "heartbeat" calls to ensure that the license server is still running. Programming how the heartbeats occur and what action takes place when the license server is not running are the most important part of incorporating FLEX<em>lm</em> in an application. Heartbeats for Trivial and Simple APIs are discussed in the <em>FLEXlm Programmers Guide</em>. The FLEXible API heartbeat is addressed in the following sections:
</p>

<ul>
  <li><a name="880700"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

  <li><a name="880704"> </a><a href="all.htm#882913">Section 4.3, "LM_A_CHECK_INTERVAL</a>"

  <li><a name="880707"> </a><a href="all.htm#883196">Section 4.22, "LM_A_RETRY_COUNT, LM_A_RETRY_INTERVAL</a>"

  <li><a name="880712"> </a><a href="all.htm#883303">Section 4.25, "LM_A_USER_EXITCALL</a>"

  <li><a name="880716"> </a><a href="all.htm#883334">Section 4.27, "LM_A_USER_RECONNECT</a>"

  <li><a name="880720"> </a><a href="all.htm#883361">Section 4.28, "LM_A_USER_RECONNECT_DONE</a>"

</ul>

<h3>
  <a name="880724"> </a>2.4	 Lingering Licenses
</h3>


<p>
  <a name="880725"> </a>A lingering license allows you to specify how long a license will remain checked out beyond either an <font  face="Arial" size="2">lc_checkin()</font> call or program exit (whichever comes first). To use this feature, call <font  face="Arial" size="2">lc_set_attr()</font> before checking out the feature that should linger:
</p>

<dl>  <dl>
     <dt> <a name="880729"> </a><CODE>lc_set_attr(<code><em>job</em></code>, LM_A_LINGER, (LM_A_VAL_TYPE)<code><em>x</em></code>)</CODE>
  </dl>
</dl>
<p>
  <a name="880730"> </a>where <code><em>x</em></code> is the number of seconds to make the license linger.
</p>


<p>
  <a name="893936"> </a>In addition, the end user can specify a longer linger interval in the vendor daemon's options file, as such:
</p>

<dl>  <dl>
     <dt> <a name="893937"> </a><CODE>LINGER f1 100</CODE>
  </dl>
</dl>
<p>
  <a name="908678"> </a>The longer of the developer-specified and user-specified times will be used. The actual time of checkin will vary somewhat since the vendor daemon checks all lingering licenses once per minute. If, however, a new license request is made that would otherwise be denied, a check of the lingering licenses is made immediately to attempt to satisfy the new request. Linger is useful for programs that normally take under a minute to complete. Linger is generally useful only if <code>DUP_GROUP</code> is set in the license file or if <code><em>dup_group</em></code> is set in the <font  face="Arial" size="2">lc_checkout()</font> call.
</p>


<h5>
  <a name="880736"> </a>See Also
</h5>

<ul>
  <li><a name="880740"> </a><a href="all.htm#883094">Section 4.16, "LM_A_LICENSE_FMT_VER</a>"

  <li><a name="880748"> </a><a href="all.htm#912235">Section 5.5, "FEATURE or INCREMENT Lines</a>"

  <li><a name="908691"> </a><a href="all.htm#881152">Section 3.6, "lc_checkout()</a>"

</ul>

<h3>
  <a name="946926"> </a>2.5	 FLEX<em>lm</em> and Multi-threaded Applications
</h3>


<p>
  <a name="946939"> </a>FLEX<em>lm</em> can be used in multi-threaded applications as long as the same FLEX<em>lm</em> job is not referenced simultaneously in more than one thread. FLEX<em>lm</em> is safe for multi-threaded applications, but FLEX<em>lm</em> calls are not reentrant.
</p>


<h3>
  <a name="946935"> </a>2.6	 Multiple Jobs
</h3>


<p>
  <a name="880754"> </a><font  face="Arial" size="2">lc_new_job()</font> function calls enable applications to support more than one FLEX<em>lm</em> job in a single binary. Each job has a separate connection to a license server, as well as a independent set of job attributes. When a new job is created with <font  face="Arial" size="2">lc_new_job()</font>, all the FLEX<em>lm</em> attributes are set to defaults, and attributes can be set completely independently for this new job. For example, one job could use TCP and another job UDP, running simultaneously, although this is not necessarily a good reason for multiple jobs.
</p>


<p>
  <a name="880761"> </a>Multiple jobs may be desirable for the following reasons:
</p>

<ul>
  <li><a name="880763"> </a>If <code><em></em></code><code>LM_LICENSE_FILE</code> is a license file list (colon-separated on UNIX and semi-colon separated on Windows) with more than one license server supporting features for the client, and if the application needs to check out more than one feature, it may be necessary to communicate with two license servers to check out the necessary licenses. This can only be done with multiple jobs, because a separate connection is required for each server.

  <li><a name="880773"> </a>It may be convenient to have a single process manage licenses for other processes. It is usually convenient to manage each process's license as a separate job.

  <li><a name="880774"> </a><font  face="Arial" size="2">lc_checkin()</font> checks in all licenses for a given name. If the application needs to check in only some of the licenses, this can be done with multiple jobs, where groups of checkouts are done in separate jobs, and checked in separately from each job.

</ul>

<p>
  <a name="880775"> </a>The first item can be important as an alternative way of supporting license server redundancy. Following is a program excerpt that illustrates how to support this:
</p>

<dl>  <dl>
     <dt> <a name="880776"> </a><CODE>LM_HANDLE *job1 = 0, *job2 = 0;</CODE>
     <dt> <a name="894011"> </a><CODE>VENDORCODE code;</CODE>
     <dt> <a name="894012"> </a><CODE>if (lc_new_job((LM_HANDLE *)0, lc_new_job_arg2, &amp;code, &amp;job1))</CODE>
     <dt> <a name="894013"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* error processing */ ;</CODE>
     <dt> <a name="894014"> </a><CODE>set_all_my_attr(job1); /* do all necessary lc_set_attr() calls */</CODE>
     <dt> <a name="894015"> </a><CODE>if (lc_checkout(job1, "f1", "1.0", 1, LM_CO_NOWAIT, &amp;code, </CODE>
     <dt> <a name="894016"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LM_DUP_NONE))</CODE>
     <dt> <a name="894017"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* error processing */ ;</CODE>
     <dt> <a name="894021"> </a><CODE>/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We checkout out one feature successfully, so we're </CODE>
     <dt> <a name="894022"> </a><CODE>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connected to a server already. In order to connect to</CODE>
     <dt> <a name="894025"> </a><CODE>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;another server, we would need another job</CODE>
     <dt> <a name="894026"> </a><CODE>&nbsp;*/</CODE>
     <dt> <a name="894027"> </a><CODE>if (lc_checkout(job1, "f2", "1.0", 1, LM_CO_NOWAIT, &amp;code, </CODE>
     <dt> <a name="894674"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LM_DUP_NONE))</CODE>
     <dt> <a name="894675"> </a><CODE>{</CODE>
     <dt> <a name="894676"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lc_new_job(job1, lc_new_job_arg2, &amp;code, &amp;job2))</CODE>
     <dt> <a name="894031"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="894032"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* error processing */</CODE>
     <dt> <a name="894033"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job2 = 0;</CODE>
     <dt> <a name="894034"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="894035"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</CODE>
     <dt> <a name="894036"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="894037"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_all_my_attr(job2);	 /* Reset attributes */</CODE>
     <dt> <a name="894038"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lc_checkout(job2, "f2", "1.0", 1, </CODE>
     <dt> <a name="894039"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LM_CO_NOWAIT, &amp;code, LM_DUP_NONE))</CODE>
     <dt> <a name="894040"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* error processing */ ;</CODE>
     <dt> <a name="894041"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="894042"> </a><CODE>}</CODE>
     <dt> <a name="894043"> </a><CODE>/* application code here */</CODE>
     <dt> <a name="894044"> </a><CODE>lc_checkin(job1, LM_CI_ALL_FEATURES, 0);</CODE>
     <dt> <a name="894045"> </a><CODE>lc_free_job(job1);</CODE>
     <dt> <a name="894046"> </a><CODE>if (job2 &amp;&amp; job2 != job1)</CODE>
     <dt> <a name="894047"> </a><CODE>{</CODE>
     <dt> <a name="894048"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_checkin(job2, LM_CI_ALL_FEATURES, 0);</CODE>
     <dt> <a name="894049"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_free_job(job2);</CODE>
     <dt> <a name="894050"> </a><CODE>}</CODE>
  </dl>
</dl>
<p>
  <a name="880777"> </a>If the application is managing many jobs, you may want to free jobs with <font  face="Arial" size="2">lc_free_job()</font> to save memory. When doing so, make sure that you do not delete a job which still has a license checked out--this can result in a core dump. 
</p>


<p>
  <a name="880778"> </a>Jobs can be found and managed using <font  face="Arial" size="2">lc_first_job()</font> and <font  face="Arial" size="2">lc_next_job()</font>, which are used to walk the list of jobs. Attributes for jobs are set and retrieved with <font  face="Arial" size="2">lc_set_attr()</font> and <font  face="Arial" size="2">lc_get_attr()</font><em>.</em>
</p>


<h5>
  <a name="880780"> </a>See Also
</h5>

<ul>
  <li><a name="880784"> </a><a href="all.htm#881697">Section 3.17, "lc_free_job()</a>"

  <li><a name="880788"> </a><a href="all.htm#881754">Section 3.19, "lc_get_attr()</a>"

  <li><a name="880792"> </a><a href="all.htm#881958">Section 3.26, "lc_new_job()</a>"

  <li><a name="880796"> </a><a href="all.htm#881640">Section 3.15, "lc_first_job(), lc_next_job()</a>"

  <li><a name="880800"> </a><a href="all.htm#882086">Section 3.29, "lc_set_attr()</a>"

</ul>

<h3>
  <a name="880801"> </a>2.7	 FLEX<em>lock</em>
</h3>


<p>
  <a name="901775"> </a>FLEX<em>lock</em> is available only on Windows.
</p>


<p>
  <a name="946262"> </a>If you are using FLEX<em>lock</em> and the FLEXible API and want to check out a feature, you must call the <font  face="Arial" size="2">LM_USE_FLEXLOCK()</font> macro before the checkout call. <font  face="Arial" size="2">LM_USE_FLEXLOCK()</font> can be used with the Trivial, Simple, or FLEXible API.
</p>

<dl>  <dl>
     <dt> <a name="946265"> </a><CODE>LM_USE_FLEXLOCK();</CODE>
     <dt> <a name="946269"> </a><CODE><code><em>status</em></code> = lc_checkout(<code><em>job</em></code>, <code><em>feature</em></code>, <code><em>version</em></code>, <code><em>num_lic</em></code>, <code><em>flag</em></code>,</CODE>
    <dl>
       <dt> <a name="946266"> </a><CODE><code><em>code</em></code>, <code><em>dup_group</em></code>)</CODE>
    </dl>
  </dl>
  </dl>

<h5>
  <a name="946258"> </a>Checking Out More Than One Feature with FLEX<em>lock</em> Enabled
</h5>


<p>
  <a name="880803"> </a>If you are using FLEX<em>lock</em> and your application checks out more than one feature, use the FLEXible API. 
</p>


<p>
  <a name="880804"> </a>You will need a flag indicating that the first checkout was authorized by FLEX<em>lock</em>. In the following example code, the flag is called <code>flexlock_flag</code> and is initialized to 0.
</p>


<p>
  <a name="880805"> </a>After the first successful <font  face="Arial" size="2">lc_checkout()</font>, call:
</p>

<dl>  <dl>
     <dt> <a name="880806"> </a><CODE>CONFIG *conf;</CODE>
     <dt> <a name="880807"> </a><CODE>extern int flexlock_flag;</CODE>
     <dt> <a name="880808"> </a><CODE>conf = lc_auth_data(<code><em>job</em></code>, <code><em>feature</em></code>, <code><em>name</em></code>);</CODE>
     <dt> <a name="880809"> </a><CODE>if (conf-&gt;idptr &amp;&amp; (conf-&gt;idptr-&gt;type == HOSTID_FLEXLOCK))</CODE>
     <dt> <a name="880810"> </a><CODE>{</CODE>
     <dt> <a name="880811"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flexlock_flag = 1;</CODE>
     <dt> <a name="880812"> </a><CODE>}</CODE>
  </dl>
</dl>
<p>
  <a name="880813"> </a>Before all subsequent <font  face="Arial" size="2">lc_checkout()</font> calls, if <code>flexlock_flag</code> is true, then do not make the <font  face="Arial" size="2">lc_checkout()</font> call:
</p>

<dl>  <dl>
     <dt> <a name="894123"> </a><CODE>	 if (flexlock_flag || (lc_checkout(...<code><em>feature2.</em></code>..) == 0))</CODE>
     <dt> <a name="880815"> </a><CODE>	 	 /* feature2-enabled */</CODE>
  </dl>
</dl>
<h3>
  <a name="880825"> </a>2.8	 Security and FLEX<em>lm</em>
</h3>


<p>
  <a name="880833"> </a>No software is completely secure, and FLEX<em>lm</em> is no exception. While GLOBEtrotter Software has made every effort to ensure the integrity of FLEX<em>lm</em>, all points of attack can never be anticipated. GLOBEtrotter Software maintains a list of techniques for making your implementation more secure. These techniques are recommended only for companies with the most stringent security requirements, and are not necessary for most companies. Please contact technical support (support@globes.com) for a description of these techniques. (For security reasons, they are only available to supported companies by email.)
</p>


<h4>
  <a name="938157"> </a>2.8.1	 Counterfeit Resistant Option (CRO)
</h4>


<p>
  <a name="938161"> </a>FLEX<em>lm</em> offers a Counterfeit Resistant Option (CRO), which is a separately priced add-on. Without CRO, FLEX<em>lm</em> utilizes the standard FLEX<em>lm</em> license key, which uses a proprietary, non-public-key digital signature method. CRO offers a standard public-key system which is recognized by the security community, and recommended for US government work (with US government export approval). The system comes from Certicom (http://www.certicom.com) and uses Elliptical Curve Cryptography. With CRO, the possibility of counterfeiting licenses becomes more remote. 
</p>


<p>
  <a name="938174"> </a>If you are new to FLEX<em>lm</em>, see the <em>FLEXlm Programmers Guide</em> for more information about implementing CRO. If you have shipped applications with pre-v7.2 FLEX<em>lm</em> and are considering adopting CRO, see <a href="allApp.htm#921207">Appendix&nbsp;F, "Migrating to the Counterfeit Resistant Option</a>" in this manual.
</p>


<h4>
  <a name="880839"> </a>2.8.2	 Using lmstrip for Additional Security
</h4>


<p>
  <a name="880843"> </a><code>lmstrip</code> and its source, <code>lmstrip.c</code>, are included in the FLEX<em>lm</em> SDK. <code>lmstrip</code> has three related, but different, uses:
</p>

<ul>
  <li><a name="880844"> </a>Adds security to UNIX application binaries

  <li><a name="880845"> </a>Provides additional security for licensing libraries

  <li><a name="880849"> </a>Allows two companies to use two different FLEX<em>lm</em> versions in the same binary

</ul>

<p>
  <a name="880850"> </a>The usage for <code>lmstrip</code> is:
</p>

<dl>  <dl>
     <dt> <a name="901817"> </a><CODE>lmstrip <code><em>filename</em></code> [-l] [-e | -n] [-r] [-m] </CODE>
    <dl>
       <dt> <a name="901818"> </a><CODE>[-mapfile <code><em>mapfilename</em></code>] [<code><em>strings</em></code>...]</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="901855"> </a>where:
</p>


<p>
  <a name="901852"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="901821"> </a><code><em>filename
<br></em></code></td>
    <td><a name="901823"> </a>Name of the file to strip.
<br></td>
  </tr>
  <tr>
    <td><a name="901825"> </a>-l
<br></td>
    <td><a name="901827"> </a>List internal and external names to be stripped.
<br></td>
  </tr>
  <tr>
    <td><a name="901829"> </a><code>-e
<br></code></td>
    <td><a name="901831"> </a>Don't strip external names.
<br></td>
  </tr>
  <tr>
    <td><a name="901833"> </a><code>-n
<br></code></td>
    <td><a name="901835"> </a>Don't strip internal and external names.
<br></td>
  </tr>
  <tr>
    <td><a name="901837"> </a><code>-r
<br></code></td>
    <td><a name="901839"> </a>Replace strings with random printable characters.
<br></td>
  </tr>
  <tr>
    <td><a name="901841"> </a><code>-m
<br></code></td>
    <td><a name="901843"> </a>Create or use mapfile. Default mapfile name is 
<br><code>lmstrip.map</code>. Forces randomized names to be 
<br>the same across invocations. Required for 
<br>Windows; optional for UNIX.
<br></td>
  </tr>
  <tr>
    <td><a name="901845"> </a><code><em>mapfilename
<br></em></code></td>
    <td><a name="901847"> </a>Use this file name to override the default mapfile 
<br>name.
<br></td>
  </tr>
  <tr>
    <td><a name="901849"> </a><code><em>strings
<br></em></code></td>
    <td><a name="901851"> </a>Strip these strings from the executable.
<br></td>
  </tr>
</table>




<p>
  <a name="880859"> </a>Use <code>-e</code> if <font  face="Arial" size="2">lc_</font><em>xxx</em><font  face="Arial" size="2">()</font> calls are made from shared library back into your code. Use <code>-r</code> if you are linking two versions of FLEX<em>lm</em> into the same binary.
</p>


<p>
  <a name="880866"> </a>By default, <code>lmstrip</code> replaces all FLEX<em>lm</em> function names with null characters. This adds security to fully linked binaries.
</p>


<p>
  <a name="880867"> </a>If you're running <code>lmstrip</code> on an object file, using the <code>-r</code> argument replaces the function names with random characters, each name truncated to no more than six characters.
</p>


<h5>
  <a name="880868"> </a>Adding Security to UNIX Application Binaries
</h5>


<p>
  <a name="880869"> </a>When run on a dynamically linked binary, <code>lmstrip</code> adds more security than the normal UNIX <code>strip</code> command, because these binaries retain references to the function calls in case they're called from a shared library. <code>lmstrip</code> removes any such references.
</p>


<p>
  <a name="880870"> </a>For this reason <code>lmstrip</code> cannot be used as-is on a binary when any <font  face="Arial" size="2">lc_</font><em>xxx</em><font  face="Arial" size="2">()</font> call is made from a shared library (which is very rare). Should this apply to you, use <code>lmstrip -e</code>, which leaves the <font  face="Arial" size="2">lc_</font><em>xxx</em><font  face="Arial" size="2">()</font> calls, but still strips the <font  face="Arial" size="2">l_</font><em>xxx</em><font  face="Arial" size="2">()</font> calls. This gives about the same level of security, because the most important functions, from a security viewpoint, are the <font  face="Arial" size="2">l_</font><em>xxx</em><font  face="Arial" size="2">()</font> calls.
</p>


<p>
  <a name="880871"> </a>Because symbol names don't occur in fully linked Windows binaries, this procedure is not needed on Windows.
</p>


<h5>
  <a name="880876"> </a>Providing Additional Security for Licensing Libraries 
</h5>


<p>
  <a name="880878"> </a>On UNIX, we recommend the following steps:
</p>

<ol type="1">
  <li><a name="880880"> </a><code>ld -r </code><code><em>file</em></code><code>.o liblmgr.a -o </code><code><em>ofile</em></code><code>.o</code>
  <dl>
     <dt> <a name="894444"> </a><code><em>ofile</em></code><code>.o</code> then includes all necessary FLEX<em>lm</em> calls.
  </dl>
  <li><a name="880884"> </a><code>lmstrip -r </code><code><em>ofile</em></code><code>.o</code>
  <dl>
     <dt> <a name="894451"> </a>This randomizes the names of the FLEX<em>lm</em> function calls.
  </dl>
  <li><a name="880888"> </a>You then ship <code><em>ofile</em></code><code>.o</code> to your customers, knowing that they will not see functions called <font  face="Arial" size="2">lc_checkout()</font>, etc., in the resulting object file.
</ol>

<p>
  <a name="880890"> </a>On Windows, the usage is:
</p>

<dl>  <dl>
     <dt> <a name="880891"> </a><CODE>C:&gt; copy lmgr.lib <code><em>mylmgr</em></code>.lib</CODE>
     <dt> <a name="894506"> </a><CODE>C:&gt; lmstrip -r -m <code><em>mylmgr</em></code>.lib</CODE>
     <dt> <a name="894507"> </a><CODE>C:&gt; lib <code><em>mylmgr</em></code>.lib</CODE>
     <dt> <a name="894508"> </a><CODE>C:&gt; lmstrip -r -m <code><em>myfuncs</em></code>.lib</CODE>
     <dt> <a name="894509"> </a><CODE>C:&gt; lib <code><em>myfuncs</em></code>.lib</CODE>
  </dl>
</dl>
<p>
  <a name="894510"> </a>where <code><em>mylmgr</em></code><code>.lib</code> is renamed to be unique for your company.
</p>


<p>
  <a name="880892"> </a>With <code>-m</code>, <code>lmstrip</code> creates a mapfile which contains a lookup table of randomized symbol names which is reused later for other object or library files, ensuring the names are mapped identically. For example, "lc_checkout" may be renamed to "xLfH3C." If this happens in two separate object files, the renaming must be identical.
</p>


<p>
  <a name="880893"> </a>You can now safely ship <code><em>mylmgr</em></code><code>.lib</code> and <code><em>myfuncs</em></code><code>.lib</code> to your customers. When your customer links their object with <code><em>myfuncs</em></code><code>.lib</code> and <code><em>mylmgr</em></code><code>.lib</code>, everything is resolved and functions correctly. And the temptation to alter the libraries and/or functions is reduced because the function names are not meaningful nor deducible.
</p>


<h5>
  <a name="880897"> </a>Linking with a Library that Already Uses FLEX<em>lm</em>
</h5>


<p>
  <a name="880902"> </a>On UNIX, follow the steps in <a href="all.htm#880876">"Providing Additional Security for Licensing Libraries"</a> (UNIX, above), using <code>ld -r</code> and <code>lmstrip -r</code>. The resulting object file can be linked with a library that already calls FLEX<em>lm</em>, along with a previous FLEX<em>lm</em> library version. Both coexist successfully.
</p>


<p>
  <a name="892244"> </a>On Windows, follow the steps in <a href="all.htm#880876">"Providing Additional Security for Licensing Libraries"</a> (Windows, above), using <code>lmstrip -r -m </code><code><em>mylmgr</em></code><code>.lib</code> won't conflict with other companies' use of FLEX<em>lm</em>, because the symbol names are altered.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="892247"> </a>Chapter 3 <br>FLEXible API
</h2>
<hr>


<p>
  <a name="880917"> </a>This is the most powerful API available for license management. As such, it contains many options enabling considerable flexibility. Where possible, new applications should use the Simple or Trivial APIs which are documented in the <em>FLEXlm Programmers Guide</em>. There is, however, no reason to change APIs in applications which already use the FLEXible API.
</p>


<p>
  <a name="880921"> </a>Some FLEX<em>lm</em> functionality is available only in this API. For example, the C interface to license generation, <font  face="Arial" size="2">lc_cryptstr()</font>, is available only in the FLEXible API.
</p>


<h3>
  <a name="880922"> </a>3.1	 FLEXible API Library Routines
</h3>


<p>
  <a name="880926"> </a>The routines to manage licenses are all contained in the FLEX<em>lm</em> client library <code>liblmgr.a</code> (<code>lmgr.lib</code><code><em> </em></code>for Windows), therefore, you will link your application program with the FLEX<em>lm</em> client library. The following are the most commonly used routines--however, the only routines required in your application are <font  face="Arial" size="2">lc_new_job()</font> and <font  face="Arial" size="2">lc_checkout()</font>:
</p>


<p>
  <a name="894930"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="894937"> </a><font  face="Arial" size="2"><a href="all.htm#881056">lc_auth_data()</a>
<br></font></td>
    <td><a name="894939"> </a>Gets the license file line for a checked-out 
<br>feature.
<br></td>
  </tr>
  <tr>
    <td><a name="894941"> </a><font  face="Arial" size="2"><a href="all.htm#881124">lc_checkin()</a>
<br></font></td>
    <td><a name="894943"> </a>Returns a license of a feature to the license pool.
<br></td>
  </tr>
  <tr>
    <td><a name="894945"> </a><font  face="Arial" size="2"><a href="all.htm#881152">lc_checkout()</a>
<br></font></td>
    <td><a name="894947"> </a>Requests a license of a feature.
<br></td>
  </tr>
  <tr>
    <td><a name="894949"> </a><font  face="Arial" size="2"><a href="all.htm#909119">lc_err_info()</a>
<br></font></td>
    <td><a name="894951"> </a>Useful for translating error messages.
<br></td>
  </tr>
  <tr>
    <td><a name="894953"> </a><font  face="Arial" size="2"><a href="all.htm#881506">lc_errstring()</a>
<br></font></td>
    <td><a name="894955"> </a>Returns an explanatory error string for the most 
<br>recent error.
<br></td>
  </tr>
  <tr>
    <td><a name="894957"> </a><font  face="Arial" size="2"><a href="all.htm#881697">lc_free_job()</a>
<br></font></td>
    <td><a name="894959"> </a>Frees a job allocated with <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="894961"> </a><font  face="Arial" size="2"><a href="all.htm#881754">lc_get_attr()</a>
<br></font></td>
    <td><a name="894963"> </a>Retrieves a FLEX<em>lm</em> client attribute.
<br></td>
  </tr>
  <tr>
    <td><a name="894965"> </a><font  face="Arial" size="2"><a href="all.htm#881790">lc_get_config()</a>
<br></font></td>
    <td><a name="894967"> </a>Gets the first occurrence of the FEATURE line 
<br>in the cached license file.
<br></td>
  </tr>
  <tr>
    <td><a name="894969"> </a><font  face="Arial" size="2"><a href="all.htm#881820">lc_heartbeat()</a>
<br></font></td>
    <td><a name="894971"> </a>Sends heartbeat from client to server.
<br></td>
  </tr>
  <tr>
    <td><a name="894973"> </a><font  face="Arial" size="2"><a href="all.htm#881856">lc_hostid()</a>
<br></font></td>
    <td><a name="894975"> </a>Gets the system hostid.
<br></td>
  </tr>
  <tr>
    <td><a name="896127"> </a><font  face="Arial" size="2"><a href="all.htm#881878">lc_idle()</a>
<br></font></td>
    <td><a name="896129"> </a>Supports the TIMEOUT option in end-user 
<br>options file (<code><em>vendor</em></code><code>.opt</code>).
<br></td>
  </tr>
  <tr>
    <td><a name="896123"> </a><font  face="Arial" size="2"><a href="all.htm#881917">lc_init()</a>
<br></font></td>
    <td><a name="896125"> </a>Used in place of <font  face="Arial" size="2">lc_new_job()</font> in license 
<br>generators (like <code>lmcrypt</code> and <code>makekey</code>).
<br></td>
  </tr>
  <tr>
    <td><a name="896119"> </a><font  face="Arial" size="2"><a href="all.htm#881958">lc_new_job()</a>
<br></font></td>
    <td><a name="896121"> </a>Initializes FLEX<em>lm</em> and creates a license job.
<br></td>
  </tr>
  <tr>
    <td><a name="896115"> </a><font  face="Arial" size="2"><a href="all.htm#882046">lc_perror()</a>
<br></font></td>
    <td><a name="896117"> </a>Prints an error message to stderr.
<br></td>
  </tr>
  <tr>
    <td><a name="896111"> </a><font  face="Arial" size="2"><a href="all.htm#882086">lc_set_attr()</a>
<br></font></td>
    <td><a name="896113"> </a>Sets a FLEX<em>lm</em> client attribute.
<br></td>
  </tr>
  <tr>
    <td><a name="896107"> </a><font  face="Arial" size="2"><a href="all.htm#882152">lc_userlist()</a>
<br></font></td>
    <td><a name="896109"> </a>Gets a list of the users of a feature.
<br></td>
  </tr>
</table>




<p>
  <a name="894934"> </a>
</p>


<p>
  <a name="896339"> </a>These and additional routines are documented in this chapter, and other routines are documented in <a href="allApp.htm#886924">Appendix&nbsp;E, "Rarely Used Functions and Attributes</a>." It is rare that an application will require the functions in <a href="allApp.htm#886924">Appendix&nbsp;E</a>, and care should be used when calling them.
</p>


<h3>
  <a name="880968"> </a>3.2	 Building Your Application
</h3>


<p>
  <a name="901949"> </a>The include file <code>lmclient.h</code> contains all the symbolic definitions required for most calls. <code>lm_attr.h</code> contains the definitions used in the <font  face="Arial" size="2">lc_set_attr()</font> and <font  face="Arial" size="2">lc_get_attr()</font> calls.
</p>


<p>
  <a name="880972"> </a>If you use any of the FLEX<em>lm</em> symbolic definitions, macros, or data structures, you must include <code><em></em></code><code>lmclient.h</code><code><em> </em></code>in your C module. <font  face="Arial" size="2">lc_set_attr()</font> calls require you to include <code>lm_attr.h</code>.
</p>


<p>
  <a name="880978"> </a>In order to build your application:
</p>

<ol type="1">
  <li><a name="880979"> </a>Insert the FLEXible API calls that you require into your code.
  <li><a name="880987"> </a>Link your code with the FLEX<em>lm</em> client library and the FLEX<em>lm</em> object file. For static linking:

<p>
  <a name="946101"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="946074"> </a><strong>
<br></strong></td>
    <td><a name="946079"> </a>FLEX<em>lm</em><strong> Object File
<br></strong></td>
    <td><a name="946084"> </a>FLEX<em>lm</em><strong> Client Libraries
<br></strong></td>
  </tr>
  <tr>
    <td><a name="946086"> </a>Standard
<br></td>
    <td><a name="946088"> </a><code>lm_new.o
<br></code></td>
    <td><a name="946091"> </a><code>liblmgr.a
<br></code></td>
  </tr>
  <tr>
    <td><a name="946093"> </a>Add for CRO
<br></td>
    <td><a name="946095"> </a><code>
<br></code></td>
    <td><a name="946098"> </a><code>libcrvs.a
<br></code><a name="946100"> </a><code>libsb.a
<br></code></td>
  </tr>
</table>




<p>
  <a name="946102"> </a>
</p>


<p>
  <a name="946248"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="946169"> </a><strong>
<br></strong></td>
    <td><a name="946174"> </a>FLEX<em>lm</em><strong> 
<br>Object File
<br></strong></td>
    <td><a name="946179"> </a>FLEX<em>lm</em><strong> Client 
<br>Libraries
<br></strong></td>
    <td><a name="946181"> </a><strong>MSVC++
<br></strong><a name="946182"> </a>Libraries
<br></td>
  </tr>
  <tr>
    <td><a name="946184"> </a>Standard
<br></td>
    <td><a name="946187"> </a><code>lm_new.obj
<br></code></td>
    <td><a name="946190"> </a><code>lmgr.lib
<br></code></td>
    <td><a name="946193"> </a><code>libcmt.lib</code> (/MT)
<br><a name="946194"> </a><code>oldnames.lib
<br></code><a name="946195"> </a><code>kernel32.lib
<br></code><a name="946196"> </a><code>user32.lib
<br></code><a name="946197"> </a><code>netapi32.lib
<br></code><a name="946198"> </a><code>advapi32.lib
<br></code><a name="946199"> </a><code>gdi32.lib
<br></code><a name="946200"> </a><code>comdlg32.lib
<br></code><a name="946201"> </a><code>comctl32.lib
<br></code><a name="949377"> </a><code>wsock32.lib
<br></code></td>
  </tr>
  <tr>
    <td><a name="946203"> </a>Add for 
<br>CRO
<br></td>
    <td><a name="946205"> </a><code>
<br></code></td>
    <td><a name="946208"> </a><code>libcrvs.lib
<br></code><a name="946210"> </a><code>libsb.lib
<br></code></td>
    <td><a name="946212"> </a><code>
<br></code></td>
  </tr>
  <tr>
    <td><a name="946214"> </a>Add for 
<br>FLEX<em>lock
<br></em></td>
    <td><a name="946219"> </a>
<br></td>
    <td><a name="946221"> </a><code>flock.lib
<br></code></td>
    <td><a name="946223"> </a>
<br></td>
  </tr>
</table>




<p>
  <a name="946249"> </a>
</p>

  <dl>
     <dt> <a name="902145"> </a>If you want to link with the FLEX<em>lm</em> client, FLEX<em>lock</em>, and/or Microsoft Visual C++ libraries dynamically, see the <em>FLEXlm Programmers Guide</em>.
     <dt> <a name="902037"> </a>On UNIX, if you have installed the FLEX<em>lm</em> libraries into <code>/usr/xxx/</code>, link with a command of the following form:
    <dl>
       <dt> <a name="880988"> </a><CODE>cc -o <code><em>program</em></code> <code><em>program</em></code>.o $(OBJS) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-L/usr/xxx/flexlm/v7.2/<code><em>platform</em></code> -llmgr</CODE>
    </dl>
     <dt> <a name="880989"> </a>where <code>$(OBJS)</code> is the list of the objects for your program and <code><em>platform</em></code> is, for example, <code>sun4_u5</code> for Solaris. You can put <code>-llmgr</code> anywhere after your objects, and before <code>-lsocket</code> and <code>-lintl</code>, if needed on your system. For a correct example, see how <code>lmclient</code> is linked in the makefile in the <code><em>platform</em></code> directory.
     <dt> <a name="880990"> </a>On UNIX, it is strongly recommended that your application be linked with dynamic OS libraries. That is, avoid <code>-BSTATIC</code> or linking directly with <code>libc.a</code> or other system libraries. Here's why:
  </dl>
  <ul>
    <li><a name="880991"> </a>On many UNIX systems, NIS and DNS will fail unless applications are linked with shared system libraries.
    <li><a name="880992"> </a>Many important system fixes are implemented by shipping new shared libraries to end users. By linking with static libraries, users often don't obtain essential fixes to applications unless the application is re-linked.
  </ul>
</ol>

<h3>
  <a name="881056"> </a>3.3	 lc_auth_data()
</h3>


<h5>
  <a name="881057"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881058"> </a><CODE><code><em>conf</em></code> = lc_auth_data(<code><em>job</em></code>, <code><em>feature</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881059"> </a>Description
</h5>


<p>
  <a name="881060"> </a>Gets the license file line for a feature that has been checked out. Since <font  face="Arial" size="2">lc_auth_data()</font> only returns features which have been successfully checked out, the data returned is authenticated.
</p>


<h5>
  <a name="881061"> </a>Parameters
</h5>


<p>
  <a name="896627"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896624"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="896626"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="896641"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="896643"> </a>The desired feature.
<br></td>
  </tr>
</table>




<p>
  <a name="896628"> </a>
</p>


<h5>
  <a name="881064"> </a>Return
</h5>


<p>
  <a name="896659"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896656"> </a>(<code>CONFIG </code>*) <code><em>conf
<br></em></code></td>
    <td><a name="896658"> </a>The <code>CONFIG</code> struct, or NULL if error. The 
<br><code>CONFIG</code> struct is defined in the header file 
<br><code>lmclient.h</code>.
<br></td>
  </tr>
</table>




<h5>
  <a name="881067"> </a>Error Returns
</h5>


<p>
  <a name="896700"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896693"> </a>LM_FUNCNOTAVAIL
<br></td>
    <td><a name="896695"> </a>Vendor keys do not support this function.
<br></td>
  </tr>
  <tr>
    <td><a name="896697"> </a>LM_NOFEATURE
<br></td>
    <td><a name="896699"> </a>Feature not found.
<br></td>
  </tr>
</table>




<p>
  <a name="896701"> </a>
</p>


<p>
  <a name="881072"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 If you call <font  face="Arial" size="2">lc_checkout()</font> with the LM_CO_LOCALTEST flag, use the alternate function <font  face="Arial" size="2">lc_test_conf()</font> to retrieve the license file line for the tested feature. This can only be done after the most recent call to<font  face="Arial" size="2"> lc_checkout()</font>. <font  face="Arial" size="2">lc_test_conf()</font> takes a job handle parameter and returns a <code>CONFIG *</code> struct.</FONT><HR WIDTH=75%>


<h5>
  <a name="881073"> </a>See Also
</h5>

<ul>
  <li><a name="881077"> </a><a href="all.htm#881790">Section 3.20, "lc_get_config()</a>"

  <li><a name="881078"> </a><code>lmclient.h</code> for the <code>CONFIG</code> struct definition

</ul>

<h3>
  <a name="881081"> </a>3.4	 lc_check_key()
</h3>


<h5>
  <a name="881082"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881083"> </a><CODE><code><em>status</em></code> = lc_check_key(<code><em>job</em></code>, <code><em>conf</em></code>, <code><em>code</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881084"> </a>Description
</h5>


<p>
  <a name="881086"> </a><font  face="Arial" size="2">lc_check_key()</font> determines if the signature in the <code>CONFIG</code> is valid. To verify a license file upon installation, you could use code similar to the following example:
</p>

<dl>  <dl>
     <dt> <a name="881087"> </a><CODE>VENDORCODE code;</CODE>
     <dt> <a name="908856"> </a><CODE>lc_new_job(..., &amp;code, ...);</CODE>
     <dt> <a name="908855"> </a><CODE>feats = lc_feat_list(...);</CODE>
     <dt> <a name="896776"> </a><CODE>while (*feats)</CODE>
     <dt> <a name="896777"> </a><CODE>{</CODE>
     <dt> <a name="896780"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = 0;</CODE>
     <dt> <a name="896781"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (<code><em>conf</em></code> = lc_next_conf(<code><em>job</em></code>, *feats, &amp;<code><em>pos</em></code>))</CODE>
     <dt> <a name="896782"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="896783"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lc_check_key(<code><em>job</em></code>, <code><em>conf</em></code>, &amp;<code><em>code</em></code>))</CODE>
     <dt> <a name="896784"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*error*/</CODE>
     <dt> <a name="896785"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="896786"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats++;</CODE>
     <dt> <a name="896787"> </a><CODE>}</CODE>
  </dl>
</dl>
<h5>
  <a name="881088"> </a>Parameters
</h5>


<p>
  <a name="896791"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896798"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="896800"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="896802"> </a><code>(CONFIG *) </code><code><em>conf
<br></em></code></td>
    <td><a name="896804"> </a>From<font  face="Arial" size="2"> lc_next_conf()</font>, <font  face="Arial" size="2">lc_get_config()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="896806"> </a><code>pointer to <br>
<br>(VENDORCODE) </code><code><em>code
<br></em></code></td>
    <td><a name="896808"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="896795"> </a>
</p>


<h5>
  <a name="881092"> </a>Return
</h5>


<p>
  <a name="896951"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896958"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="896960"> </a>The FLEX<em>lm</em> error code, or 0 for no error.
<br></td>
  </tr>
</table>




<p>
  <a name="896955"> </a>
</p>


<h5>
  <a name="881097"> </a>Error Returns
</h5>


<p>
  <a name="896991"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896998"> </a>LM_BADCODE
<br></td>
    <td><a name="897000"> </a>Signature is invalid--license has been 
<br>typed incorrectly, or altered in some way.
<br></td>
  </tr>
  <tr>
    <td><a name="897002"> </a>LM_BADPARAM
<br></td>
    <td><a name="897004"> </a>Problem with <code><em>conf</em></code> argument.
<br></td>
  </tr>
  <tr>
    <td><a name="897006"> </a>LM_FUTURE_FILE
<br></td>
    <td><a name="897008"> </a>License format is invalid and may be from 
<br>a "future" FLEX<em>lm</em> version.
<br></td>
  </tr>
</table>




<p>
  <a name="896995"> </a>
</p>


<h5>
  <a name="881107"> </a>See Also
</h5>

<ul>
  <li><a name="881109"> </a><code>../examples/advanced/exinstal.c</code>

  <li><a name="881113"> </a><a href="all.htm#882023">Section 3.27, "lc_next_conf()</a>"

  <li><a name="881117"> </a><a href="all.htm#948582">Section 3.8, "lc_convert()</a>"

  <li><a name="881121"> </a><a href="all.htm#881617">Section 3.14, "lc_feat_list()</a>"

</ul>

<h3>
  <a name="881124"> </a>3.5	 lc_checkin()
</h3>


<h5>
  <a name="881125"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881126"> </a><CODE>(void) lc_checkin(<code><em>job</em></code>, <code><em>feature</em></code>, <code><em>keep_conn</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881127"> </a>Description
</h5>


<p>
  <a name="881128"> </a>Checks in the licenses of the specified feature. For TCP clients, the daemon will detect the fact that the client exited, and return any licenses that were checked out back to the available pool. For TCP, this call is used if the application has need of a feature for a period of time, then no longer needs it. For UDP, this call is essential to free a license, otherwise, the server has to timeout the license. The second parameter is used for TCP clients to tell FLEX<em>lm</em> to keep the connection open to the server for cases where another feature will be needed shortly after this one is released. If the communications protocol is TCP, there is no appreciable time delay incurred in returning the license if the program exits rather than returning the license via <font  face="Arial" size="2">lc_checkin()</font>. For reporting purposes in the report log file, it is preferable to check in a license with <font  face="Arial" size="2">lc_checkin()</font> rather than simply exiting, because these two types of events are recorded differently in the report log file.
</p>


<h5>
  <a name="881136"> </a>Parameters
</h5>


<p>
  <a name="897140"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="897129"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="897131"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="897133"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="897135"> </a>The feature name to be checked in, or 
<br>LM_CI_ALL_FEATURES.
<br></td>
  </tr>
  <tr>
    <td><a name="897137"> </a><code>(int) </code><code><em>keep_conn
<br></em></code></td>
    <td><a name="897139"> </a>If non-zero, means "Keep connection to 
<br>server." If 0, drops TCP connection. 
<br>Unused for UDP.
<br></td>
  </tr>
</table>




<p>
  <a name="897141"> </a>
</p>


<h5>
  <a name="908884"> </a>Return
</h5>


<p>
  <a name="908888"> </a>None.
</p>


<h3>
  <a name="881152"> </a>3.6	 lc_checkout()
</h3>


<h5>
  <a name="881153"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881155"> </a><CODE><code><em>status</em></code> = lc_checkout(<code><em>job</em></code>, <code><em>feature</em></code>, <code><em>version</em></code>, <code><em>num_lic</em></code>, <code><em>flag</em></code>,</CODE>
    <dl>
       <dt> <a name="897190"> </a><CODE><code><em>code</em></code>, <code><em>dup_group</em></code>)</CODE>
    </dl>
  </dl>
</dl>
<h5>
  <a name="881156"> </a>Description
</h5>


<p>
  <a name="897240"> </a>Checks out one (or more) license(s) of the specified feature. If the process that calls <font  face="Arial" size="2">lc_checkout()</font> exits in any manner, then the checked-out license will be returned for re-use by another user. For TCP clients, the resulting checkin is immediate.
</p>


<p>
  <a name="908929"> </a>Place the call to <font  face="Arial" size="2">lc_checkout()</font> in an executable that is active whenever the user is using the feature. If <code><em>flag</em></code> is specified as LM_CO_WAIT, then the process will wait until the number of licenses requested for this feature are available. The license file must specify a version that is greater than or equal to the version in the <font  face="Arial" size="2">lc_checkout()</font> call.
</p>


<p>
  <a name="897245"> </a>If the license file is <em>counted</em>, that is, if the number of users specified on the FEATURE line is non-zero, <font  face="Arial" size="2">lc_checkout()</font> will request the license from a license server. If the number of users on the FEATURE line is <em>uncounted</em>, it will grant permission based on the contents of the license file only--hostid, version, expiration date, etc.
</p>

<ul>
  <li><a name="881163"> </a>It is strongly recommended that the application first indicate the expected license file location, with<font  face="Arial" size="2">: </font>

  <dl>
     <dt> <a name="938284"> </a><font  face="Arial" size="2">lc_set_attr(</font><code><em>job</em></code><code>, LM_A_LICENSE_DEFAULT, \</code>
     <dt> <a name="938291"> </a><code>(LM_A_VAL_TYPE)</code><code><em>lic_path</em></code><code>/license.dat</code><font  face="Arial" size="2">)</font>
     <dt> <a name="938285"> </a>The <code><em>lic_path</em></code> should be a location in your installation hierarchy. Since this is rarely known at compile time, the most common method is to use the registry on Windows, or <font  face="Arial" size="2">getenv()</font> on UNIX to find out where the application was installed. This makes license installation and product use easier and more reliable.
  </dl>
  <li><a name="881166"> </a>Multiple checkout requests from the same process in the same license job will not result in additional licenses being checked out, unless a new request specifies more licenses than were previously checked out. That is, two calls to <font  face="Arial" size="2">lc_checkout(</font><code>...,1,...</code><font  face="Arial" size="2">)</font> will result in only one license being checked out, not two. A second call to request two licenses would result in a total of two licenses.

  <li><a name="881167"> </a>For improved security, it is recommended that the parameters <code><em>feature</em></code>, <code><em>version</em></code>, etc., be "hidden"--the string should not be directly declared in source code. It should be built up chars or smaller strings, and then created via <font  face="Arial" size="2">sprintf()</font>. That way, it is more difficult for users to change the license being checked out by altering the string in the binary.

</ul>

<h5>
  <a name="881168"> </a>Parameters
</h5>


<p>
  <a name="897384"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="897372"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="897374"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="897376"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="897378"> </a>The ASCII feature name desired.
<br></td>
  </tr>
  <tr>
    <td><a name="897381"> </a><code>(char *) </code><code><em>version
<br></em></code></td>
    <td><a name="897383"> </a>The version of the feature desired in 
<br>floating point format, maximum of ten 
<br>characters (e.g., "12345.123" or 
<br>"123.456789"). This value must be &lt;= the 
<br>version number in the license file for the 
<br>checkout to succeed.
<br><a name="908953"> </a>Letters are not allowed in versions. For 
<br>example, "v1.0" is illegal.
<br></td>
  </tr>
  <tr>
    <td><a name="908971"> </a><code>(int) </code><code><em>num_lic
<br></em></code></td>
    <td><a name="908973"> </a>The number of licenses to check out. 
<br>(Must be &gt; 0.)
<br></td>
  </tr>
  <tr>
    <td><a name="908975"> </a><code>(int) </code><code><em>flag
<br></em></code></td>
    <td><a name="908977"> </a>The checkout option flag.
<br></td>
  </tr>
</table>




<dl>  <dl>
     <dt> <a name="881179"> </a>Possible values for <code><em>flag</em></code> are:

<p>
  <a name="897455"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="897462"> </a>LM_CO_NOWAIT
<br></td>
    <td><a name="897464"> </a>Do not wait--non-blocking<em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="897466"> </a>LM_CO_WAIT
<br></td>
    <td><a name="897468"> </a>Wait, return when license is 
<br>granted--<em>blocking</em>.
<br></td>
  </tr>
  <tr>
    <td><a name="897470"> </a>LM_CO_QUEUE
<br></td>
    <td><a name="897472"> </a>Queue request, return immediately. 
<br>This request will give you the 
<br>license if it is available. You can find 
<br>out if you hold the license by calling 
<br><font  face="Arial" size="2">lc_status()</font>. If there are multiple 
<br>license pools, this queues from only 
<br>the first license pool in the list. 
<br></td>
  </tr>
  <tr>
    <td><a name="897474"> </a>LM_CO_LOCALTEST
<br></td>
    <td><a name="897476"> </a>Perform local tests, but do not check 
<br>out a license (return status). The 
<br>status from this call will detect all 
<br>checkout errors that can be 
<br>determined from the license file 
<br><em>only</em>. In particular, 
<br>LM_MAXUSERS/LM_USERQUEU
<br>ED is not detected.
<br></td>
  </tr>
</table>




<p>
  <a name="897459"> </a>
</p>


<p>
  <a name="881188"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="897531"> </a><code>pointer to<br>
<br>(VENDORCODE) </code><code><em>code
<br></em></code></td>
    <td><a name="897533"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="897535"> </a><code>(int) </code><code><em>dup_group
<br></em></code></td>
    <td><a name="897537"> </a>Duplicate grouping mask for this feature.
<br></td>
  </tr>
</table>




<p>
  <a name="897528"> </a>
</p>

     <dt> <a name="881190"> </a>Requests for licenses from "duplicates" can either be "grouped," or not "grouped." Grouping duplicates allows license requests from separate processes to use a single license if the process's USER, HOST, DISPLAY, and/or VENDOR_DEFINED field are the same. The <code><em>dup_group</em></code> parameter allows you to select what to compare to constitute a group from the set {USER HOST DISPLAY VENDOR}. Any of the four fields that are not set to compare will automatically match; thus not setting any of the four fields yields a site license, since all users on all hosts on all displays are the same as far as the comparison is concerned. The following examples illustrate the use of the duplicate grouping capability:

<p>
  <a name="897583"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="897590"> </a><strong>Value:
<br></strong></td>
    <td><a name="897592"> </a><strong>Meaning:
<br></strong></td>
  </tr>
  <tr>
    <td><a name="897594"> </a>LM_DUP_NONE
<br></td>
    <td><a name="897596"> </a>Every process gets a new 
<br>license.
<br></td>
  </tr>
  <tr>
    <td><a name="897598"> </a>LM_DUP_USER
<br></td>
    <td><a name="897600"> </a>All requests from this user 
<br>name share the same license.
<br></td>
  </tr>
  <tr>
    <td><a name="897602"> </a>LM_DUP_HOST
<br></td>
    <td><a name="897604"> </a>All requests from this host 
<br>name share the same licenses. 
<br>This is a "floating node-
<br>locked" license.
<br></td>
  </tr>
  <tr>
    <td><a name="897606"> </a>LM_DUP_DISP
<br></td>
    <td><a name="897608"> </a>All requests from this display 
<br>share the same license. (Useful 
<br>for display or GUI based 
<br>products, like a window 
<br>system.)
<br></td>
  </tr>
  <tr>
    <td><a name="897623"> </a>LM_DUP_VENDOR
<br></td>
    <td><a name="897625"> </a>All requests with the same 
<br>vendor-defined data, use the 
<br>same license. (Useful for 
<br>sharing licenses among 
<br>otherwise unrelated processes.) 
<br>If LM_DUP_VENDOR is used, 
<br>LM_A_CHECKOUT_DATA 
<br>must be set. 
<br></td>
  </tr>
  <tr>
    <td><a name="897678"> </a>LM_DUP_USER | 
<br>LM_DUP_HOST
<br></td>
    <td><a name="897680"> </a>All requests from this user 
<br>name on this host name use the 
<br>same license. 
<br></td>
  </tr>
  <tr>
    <td><a name="897610"> </a>LM_DUP_USER | 
<br>LM_DUP_DISP
<br></td>
    <td><a name="897612"> </a>All requests from this user 
<br>name on this display use the 
<br>same license. (One user, 
<br>displaying on a single node, 
<br>using several nodes to run the 
<br>software.)
<br></td>
  </tr>
  <tr>
    <td><a name="897716"> </a>LM_DUP_USER | 
<br>LM_DUP_HOST | 
<br>LM_DUP_DISP
<br></td>
    <td><a name="897718"> </a>All requests from this user 
<br>name on this host name using 
<br>this display use the same 
<br>license.
<br></td>
  </tr>
  <tr>
    <td><a name="897712"> </a>LM_DUP_USER | 
<br>LM_DUP_VENDOR
<br></td>
    <td><a name="897714"> </a>All requests from this user 
<br>name with the same vendor 
<br>data use the same license. If 
<br>LM_DUP_VENDOR is used, 
<br>LM_A_CHECKOUT_DATA 
<br>must be set. 
<br></td>
  </tr>
  <tr>
    <td><a name="897708"> </a>LM_DUP_SITE
<br></td>
    <td><a name="897710"> </a>All requests from any user on 
<br>any node on any display with 
<br>any vendor data use the same 
<br>license (site license).
<br></td>
  </tr>
</table>




     <dt> <a name="881212"> </a>The first client that checks out the feature specifies the duplicate grouping for the feature. Any subsequent client that attempts to check out the feature with a different duplicate grouping mask will be rejected and an error reflecting this will appear in the <code>lmgrd</code> debug log file. The duplicate grouping value is reset whenever all licenses are checked back in. 
  </dl>
</dl>
<h5>
  <a name="881213"> </a>RESERVE and DUP_GROUP
</h5>

<dl>  <dl>
     <dt> <a name="881216"> </a>There is an important interaction between RESERVE and the duplicate grouping mask. A license reservation for an entity not contained in the duplicate grouping mask in the <font  face="Arial" size="2">lc_checkout()</font> call (e.g., a USER reservation) when the duplicate grouping mask is set to <code>LM_DUP_HOST | LM_DUP_DISP</code>) can cause an interesting interaction at run-time. 
     <dt> <a name="881217"> </a>To understand why this is the case, consider the following example:
  </dl>
  <ul>
    <li><a name="881218"> </a>Your software groups duplicates based on USER and DISPLAY
    <li><a name="881219"> </a>Your end user has a license file with a single license
    <li><a name="881220"> </a>Your end user reserves this license for HOST "nodea"
    <li><a name="881221"> </a>User "joe" on display "displaya" on HOST "nodea" checks out a license. He gets the license, since his HOST matches the reservation.
    <li><a name="881222"> </a>User "joe" on display "displaya" on HOST "nodeb" checks out a license. He also gets a license, since he is grouped with the first license as a duplicate.
    <li><a name="881223"> </a>The first user (joe/displaya/nodea) checks in his license.
  </ul>
  <dl>
     <dt> <a name="881224"> </a>At this point in the example, the situation appears to be inconsistent. The second user continues to hold the reservation, which means that a user on "nodeb" is using a license reserved for "nodea." Once this second user checks in the license, the reservation will return to the pool of reservations to be used by anyone on "nodea."
     <dt> <a name="881228"> </a>FLEX<em>lm</em> was designed to allow this potential temporary inconsistency rather than the alternative, which is to have an unusable reservation.
  </dl>
</dl>
<h5>
  <a name="881230"> </a>Registry and $HOME/.flexlmrc
</h5>

<dl>  <dl>
     <dt> <a name="881231"> </a>Environment variables can be taken either from the environment or from the registry (on Windows) or <code>$HOME/.flexlmrc</code> (UNIX). After a successful checkout, the <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> variable is set for the location in the registry (Windows) or <code>$HOME/.flexlmrc</code> (UNIX). This way, all subsequent checkouts for features from this vendor will automatically use the license that worked previously. Note that this location is added to all other locations the application may look for the license.
     <dt> <a name="947942"> </a>This automatic registry update can be turned off with:
    <dl>
       <dt> <a name="881232"> </a><CODE>lc_set_attr(<code><em>job</em></code>, LM_A_CKOUT_INSTALL_LIC, (LM_A_VAL_TYPE)0);</CODE>
    </dl>
  </dl>
</dl>
<h5>
  <a name="881233"> </a>Return
</h5>


<p>
  <a name="897851"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="897858"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="897860"> </a>0--OK, license checked out
<br><a name="897874"> </a>&lt;&gt; 0--Error
<br></td>
  </tr>
</table>




<p>
  <a name="897855"> </a>
</p>


<h5>
  <a name="881236"> </a>Error Returns
</h5>


<p>
  <a name="897890"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="897897"> </a>LM_BADCODE
<br></td>
    <td><a name="897899"> </a>Signature in license file does not match 
<br>other data in file.
<br></td>
  </tr>
  <tr>
    <td><a name="897901"> </a>LM_BADFEATPARAM
<br></td>
    <td><a name="897952"> </a>"Duplicate selection mismatch for this 
<br>feature"
<br><a name="897903"> </a>The checkout request for this feature has 
<br>specified a duplicates mask 
<br>(<code>LM_DUP_</code><code><em>xxx</em></code>) that does not match the 
<br>mask specified by an earlier checkout. 
<br>This is probably the result of using 
<br>different versions of your client 
<br>software, or from having an uninitialized 
<br>variable in the <code><em>dup_group</em></code> field for 
<br><font  face="Arial" size="2">lc_checkout()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="897905"> </a>LM_BADHANDSHAKE
<br></td>
    <td><a name="897907"> </a>Authentication handshake with daemon 
<br>failed.
<br></td>
  </tr>
  <tr>
    <td><a name="897909"> </a>LM_BADPARAM
<br></td>
    <td><a name="897911"> </a>FLEX<em>lm</em> function argument is invalid or 
<br>there is an invalid setting in <code>lm_code.h</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="897913"> </a>LM_BADSYSDATE
<br></td>
    <td><a name="897915"> </a>System clock has been set back. This 
<br>error can only occur when the 
<br>FEATURE line contains an expiration 
<br>date.
<br></td>
  </tr>
  <tr>
    <td><a name="897917"> </a>LM_BAD_VERSION
<br></td>
    <td><a name="897919"> </a>Version argument is invalid floating 
<br>point format.
<br></td>
  </tr>
  <tr>
    <td><a name="897921"> </a>LM_BUSYNEWSERV
<br></td>
    <td><a name="897923"> </a>License server busy starting another 
<br>copy of itself--retry.
<br></td>
  </tr>
  <tr>
    <td><a name="897925"> </a>LM_CANTCONNECT
<br></td>
    <td><a name="897927"> </a>Cannot establish a connection with a 
<br>license server.
<br></td>
  </tr>
  <tr>
    <td><a name="897929"> </a>LM_FEATQUEUE
<br></td>
    <td><a name="897931"> </a>Feature is queued. <font  face="Arial" size="2">lc_status()</font> will 
<br>indicate when it is available.
<br></td>
  </tr>
  <tr>
    <td><a name="897933"> </a>LM_FUNCNOTAVAIL
<br></td>
    <td><a name="897935"> </a>Vendor keys do not support this 
<br>function.
<br></td>
  </tr>
  <tr>
    <td><a name="898106"> </a>LM_LOCALFILTER
<br></td>
    <td><a name="898108"> </a>Checkout request filtered by the vendor-
<br>defined filter routine.
<br></td>
  </tr>
  <tr>
    <td><a name="898102"> </a>LM_MAXLIMIT
<br></td>
    <td><a name="898104"> </a>Checkout exceeds MAX specified in 
<br>options file.
<br></td>
  </tr>
  <tr>
    <td><a name="898098"> </a>LM_MAXUSERS
<br></td>
    <td><a name="898100"> </a>All licenses in use. Applications usually 
<br>need to test for both LM_MAXUSERS 
<br>and LM_USERSQUEUED instead of 
<br>only LM_MAXUSERS.
<br></td>
  </tr>
  <tr>
    <td><a name="898094"> </a>LM_NO_SERVER_IN_FILE
<br></td>
    <td><a name="898096"> </a>No license server specified for counted 
<br>license.
<br></td>
  </tr>
  <tr>
    <td><a name="898090"> </a>LM_NOFEATURE
<br></td>
    <td><a name="898092"> </a>Cannot find feature in the license file.
<br></td>
  </tr>
  <tr>
    <td><a name="898086"> </a>LM_NOSERVSUPP
<br></td>
    <td><a name="898088"> </a>Server has different license file than 
<br>client--client's license has feature, but 
<br>server's does not.
<br></td>
  </tr>
  <tr>
    <td><a name="898082"> </a>LM_OLDVER
<br></td>
    <td><a name="898084"> </a>License file does not support a version 
<br>this new.
<br></td>
  </tr>
  <tr>
    <td><a name="898078"> </a>LM_PLATNOTLIC
<br></td>
    <td><a name="898080"> </a>This platform is not authorized by the 
<br>license--running on a platform not 
<br>included in PLATFORMS="..." list.
<br></td>
  </tr>
  <tr>
    <td><a name="898074"> </a>LM_SERVBUSY
<br></td>
    <td><a name="898076"> </a>License server busy--the request should 
<br>be retried. (This is a rare occurrence.)
<br></td>
  </tr>
  <tr>
    <td><a name="898070"> </a>LM_USERSQUEUED
<br></td>
    <td><a name="898072"> </a>Like LM_MAXUSERS, but also 
<br>indicates that there are already some 
<br>users queued. Applications usually need 
<br>to test for both LM_MAXUSERS and 
<br>LM_USERSQUEUED instead of only 
<br>LM_MAXUSERS.
<br></td>
  </tr>
</table>




<p>
  <a name="897894"> </a>
</p>


<h5>
  <a name="881279"> </a>See Also
</h5>

<ul>
  <li><a name="881283"> </a><code>machind/lmflex.c</code>

  <li><a name="946652"> </a><a href="all.htm#882951">Section 4.4, "LM_A_CHECKOUT_DATA</a>"

  <li><a name="881287"> </a><a href="all.htm#883083">Section 4.15, "LM_A_LICENSE_DEFAULT</a>"

  <li><a name="881291"> </a><a href="all.htm#883033">Section 4.10, "LM_A_HOST_OVERRIDE</a>"

  <li><a name="881295"> </a><a href="all.htm#882991">Section 4.7, "LM_A_DISPLAY_OVERRIDE</a>"

  <li><a name="881299"> </a><a href="all.htm#883320">Section 4.26, "LM_A_USER_OVERRIDE</a>"

  <li><a name="881303"> </a><a href="all.htm#881124">Section 3.5, "lc_checkin()</a>"

  <li><a name="881307"> </a><a href="all.htm#912235">Section 5.5, "FEATURE or INCREMENT Lines</a>"

  <li><a name="881311"> </a><a href="all.htm#923195">Section 3.31, "lc_status()</a>"

  <li><a name="881315"> </a><a href="all.htm#946935">Section 2.6, "Multiple Jobs</a>"

  <li><a name="881319"> </a><a href="all.htm#882978">Section 4.6, "LM_A_CKOUT_INSTALL_LIC</a>"

</ul>

<h3>
  <a name="881321"> </a>3.7	 lc_chk_conf()
</h3>


<h5>
  <a name="881322"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881323"> </a><CODE><code><em>errors</em></code> = lc_chk_conf(<code><em>job</em></code>, <code><em>conf</em></code>, <code><em>check_name</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881324"> </a>Description
</h5>


<p>
  <a name="881325"> </a>Given a pointer to a <code>CONFIG</code> struct, <font  face="Arial" size="2">lc_chk_conf()</font> returns a string describing errors in the struct, or NULL if no problems are found. 
</p>

<ul>
  <li><a name="881326"> </a>Normally <font  face="Arial" size="2">lc_ck_conf()</font> should only be used by a license generation program that calls <font  face="Arial" size="2">lc_cryptstr()</font>, such as <code>lmcrypt</code>, because warnings are issued on valid license feature lines.

  <li><a name="881327"> </a><code><em>conf</em></code> must be a valid <code>CONFIG</code> pointer -- otherwise it will core dump.

</ul>

<h5>
  <a name="881328"> </a>Parameters
</h5>


<p>
  <a name="900536"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="900543"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="900545"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="900547"> </a><code>(CONFIG *) </code><code><em>conf
<br></em></code></td>
    <td><a name="900549"> </a>The feature <code>(CONFIG *)</code> to be checked.
<br></td>
  </tr>
  <tr>
    <td><a name="900551"> </a><code>(int) </code><code><em>check_name
<br></em></code></td>
    <td><a name="900553"> </a>If non-zero, error messages will be reported 
<br>if the feature name is invalid.
<br></td>
  </tr>
</table>




<p>
  <a name="900540"> </a>
</p>


<h5>
  <a name="881332"> </a>Return
</h5>


<p>
  <a name="900583"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="900590"> </a><code>(char *) </code><code><em>errors
<br></em></code></td>
    <td><a name="900592"> </a>A descriptive error string, or 0 if no errors 
<br>found.
<br></td>
  </tr>
</table>




<p>
  <a name="923785"> </a>
</p>


<h3>
  <a name="948582"> </a>3.8	 lc_convert()
</h3>


<h5>
  <a name="881337"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881338"> </a><CODE><code><em>status</em></code> = lc_convert(<code><em>job</em></code>, <code><em>str</em></code>, <code><em>return_str</em></code>, <code><em>errors</em></code>, <code><em>flag</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881339"> </a>Description
</h5>


<p>
  <a name="881340"> </a>This is an API for companies that want to provide their own front-end for installing license files. <font  face="Arial" size="2">lc_convert()</font> can be used in combination with <em></em><font  face="Arial" size="2">lc_check_key()</font> to provide a user-friendly front-end.
</p>


<p>
  <a name="881344"> </a><font  face="Arial" size="2">lc_convert()</font> also changes <code>this_host</code> in the SERVER line to the real host name in either decimal or readable licenses. It does this only if <font  face="Arial" size="2">lc_convert()</font> is run on the same hostid as appears on the SERVER line and does not do this for hostids of DEMO or ANY.
</p>


<p>
  <a name="881345"> </a>If readable output is requested, the output will be compatible with the LM_A_LICENSE_FMT_VER setting, which defaults to the current FLEX<em>lm</em> version.
</p>


<h5>
  <a name="881350"> </a>Parameters
</h5>


<p>
  <a name="900688"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="900695"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="900697"> </a>From <font  face="Arial" size="2">lc_new_job()
<br></font></td>
  </tr>
  <tr>
    <td><a name="900699"> </a><code>(char *) </code><code><em>str
<br></em></code></td>
    <td><a name="900701"> </a>License file (in readable or decimal 
<br>format) as a string.
<br></td>
  </tr>
  <tr>
    <td><a name="900703"> </a><code>pointer to <br>
<br>(char *) </code><code><em>return_str
<br></em></code></td>
    <td><a name="900705"> </a><code><em>str</em></code> converted to desired format. Should 
<br>be freed by caller; use <font  face="Arial" size="2">lc_free_mem()</font> on 
<br>Windows.
<br></td>
  </tr>
  <tr>
    <td><a name="900707"> </a><code>pointer to <br>
<br>(char *) </code><code><em>errors
<br></em></code></td>
    <td><a name="900709"> </a>If return value is non-zero, then this is 
<br>set to a description of the problem. 
<br>Should be freed by caller; use 
<br><font  face="Arial" size="2">lc_free_mem()</font> on Windows.
<br></td>
  </tr>
  <tr>
    <td><a name="900711"> </a><code>(int) </code><code><em>flag
<br></em></code></td>
    <td><a name="900713"> </a>LC_CONVERT_TO_READABLE or 
<br>LC_CONVERT_TO_DECIMAL, 
<br>defined in <code>lmclient.h</code>.
<br></td>
  </tr>
</table>




<p>
  <a name="900692"> </a>
</p>


<h5>
  <a name="881359"> </a>Return
</h5>


<p>
  <a name="881360"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="900807"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="900809"> </a>0 == success.
<br><a name="900821"> </a>-1, if syntax error in <code><em>str</em></code>, and <code><em>errors</em></code> is 
<br>set to explanatory message. Otherwise, 
<br>FLEX<em>lm</em> errno.
<br></td>
  </tr>
</table>




<p>
  <a name="900804"> </a>
</p>


<h5>
  <a name="881364"> </a>Error Returns
</h5>


<p>
  <a name="900854"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="900861"> </a>LM_BADPARAM
<br></td>
    <td><a name="900863"> </a>Invalid <code><em>flag</em></code> argument.
<br></td>
  </tr>
</table>




<p>
  <a name="900858"> </a>
</p>


<h5>
  <a name="881368"> </a>See Also
</h5>

<ul>
  <li><a name="881370"> </a><code>examples/advanced/exinstal.c</code> for an example program

  <li><a name="881374"> </a><a href="all.htm#882023">Section 3.27, "lc_next_conf()</a>"

  <li><a name="881378"> </a><a href="all.htm#948582">Section 3.8, "lc_convert()</a>"

  <li><a name="881382"> </a><a href="all.htm#881617">Section 3.14, "lc_feat_list()</a>"

  <li><a name="881386"> </a><a href="all.htm#881393">Section 3.9, "lc_cryptstr(),"</a> because <font  face="Arial" size="2">lc_convert()</font> has a similar interface to <font  face="Arial" size="2">lc_cryptstr()</font>

  <li><a name="881390"> </a><a href="all.htm#883094">Section 4.16, "LM_A_LICENSE_FMT_VER</a>"

</ul>

<h3>
  <a name="881393"> </a>3.9	 lc_cryptstr()
</h3>


<h5>
  <a name="881394"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="948143"> </a><CODE>[global include and variable info:]</CODE>
     <dt> <a name="948144"> </a><CODE>#include "lm_code.h"</CODE>
     <dt> <a name="948145"> </a><CODE>LM_HANDLE *lm_job;</CODE>
     <dt> <a name="948146"> </a><CODE>LM_CODE(code, ENCRYPTION_SEED1, ENCRYPTION_SEED2, VENDOR_KEY1,</CODE>
    <dl>
       <dt> <a name="948222"> </a><CODE>VENDOR_KEY2, VENDOR_KEY3, VENDOR_KEY4, VENDOR_KEY5);</CODE>
    </dl>
     <dt> <a name="948148"> </a><CODE>[...]</CODE>
     <dt> <a name="948149"> </a><CODE></CODE>
     <dt> <a name="948150"> </a><CODE></CODE>
     <dt> <a name="948151"> </a><CODE>[C code:]</CODE>
     <dt> <a name="948154"> </a><CODE>char *errors;</CODE>
     <dt> <a name="948155"> </a><CODE>char *return_str;</CODE>
     <dt> <a name="948156"> </a><CODE>int flag = LM_CRYPT_FORCE;</CODE>
     <dt> <a name="948157"> </a><CODE>char *filename = "myfile.lic";</CODE>
     <dt> <a name="948158"> </a><CODE>char str[MAX_CONFIG_LINE * 100]; /* if maximum license is 100</CODE>
    <dl>
       <dt> <a name="948269"> </a><CODE>lines */</CODE>
    </dl>
     <dt> <a name="948159"> </a><CODE>[...]</CODE>
     <dt> <a name="948160"> </a><CODE>[set up str variable with valid license syntax]</CODE>
     <dt> <a name="948161"> </a><CODE>[...]</CODE>
     <dt> <a name="948162"> </a><CODE>LM_CODE_GEN_INIT(&amp;code);</CODE>
     <dt> <a name="948163"> </a><CODE>if (lc_init(0, VENDOR_NAME, &amp;code, &amp;lm_job))</CODE>
     <dt> <a name="948164"> </a><CODE>{</CODE>
     <dt> <a name="948165"> </a><CODE>/* present error */</CODE>
     <dt> <a name="948166"> </a><CODE>}</CODE>
     <dt> <a name="948167"> </a><CODE>[...]</CODE>
     <dt> <a name="948168"> </a><CODE>if (lc_cryptstr(lm_job, str, &amp;return_str, &amp;code, flag,</CODE>
    <dl>
       <dt> <a name="948169"> </a><CODE>filename, &amp;errors))</CODE>
    </dl>
     <dt> <a name="948170"> </a><CODE>{</CODE>
     <dt> <a name="948171"> </a><CODE>/* present error, and if non-null, print it out */</CODE>
     <dt> <a name="948172"> </a><CODE>}</CODE>
     <dt> <a name="948173"> </a><CODE>if (return_str)</CODE>
     <dt> <a name="948174"> </a><CODE>{</CODE>
     <dt> <a name="948175"> </a><CODE>/* return_str is the correct license-file string */</CODE>
     <dt> <a name="948176"> </a><CODE>}</CODE>
  </dl>
</dl>
<h5>
  <a name="881396"> </a>Description
</h5>


<p>
  <a name="881398"> </a>Generates license file as a string with signatures filled in. This new function is used by the <code>lmcrypt</code> command, and for some vendors will be an easier interface than <font  face="Arial" size="2">lc_crypt()</font> for generating licenses. You pass a string, which is a whole, valid license file, with one exception: each signature must be replaced with <code>SIGN=0</code> (zero). If you want to generate both a signature and a license key on a FEATURE line, see <a href="allApp.htm#921207">Appendix&nbsp;F, "Migrating to the Counterfeit Resistant Option</a>." 
</p>


<p>
  <a name="900994"> </a>If <code><em>flag</em></code> has LM_CRYPT_ONLY set, then the function returns the signature for the first FEATURE, INCREMENT, PACKAGE, or UPGRADE line in the file. If the LM_CRYPT_ONLY bit is clear in the <code><em>flag</em></code> argument (<code>!(</code><code><em>flag</em></code><code> &amp; LM_CRYPT_ONLY)</code>), then the whole file is returned as a string, with valid signatures. If <code><em>flag</em></code> has LM_CRYPT_FORCE set, then every line will have the signature recomputed, even if the key is not set to <code>SIGN=0</code>. If LM_CRYPT_FORCE is set, and if a line already has a signature, the start date will be taken from the current signature.
</p>


<p>
  <a name="881400"> </a>Comment lines are retained in the <code><em>return_str</em></code> output.
</p>


<p>
  <a name="881404"> </a><code><em>return_str</em></code> and <code><em>errors</em></code> are malloc'd by <font  face="Arial" size="2">lc_cryptstr()</font> and not reused by FLEX<em>lm</em>, so it is the responsibility of the caller to free the space returned if needed. (<font  face="Arial" size="2">lc_free_mem()</font> should be used on Windows and can be used everywhere, to free this memory).
</p>


<p>
  <a name="881405"> </a>The default start date is today's date. If you want to specify a start date other than today, then in place of <code>SIGN=0</code> in the license key, use the following syntax:
</p>

<dl>  <dl>
     <dt> <a name="881406"> </a><CODE>start:dd-mmm-yyyy</CODE>
  </dl>
</dl>
<p>
  <a name="881407"> </a>Example:
</p>

<dl>  <dl>
     <dt> <a name="881408"> </a><CODE>start:1-jan-2005</CODE>
  </dl>
</dl>
<p>
  <a name="944502"> </a>If readable output is requested, the output will be compatible with the LM_A_LICENSE_FMT_VER setting, which defaults to the current FLEX<em>lm</em> version.
</p>


<h5>
  <a name="901070"> </a>Parameters
</h5>


<p>
  <a name="901079"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="901086"> </a><code>(LM_HANDLE *) </code>lm_job
<br></td>
    <td><a name="901088"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="901090"> </a><code>(char *) </code><code><em>str</em></code><code> 
<br></code></td>
    <td><a name="901092"> </a>Set <code><em>str</em></code> to a complete valid license file, 
<br>where the signatures are replaced with 
<br><code>SIGN=0</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="901094"> </a><code>pointer to <br>
<br>(char *) </code><code><em>return_str
<br></em></code></td>
    <td><a name="901096"> </a>Resulting license file string. Malloc'd by 
<br><font  face="Arial" size="2">lc_cryptstr()</font> and freed by the calling 
<br>program. Pass the address of a <code>char</code> 
<br>pointer.
<br></td>
  </tr>
  <tr>
    <td><a name="901098"> </a><code>pointer to <br>
<br>(VENDORCODE) </code><code><em>code
<br></em></code></td>
    <td><a name="901100"> </a>From <font  face="Arial" size="2">LM_CODE()</font> macro. (With v7.2, <em>do 
<br>not</em> XOR <code>code.data[0]</code> and 
<br><code>code.data[1]</code> with <code><em>VENDOR_KEY5</em></code>.)
<br></td>
  </tr>
  <tr>
    <td><a name="901102"> </a><code>(int) </code><code><em>flag
<br></em></code></td>
    <td><a name="901104"> </a>Mask which can be binary OR'd ( | ) with 
<br>the following flags:
<br><a name="901274"> </a>LM_CRYPT_ONLY--If true, only return 
<br>signature for first FEATURE in <code><em>str</em></code>.
<br><a name="901284"> </a>LM_CRYPT_FORCE--If set, recompute 
<br>the signature for <em>every</em> line, even if the 
<br>signature is already present on the line.
<br><a name="901288"> </a>LM_CRYPT_IGNORE_FEATNAME_<br>
<br>ERRS--If set, no warnings returned about 
<br>invalid feature names.
<br><a name="901295"> </a>LM_CRYPT_DECIMAL--Output will be 
<br>decimal format. Otherwise, readable 
<br>format.
<br></td>
  </tr>
  <tr>
    <td><a name="901183"> </a><code>(char *) </code><code><em>filename
<br></em></code></td>
    <td><a name="901177"> </a>For error reporting, or <code>(char *)</code>0. This 
<br>name will appear in the error message as 
<br>the file name.
<br></td>
  </tr>
  <tr>
    <td><a name="901106"> </a><code>pointer to <br>
<br>(char *) </code><code><em>errors
<br></em></code></td>
    <td><a name="901108"> </a>For error reporting, or <code>(char **)</code>0. If 
<br>there are errors, the return value is non-
<br>zero and errors is set to an explanatory 
<br>string. Malloc'd by <font  face="Arial" size="2">lc_cryptstr()</font>, and freed 
<br>by the calling program (use <font  face="Arial" size="2">lc_free_mem()</font> 
<br>on Windows). Pass the address of a <code>char</code> 
<br>pointer.
<br><a name="901320"> </a>If a warning occurs, <code><em>errors</em></code> is set to a 
<br>warning string, but the return value is 0 
<br>(success).
<br></td>
  </tr>
</table>




<p>
  <a name="901083"> </a>
</p>


<h5>
  <a name="881428"> </a>Return
</h5>


<p>
  <a name="901206"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="901213"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="901215"> </a>0 == success, !0 indicates an error 
<br>occurred.
<br></td>
  </tr>
</table>




<p>
  <a name="901210"> </a>
</p>


<h5>
  <a name="881430"> </a>Error Returns
</h5>


<p>
  <a name="881431"> </a>Because different errors can occur on every line of the input <code><em>str</em></code>, <font  face="Arial" size="2">lc_cryptstr()</font> must be able to report all these errors independently, and does so via the <code><em>errors</em></code> parameter. The <code><em>errors</em></code> parameter is used for both errors and warnings. If it's an error, <font  face="Arial" size="2">lc_cryptstr()</font> returns non-zero, and no signatures are generated in <code><em>return_str</em></code>. If there are only warnings, the return value from <font  face="Arial" size="2">lc_cryptstr()</font> is success (0), but <code><em>errors</em></code> is set to a warning message. 
</p>


<p>
  <a name="950027"> </a>Only 7-bit ASCII characters are supported on FEATURE lines, so <font  face="Arial" size="2">lc_cryptstr()</font> reports a warning if an 8-bit character is encountered. To turn off these warnings, OR in the LM_CRYPT_IGNORE_FEATNAME_ERRS <code><em>flag</em></code> option.
</p>


<p>
  <a name="950028"> </a>Here is an example of error reporting:
</p>


<p>
  <a name="881432"> </a>Input:
</p>

<dl>  <dl>
     <dt> <a name="901383"> </a><CODE>FEATURE f1 demo 1.a50 01-jan-2005 uncounted HOSTID=08002b32b161 \</CODE>
    <dl>
       <dt> <a name="909166"> </a><CODE>SIGN=0</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="881434"> </a>Error reported:
</p>

<dl>  <dl>
     <dt> <a name="881435"> </a><CODE>stdin:line 1:Bad version number - must be floating point number,</CODE>
    <dl>
       <dt> <a name="901393"> </a><CODE>with no letters</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="881436"> </a>With this error, no signature is generated and <code><em>return_str</em></code> will be the same as the input <code><em>str</em></code>.
</p>


<h5>
  <a name="881446"> </a>See Also
</h5>

<ul>
  <li><a name="881450"> </a><a href="all.htm#881081">Section 3.4, "lc_check_key()</a>"

  <li><a name="881454"> </a><a href="all.htm#948582">Section 3.8, "lc_convert()</a>"

  <li><a name="881458"> </a><a href="all.htm#903609">Section 3.18, "lc_free_mem()</a>

  <li><a name="909216"> </a><a href="all.htm#881917">Section 3.24, "lc_init()</a>"

  <li><a name="881462"> </a><a href="all.htm#883094">Section 4.16, "LM_A_LICENSE_FMT_VER</a>"

  <li><a name="881463"> </a><code>machind/lmcrypt.c</code>

  <li><a name="909112"> </a><code>machind/makekey.c</code>

  <li><a name="909115"> </a><a href="allApp.htm#921207">Appendix&nbsp;F, "Migrating to the Counterfeit Resistant Option</a>"

</ul>

<h3>
  <a name="909119"> </a>3.10	 lc_err_info()
</h3>


<h5>
  <a name="909120"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881469"> </a><CODE><code><em>err_info</em></code> = lc_err_info(<code><em>job</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881470"> </a>Description
</h5>


<p>
  <a name="881471"> </a>Returns a pointer to a <code>LM_ERR_INFO</code> struct, which contains all necessary information to present an error message to the user. This is the supported method for internationalization and localization of FLEX<em>lm</em> error messages.
</p>


<p>
  <a name="881478"> </a>The format of <code>LM_ERR_INFO</code> is:
</p>


<p>
  <a name="902936"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="902940"> </a><code>(int) </code><code><em>maj_errno
<br></em></code></td>
    <td><a name="902942"> </a>The FLEX<em>lm</em> error number. See 
<br><code>lmerrors.h</code> and <code>lm_lerrs.h</code> in the 
<br><code>machind</code> directory for English versions 
<br>of the error messages.
<br></td>
  </tr>
  <tr>
    <td><a name="902944"> </a><code>(int) </code><code><em>min_errno
<br></em></code></td>
    <td><a name="902946"> </a>The minor error number. This allows a 
<br>support person with access to the 
<br>FLEX<em>lm</em> source code to pinpoint the 
<br>location where the error occurred.
<br></td>
  </tr>
  <tr>
    <td><a name="902948"> </a><code>(int) </code><code><em>sys_errno
<br></em></code></td>
    <td><a name="902950"> </a>The most recent system <code>errno</code> (or 
<br>Winsock error on Windows).
<br></td>
  </tr>
  <tr>
    <td><a name="902952"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="902954"> </a>The name of the feature that the error 
<br>applies to.
<br></td>
  </tr>
  <tr>
    <td><a name="902956"> </a><code>(char **) </code><code><em>lic_files
<br></em></code></td>
    <td><a name="902958"> </a>A null-terminated array of <code>char</code> pointers 
<br>of the license files used when the error 
<br>occurred.
<br></td>
  </tr>
  <tr>
    <td><a name="902960"> </a><code>(char *) </code><code><em>context
<br></em></code></td>
    <td><a name="902962"> </a>This is a string which gives additional 
<br>information about the error. Its contents 
<br>depends on the type of error, but is not 
<br>language dependent. Refer to 
<br><code>machind/lcontext.h</code> for information 
<br>needed for translation.
<br></td>
  </tr>
</table>




<p>
  <a name="902937"> </a>
</p>


<p>
  <a name="881491"> </a>This information allows applications to present error messages in any language and in any desired format. The three items that need to be translated are context and long and short error messages, which all depend on the <code><em>err_info.maj_errno</em></code>. <code><em>err_info.context</em></code> is the English context message, which is also available in <code>machind/lcontext.h</code>. The English error message for <code><em>err_info.maj_errno</em></code> is in <code>machind/lmerrors.h</code> (short) and <code>machind/lm_lerr.h</code> (long). Given an <code><em>err_info.maj_errno</em></code> and a language, there should be a unique context string and unique long and short error messages.
</p>


<h5>
  <a name="881492"> </a>Parameters
</h5>


<p>
  <a name="903035"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903039"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903041"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="903036"> </a>
</p>


<h5>
  <a name="881494"> </a>Return
</h5>


<p>
  <a name="903059"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903056"> </a><code>(LM_ERR_INFO *) </code><code><em>err_info
<br></em></code></td>
    <td><a name="903058"> </a>Pointer to the <code>LM_ERR_INFO</code> struct, 
<br>outlined above.
<br></td>
  </tr>
</table>




<p>
  <a name="903060"> </a>
</p>


<h5>
  <a name="881496"> </a>See Also
</h5>

<ul>
  <li><a name="881500"> </a><a href="all.htm#882046">Section 3.28, "lc_perror()</a>"

  <li><a name="881504"> </a><a href="all.htm#903158">Section 3.12, "lc_errtext()</a>"

</ul>

<h3>
  <a name="881506"> </a>3.11	 lc_errstring()
</h3>


<h5>
  <a name="881507"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881508"> </a><CODE><code><em>string</em></code> = lc_errstring(<code><em>job</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881509"> </a>Description
</h5>


<p>
  <a name="881516"> </a>Returns the FLEX<em>lm</em> error string for the most recent FLEX<em>lm</em> error, along with the major and minor error number. If a UNIX error is involved, the UNIX error description will also be included in the message, along with the UNIX <code>errno</code>. For internationalization of error messages, use <font  face="Arial" size="2">lc_err_info()</font>.
</p>


<p>
  <a name="881529"> </a>This memory is managed by the FLEX<em>lm</em> library. Do not attempt to free it. This string is freed and reset when another FLEX<em>lm</em> error occurs, so it's only valid between FLEX<em>lm</em> calls. Check that the previous FLEX<em>lm</em> call has returned an error before calling <font  face="Arial" size="2">lc_errstring()</font>. 
</p>


<h5>
  <a name="881536"> </a>Parameters
</h5>


<p>
  <a name="903111"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903108"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903110"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="903112"> </a>
</p>


<h5>
  <a name="881538"> </a>Return
</h5>


<p>
  <a name="903124"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903121"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="903123"> </a>The FLEX<em>lm</em> error string text.
<br></td>
  </tr>
</table>




<p>
  <a name="903125"> </a>
</p>


<h5>
  <a name="903149"> </a>Examples
</h5>

<dl>  <dl>
     <dt> <a name="903150"> </a><CODE>No such feature exists (-5,116)</CODE>
     <dt> <a name="903151"> </a><CODE>Cannot find license file, (-1,73:2), No such file or directory</CODE>
  </dl>
</dl>
<h5>
  <a name="903152"> </a>See Also
</h5>

<ul>
  <li><a name="881550"> </a><a href="all.htm#882046">Section 3.28, "lc_perror()</a>"

  <li><a name="881554"> </a><a href="all.htm#903158">Section 3.12, "lc_errtext()</a>"

  <li><a name="947256"> </a><a href="all.htm#909119">Section 3.10, "lc_err_info()</a>"

</ul>

<h3>
  <a name="903158"> </a>3.12	 lc_errtext()
</h3>


<h5>
  <a name="903159"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="903160"> </a><CODE><code><em>string</em></code> = lc_errtext(<code><em>job</em></code>, <code><em>lm_errno</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881560"> </a>Description
</h5>


<p>
  <a name="881564"> </a><font  face="Arial" size="2">lc_errtext()</font> returns the English text string corresponding to the FLEX<em>lm</em> <code><em>lm_errno</em></code>.   Do not attempt to free memory for this string--it's managed by FLEX<em>lm</em>. It's value changes when another FLEX<em>lm</em> error occurs.
</p>


<p>
  <a name="881568"> </a>Normally, <font  face="Arial" size="2">lc_errstring()</font> or <font  face="Arial" size="2">lc_perror()</font> are preferred and recommended, since they contain more information, including the FLEX<em>lm</em> minor error number (used by GLOBEtrotter Software for support when needed) and any system error information, if applicable.
</p>


<h5>
  <a name="881575"> </a>Parameters
</h5>


<p>
  <a name="903186"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903190"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903192"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="903194"> </a><code>(int) </code><code><em>lm_errno
<br></em></code></td>
    <td><a name="903196"> </a>FLEX<em>lm</em> error number.
<br></td>
  </tr>
</table>




<p>
  <a name="903187"> </a>
</p>


<h5>
  <a name="881581"> </a>Return
</h5>


<p>
  <a name="903223"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903227"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="903229"> </a>The FLEX<em>lm</em> error string text.
<br></td>
  </tr>
</table>




<p>
  <a name="903224"> </a>
</p>


<h5>
  <a name="881586"> </a>See Also
</h5>

<ul>
  <li><a name="881590"> </a><a href="all.htm#882046">Section 3.28, "lc_perror()</a>"

  <li><a name="881594"> </a><a href="all.htm#909119">Section 3.10, "lc_err_info()</a>"

</ul>

<h3>
  <a name="881596"> </a>3.13	 lc_expire_days()
</h3>

<dl>  <dl>
     <dt> <a name="881597"> </a><CODE><code><em>days</em></code> = lc_expire_days(<code><em>job</em></code>, <code><em>conf</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881598"> </a>Description
</h5>


<p>
  <a name="881599"> </a>Returns the number of days until a license expires.
</p>


<h5>
  <a name="881600"> </a>Parameters
</h5>


<p>
  <a name="903281"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903271"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903273"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="903275"> </a><code>(CONFIG *) </code><code><em>conf
<br></em></code></td>
    <td><a name="903280"> </a>A FEATURE line from the license file. 
<br>Use <font  face="Arial" size="2">lc_next_conf()</font>, <font  face="Arial" size="2">lc_get_config()</font>, or 
<br><font  face="Arial" size="2">lc_auth_data()</font> to obtain the <code>CONFIG</code> 
<br>pointer.
<br></td>
  </tr>
</table>




<p>
  <a name="903282"> </a>
</p>


<h5>
  <a name="881603"> </a>Return
</h5>


<p>
  <a name="903310"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903304"> </a><code>(int) </code><code><em>days
<br></em></code></td>
    <td><a name="903322"> </a>LM_FOREVER: Unexpiring license.
<br><a name="903323"> </a>&gt; 0: Number of days until expiration.
<br><a name="903324"> </a>==0: The license will expire tonight at midnight.
<br><a name="903328"> </a>&lt; 0: FLEX<em>lm</em> errno.
<br></td>
  </tr>
</table>




<p>
  <a name="903311"> </a>
</p>


<h5>
  <a name="881611"> </a>Error Returns
</h5>


<p>
  <a name="903343"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903346"> </a>LM_BADPARAM
<br></td>
    <td><a name="903348"> </a><code><em>conf</em></code><em> </em>is 0<em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="903350"> </a>LM_LONGGONE
<br></td>
    <td><a name="903352"> </a>The feature has already expired.
<br></td>
  </tr>
</table>




<h3>
  <a name="881617"> </a>3.14	 lc_feat_list()
</h3>


<h5>
  <a name="903375"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="903376"> </a><CODE><code><em>list</em></code> = lc_feat_list(<code><em>job</em></code>, <code><em>flags</em></code>, <code><em>dupaction</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="903377"> </a>Description
</h5>


<p>
  <a name="881621"> </a>Gets the list of all features in the license file.
</p>


<h5>
  <a name="881622"> </a>Parameters
</h5>


<p>
  <a name="903380"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903383"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903385"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="903387"> </a><code>(int) </code><code><em>flags
<br></em></code></td>
    <td><a name="903389"> </a>LM_FLIST_ALL_FILES for all license 
<br>files. If 0, only the first license in the 
<br>license file list is used.
<br></td>
  </tr>
  <tr>
    <td><a name="903391"> </a><code>(void) (*</code><code><em>dupaction</em></code><code>)()
<br></code></td>
    <td><a name="903393"> </a>Action routine called when a duplicate 
<br>feature is found. This routine is called 
<br>upon the second occurrence of any 
<br>feature name. If specified as NULL, no 
<br>call is made.
<br></td>
  </tr>
</table>




<p>
  <a name="903394"> </a>
</p>


<h5>
  <a name="881626"> </a>Return
</h5>


<p>
  <a name="903421"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903425"> </a><code>(char **) </code><code><em>list
<br></em></code></td>
    <td><a name="903427"> </a>List of features.<em> </em><code><em>list</em></code> is a pointer to a 
<br>NULL-terminated array of feature string 
<br>pointers. Both the pointers and the string 
<br>data are malloc'd; this memory is freed 
<br>upon a subsequent call to<em> </em><font  face="Arial" size="2">lc_feat_list()</font><em>. 
<br></em>Do not free this data. If NULL, an error 
<br>has occurred.
<br></td>
  </tr>
</table>




<p>
  <a name="903422"> </a>
</p>


<p>
  <a name="881628"> </a>The <font  face="Arial" size="2">dupaction()</font> callback routine is called with two parameters:
</p>

<dl>  <dl>
     <dt> <a name="881629"> </a><CODE>(*dupaction)(<code><em>feature</em></code>, <code><em>vendor</em></code>)</CODE>
  </dl>
</dl>
<p>
  <a name="881630"> </a>where:
</p>


<p>
  <a name="903438"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903442"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="903444"> </a>Feature name.
<br></td>
  </tr>
  <tr>
    <td><a name="903446"> </a><code>(char *) </code><code><em>vendor
<br></em></code></td>
    <td><a name="903448"> </a>Vendor daemon for <code><em>feature</em></code>.
<br></td>
  </tr>
</table>




<p>
  <a name="903439"> </a>
</p>


<h5>
  <a name="881633"> </a>Error Returns
</h5>


<p>
  <a name="903462"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903466"> </a>LM_CANTMALLOC
<br></td>
    <td><a name="903468"> </a><font  face="Arial" size="2">malloc()</font> call failed.
<br></td>
  </tr>
  <tr>
    <td><a name="903470"> </a>LM_NOFEATURE
<br></td>
    <td><a name="903472"> </a>Specified feature not found.
<br></td>
  </tr>
</table>




<p>
  <a name="903463"> </a>
</p>


<h3>
  <a name="881640"> </a>3.15	 lc_first_job(), lc_next_job()
</h3>


<h5>
  <a name="881641"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881642"> </a><CODE>LM_HANDLE *job</CODE>
     <dt> <a name="881643"> </a><CODE>job = lc_first_job(job);</CODE>
     <dt> <a name="881644"> </a><CODE>while (job)</CODE>
     <dt> <a name="881645"> </a><CODE>{</CODE>
    <dl>
       <dt> <a name="881646"> </a><CODE>/*processing*/</CODE>
       <dt> <a name="881647"> </a><CODE>job = lc_next_job(job);</CODE>
    </dl>
     <dt> <a name="881648"> </a><CODE>}</CODE>
  </dl>
</dl>
<h5>
  <a name="881649"> </a>Description
</h5>


<p>
  <a name="881650"> </a><font  face="Arial" size="2">lc_first_job()</font> and <font  face="Arial" size="2">lc_next_job()</font> are used to walk the list of jobs. This only works properly if all calls to <font  face="Arial" size="2">lc_new_job()</font> have a pointer to the current job as the first parameter.
</p>


<h5>
  <a name="881651"> </a>Parameters
</h5>


<p>
  <a name="903492"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903495"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903497"> </a>Current job.
<br></td>
  </tr>
</table>




<p>
  <a name="903498"> </a>
</p>


<h5>
  <a name="881653"> </a>Return
</h5>


<p>
  <a name="903514"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903511"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903513"> </a>Next currently active job, or 
<br><code>(LM_HANDLE *)0</code> if end.
<br></td>
  </tr>
</table>




<p>
  <a name="903515"> </a>
</p>


<h5>
  <a name="881655"> </a>Error Returns
</h5>


<p>
  <a name="881656"> </a>None.
</p>


<h5>
  <a name="881657"> </a>See Also
</h5>

<ul>
  <li><a name="881661"> </a><a href="all.htm#881697">Section 3.17, "lc_free_job()</a>"

  <li><a name="881665"> </a><a href="all.htm#881958">Section 3.26, "lc_new_job()</a>"

  <li><a name="881669"> </a><a href="all.htm#946935">Section 2.6, "Multiple Jobs</a>"

</ul>

<h3>
  <a name="881671"> </a>3.16	 lc_free_hostid()
</h3>


<h5>
  <a name="881672"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881673"> </a><CODE>(void) lc_free_hostid(<code><em>job</em></code>, <code><em>hostid</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881674"> </a>Description
</h5>


<p>
  <a name="881675"> </a><font  face="Arial" size="2">lc_free_hostid()</font> frees the memory associated with a hostid which has been allocated with <font  face="Arial" size="2">l_new_hostid()</font> or <em></em><font  face="Arial" size="2">lc_copy_hostid()</font>. If passed a hostid list, <font  face="Arial" size="2">lc_free_hostid()</font> frees the whole list.
</p>


<p>
  <a name="881681"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Do not use this function on the return data from <em></em><font  face="Arial" size="2">lc_gethostid()</font> or <font  face="Arial" size="2">lc_getid_type()</font>, because they free their own memory.</FONT><HR WIDTH=75%>


<h5>
  <a name="881683"> </a><font  face="Arial" size="2"></font>Parameters
</h5>


<p>
  <a name="903522"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903526"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903528"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="903530"> </a><code>(HOSTID *) </code><code><em>hostid
<br></em></code></td>
    <td><a name="903532"> </a>From <font  face="Arial" size="2">l_new_hostid()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="903523"> </a>
</p>


<h5>
  <a name="881687"> </a>Return
</h5>


<p>
  <a name="881688"> </a>None.
</p>


<h5>
  <a name="881689"> </a>Error Returns
</h5>


<p>
  <a name="903544"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903548"> </a>LM_BADPARAM
<br></td>
    <td><a name="903550"> </a>No such job.
<br></td>
  </tr>
</table>




<p>
  <a name="903545"> </a>
</p>


<h5>
  <a name="881691"> </a>See Also
</h5>

<ul>
  <li><a name="881695"> </a><a href="allApp.htm#938201">Section E.1.1, "l_new_hostid()</a>"

</ul>

<h3>
  <a name="881697"> </a>3.17	 lc_free_job()
</h3>


<h5>
  <a name="881698"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881699"> </a><CODE>(void) lc_free_job(<code><em>job</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881700"> </a>Description
</h5>


<p>
  <a name="881701"> </a><font  face="Arial" size="2">lc_free_job()</font> frees the memory associated with a job, which has been allocated by <em></em><font  face="Arial" size="2">lc_new_job()</font>. On Windows, this call is mandatory and must be matched to the corresponding <font  face="Arial" size="2">lc_new_job()</font> call. On UNIX, this call is needed only by an application that uses a large number of jobs over its lifetime.
</p>


<h5>
  <a name="881704"> </a><font  face="Arial" size="2"></font>Parameters
</h5>


<p>
  <a name="903569"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903562"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903564"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="903570"> </a>
</p>


<h5>
  <a name="881706"> </a>Return
</h5>


<p>
  <a name="881707"> </a>None.
</p>


<h5>
  <a name="881708"> </a>Error Returns
</h5>


<p>
  <a name="903582"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903579"> </a>LM_BADPARAM
<br></td>
    <td><a name="903581"> </a>No such job.
<br></td>
  </tr>
</table>




<p>
  <a name="903583"> </a>
</p>


<h5>
  <a name="903590"> </a>See Also
</h5>

<ul>
  <li><a name="903594"> </a><a href="all.htm#881917">Section 3.24, "lc_init()</a>"

  <li><a name="903598"> </a><a href="all.htm#881958">Section 3.26, "lc_new_job()</a>"

  <li><a name="903602"> </a><a href="all.htm#882086">Section 3.29, "lc_set_attr()</a>"

  <li><a name="903606"> </a><a href="all.htm#946935">Section 2.6, "Multiple Jobs</a>"

</ul>

<h3>
  <a name="903609"> </a>3.18	 lc_free_mem()
</h3>


<h5>
  <a name="881730"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881731"> </a><CODE>(void) lc_free_mem(<code><em>job</em></code>, <code><em>char_pointer</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881732"> </a>Description
</h5>


<p>
  <a name="881736"> </a><font  face="Arial" size="2">lc_free_mem()</font> frees memory allocated by another FLEX<em>lm</em> function. <font  face="Arial" size="2">lc_free_mem()</font> can be used everywhere, but is currently only needed on Windows.
</p>


<h5>
  <a name="881738"> </a><font  face="Arial" size="2"></font>Parameters
</h5>


<p>
  <a name="903629"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903622"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="903624"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="903626"> </a><code>(char *) </code><code><em>char_pointer
<br></em></code></td>
    <td><a name="903628"> </a>Memory allocated by <font  face="Arial" size="2">lc_cryptstr()</font> or 
<br><font  face="Arial" size="2">lc_convert()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="903630"> </a>
</p>


<h5>
  <a name="881741"> </a>Return
</h5>


<p>
  <a name="881742"> </a>None.
</p>


<h5>
  <a name="881743"> </a>See Also
</h5>

<ul>
  <li><a name="881747"> </a><a href="all.htm#948582">Section 3.8, "lc_convert()</a>"

  <li><a name="881751"> </a><a href="all.htm#881393">Section 3.9, "lc_cryptstr()</a>"

</ul>

<h3>
  <a name="881754"> </a>3.19	 lc_get_attr()
</h3>


<h5>
  <a name="881755"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881756"> </a><CODE>#include "lm_attr.h"</CODE>
     <dt> <a name="881757"> </a><CODE><code><em>status</em></code> = lc_get_attr(<code><em>job</em></code>, <code><em>attr</em></code>, <code><em>value</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881758"> </a>Description
</h5>


<p>
  <a name="881762"> </a>Retrieves a FLEX<em>lm</em> attribute. The key describes which attribute to retrieve, and the value is a pointer to the value for the attribute. See <code>lm_attr.h</code> for key constants and value types.
</p>


<p>
  <a name="881764"> </a>Types of <code>char *</code> are handled a little differently than other types. Types of <code>int</code> or <code>short</code> are declared, and a pointer to the declared variable is passed as an argument. Types of <code>char *</code> are declared as <code>char *</code>, and the variable itself is passed.
</p>


<h5>
  <a name="881765"> </a>Parameters
</h5>


<p>
  <a name="904224"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904231"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="904233"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="904235"> </a><code>(int) </code><code><em>attr</em></code><code> 
<br></code></td>
    <td><a name="904237"> </a>Which attribute to get.
<br></td>
  </tr>
</table>




<p>
  <a name="904228"> </a>
</p>


<h5>
  <a name="881768"> </a>Return
</h5>


<p>
  <a name="904283"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904276"> </a><code>(short *) </code><code><em>value
<br></em></code></td>
    <td><a name="904278"> </a>Value of the attribute. <code><em>value</em></code> must be a 
<br>pointer to the correct attribute type and 
<br>should be cast to a <code>short *</code>. Return 
<br>value is set in <code><em>value</em></code>.
<br></td>
  </tr>
  <tr>
    <td><a name="904280"> </a><code>(int) </code><code><em>status</em></code><code> 
<br></code></td>
    <td><a name="904282"> </a>0--OK, &lt;&gt;0, error.
<br></td>
  </tr>
</table>




<p>
  <a name="904284"> </a>
</p>


<h5>
  <a name="881771"> </a>Error Returns
</h5>


<p>
  <a name="904315"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904322"> </a>LM_NOSUCHATTR
<br></td>
    <td><a name="904324"> </a>No such attribute exists.
<br></td>
  </tr>
  <tr>
    <td><a name="904326"> </a>LM_NOADMINAPI
<br></td>
    <td><a name="904328"> </a>LM_A_VD_GENERIC_INFO or 
<br>LM_A_VD_FEATURE_INFO only--
<br>request was made to other company's 
<br>vendor daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="904330"> </a>LM_NOSERVSUPP
<br></td>
    <td><a name="904332"> </a>LM_A_VD_GENERIC_INFO or 
<br>LM_A_VD_FEATURE_INFO only--
<br>pre-v4.0 server does not support these 
<br>requests.
<br></td>
  </tr>
</table>




<p>
  <a name="904319"> </a>
</p>


<h5>
  <a name="881779"> </a>See Also
</h5>

<ul>
  <li><a name="881783"> </a><a href="all.htm#882086">Section 3.29, "lc_set_attr()</a>"

  <li><a name="881786"> </a><a href="all.htm#911985">Chapter&nbsp;4, "Controlling Licensing Behavior with lc_set_attr()</a>"

</ul>

<h3>
  <a name="881790"> </a>3.20	 lc_get_config()
</h3>


<h5>
  <a name="881791"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881792"> </a><CODE><code><em>conf</em></code> = lc_get_config(<code><em>job</em></code>, <code><em>feature</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881793"> </a>Description
</h5>


<p>
  <a name="881797"> </a>Gets the license file data for a given feature. FLEX<em>lm</em> allows multiple valid FEATURE and INCREMENT lines (of the same feature name) in a license file. <font  face="Arial" size="2">lc_get_config()</font> will return the first <code>CONFIG</code> struct, and <font  face="Arial" size="2">lc_next_conf()</font> retrieves the next (<font  face="Arial" size="2">lc_next_conf()</font> can also find the first). <font  face="Arial" size="2">lc_get_config()</font> does not authenticate feature lines. That is, a user can type in a FEATURE line with an invalid signature, and <font  face="Arial" size="2">lc_get_config()</font> will still return it. For an authenticated FEATURE line, you must first check out the feature, and then use <font  face="Arial" size="2">lc_auth_data()</font>.
</p>


<h5>
  <a name="881798"> </a>Parameters
</h5>


<p>
  <a name="904458"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904451"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="904453"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="904455"> </a><code>(char *) </code><code><em>feature</em></code><code> 
<br></code></td>
    <td><a name="904457"> </a>The desired feature.
<br></td>
  </tr>
</table>




<p>
  <a name="904459"> </a>
</p>


<h5>
  <a name="881801"> </a>Return
</h5>


<p>
  <a name="881802"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904484"> </a><code>(CONFIG *) </code><code><em>conf
<br></em></code></td>
    <td><a name="904486"> </a>The <code>CONFIG</code> struct. If no feature found, 
<br>then NULL. The <code>CONFIG</code> struct is 
<br>defined in the header file <code>lmclient.h</code><code><em>.
<br></em></code></td>
  </tr>
</table>




<p>
  <a name="904481"> </a>
</p>


<h5>
  <a name="881803"> </a>Error Returns
</h5>


<p>
  <a name="904503"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904510"> </a>LM_NOFEATURE
<br></td>
    <td><a name="904512"> </a>Specified feature does not exist.
<br></td>
  </tr>
  <tr>
    <td><a name="904514"> </a>LM_NOCONFFILE
<br></td>
    <td><a name="904516"> </a>License file does not exist.
<br></td>
  </tr>
  <tr>
    <td><a name="904518"> </a>LM_BADFILE
<br></td>
    <td><a name="904520"> </a>License file corrupted.
<br></td>
  </tr>
  <tr>
    <td><a name="904522"> </a>LM_NOREADLIC
<br></td>
    <td><a name="904524"> </a>Cannot read license file.
<br></td>
  </tr>
  <tr>
    <td><a name="904526"> </a>LM_SERVNOREADLIC
<br></td>
    <td><a name="904528"> </a>Cannot read license data from license 
<br>server.
<br></td>
  </tr>
</table>




<p>
  <a name="904507"> </a>
</p>


<h5>
  <a name="881809"> </a>See Also
</h5>

<ul>
  <li><a name="881813"> </a><a href="all.htm#881056">Section 3.3, "lc_auth_data()</a>"

  <li><a name="881817"> </a><a href="all.htm#882023">Section 3.27, "lc_next_conf()</a>"

</ul>

<h3>
  <a name="881820"> </a>3.21	 lc_heartbeat()
</h3>


<h5>
  <a name="881821"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881822"> </a><CODE><code><em>status</em></code> = lc_heartbeat(<code><em>job</em></code>, <code><em>num_reconnects</em></code>, <code><em>num_minutes</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881823"> </a>Description
</h5>


<p>
  <a name="881824"> </a><font  face="Arial" size="2">lc_heartbeat()</font> exchanges heartbeat messages with the license server. By default, heartbeats are sent automatically, using <font  face="Arial" size="2">lc_timer()</font>. To use <font  face="Arial" size="2">lc_heartbeat()</font>, you must call <font  face="Arial" size="2">lc_set_attr(</font><code><em>job</em></code><code>, LM_A_CHECK_INTERVAL, (LM_A_VAL_TYPE)-1</code><font  face="Arial" size="2">)</font> to turn off the automatic <font  face="Arial" size="2">lc_timer()</font>. Heartbeat messages are strongly recommended for security--for the client to ensure that it will re-checkout its licenses from a restarted server, thereby reducing over usage. Heartbeats are not needed for the server to retain a client's license (unless UDP communications is used)--the server retains the license until the client exits. If <font  face="Arial" size="2">lc_heartbeat()</font> is called, the client will automatically reconnect and re-checkout from a server that has restarted. It also informs the application of a number of states that may indicate attempted tampering with the license server.
</p>


<p>
  <a name="881825"> </a>The return value, if non-zero, indicates that the server is down, and how many reconnect attempts have been made. This can be used in many ways, to inform the user the server is down, and possibly to deny use after a specified number of failures.
</p>


<p>
  <a name="881826"> </a>The arguments <code><em>num_reconnects</em></code> and <code><em>num_minutes</em></code> are optional. Their use is recommended where security is particularly important--otherwise they can be safely set to 0, and they will be ignored. If utilized, they can indicate that a server has been stopped and started many times in a few minutes, possibly signifying attempted theft.
</p>


<h5>
  <a name="904661"> </a>Parameters
</h5>


<p>
  <a name="904676"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904695"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="904697"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="904699"> </a><code>(int *) 
<br></code><code><em>num_reconnects</em></code><code>	 
<br></code></td>
    <td><a name="904721"> </a>Pointer to <code>int</code>. If null, this argument is 
<br>ignored. If non-null, and the client has 
<br>just successfully reconnected to the 
<br>server, the return value will be 0 
<br>(success), and <code><em>num_reconnects</em></code> is set 
<br>to the number of times the client has 
<br>reconnected in the last minutes. If this is 
<br>a large number, it may indicate 
<br>attempted theft.
<br></td>
  </tr>
  <tr>
    <td><a name="904703"> </a><code>(int) </code><code><em>num_minutes
<br></em></code></td>
    <td><a name="904748"> </a>If 0, this argument is ignored. If non-
<br>zero, it's used to detect when a server is 
<br>being started and stopped many times in 
<br>a short period, which can indicate 
<br>attempted theft. The reporting period is 
<br>set with <code><em>num_minutes</em></code>.
<br></td>
  </tr>
</table>




<p>
  <a name="904677"> </a>
</p>


<h5>
  <a name="881831"> </a>Return
</h5>


<p>
  <a name="904766"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904773"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="904775"> </a>If non-zero, the license server is 
<br>currently down, and is the number of 
<br>failed attempts to reconnect.
<br></td>
  </tr>
</table>




<p>
  <a name="881833"> </a>
</p>


<h4>
  <a name="948620"> </a>3.21.1	 <strong>How </strong>lc_heartbeat()<strong> Works</strong>
</h4>


<p>
  <a name="881835"> </a><font  face="Arial" size="2">lc_heartbeat()</font> sends a heartbeat to the server. It then reads the response from the previously sent heartbeat. The first heartbeat is sent when the application first connects to the server, usually in <font  face="Arial" size="2">lc_checkout()</font>. In this manner, there is normally no delay in <font  face="Arial" size="2">lc_heartbeat()</font>. 
</p>


<p>
  <a name="881836"> </a>If <font  face="Arial" size="2">lc_heartbeat()</font> is unable to read a response from the server, it attempts to reconnect to the server. If the application has set an LM_A_USER_RECONNECT function, this function will also get called, which is useful if <font  face="Arial" size="2">lc_heartbeat()</font> is registered as a callback (the default). If this reconnect fails, then an internal flag is set and subsequent calls to <font  face="Arial" size="2">lc_heartbeat()</font> will attempt reconnection. These attempts are made for LM_A_RETRY_COUNT times on UNIX (on Windows, the attempt is made forever). If a reconnection occurs before LM_A_RETRY_COUNT attempts, the LM_A_USER_RECONNECT_DONE routine, if specified, will be called. If a reconnection fails to occur after LM_A_RETRY_COUNT attempts, the LM_A_USER_EXITCALL routine, if specified, will be called. If LM_A_USER_EXITCALL is not specified, the application will exit with the error message, "Lost license, cannot reconnect" to stderr.
</p>


<h4>
  <a name="881842"> </a>3.21.2	 <strong>lc_heartbeat(), User TIMEOUT Option, and UDP Timeout</strong>
</h4>


<p>
  <a name="881843"> </a>If <font  face="Arial" size="2">lc_heartbeat()</font> is not called for an extended period, then the application may lose its license. This can happen for two reasons: LM_A_TCP_TIMEOUT has expired or the end user has set a TIMEOUT for this feature in the end-user options file. In both cases, the server has a timeout associated with the license which gets invoked if <font  face="Arial" size="2">lc_heartbeat()</font> is not called within the timeout interval. Make sure that LM_A_TCP_TIMEOUT is large enough to accommodate your usage of <font  face="Arial" size="2">lc_heartbeat()</font>. Similarly, make sure ls_minimum_user_timeout in <code><em></em></code><code>lsvendor.c</code><code><em> </em></code>is large enough so that users will not timeout applications that are in use.
</p>


<p>
  <a name="881849"> </a>If the license is inadvertently released, the next <font  face="Arial" size="2">lc_heartbeat()</font> will automatically re-acquire the license, if there is still a license available.
</p>


<h3>
  <a name="881856"> </a>3.22	 lc_hostid()
</h3>


<h5>
  <a name="881857"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881858"> </a><CODE>char <code><em>buf</em></code>[MAX_CONFIG_LINE];</CODE>
     <dt> <a name="909627"> </a><CODE><code><em>status</em></code> = lc_hostid(<code><em>job</em></code>, <code><em>id_type</em></code>, <code><em>buf</em></code>);</CODE>
  </dl>
</dl>
<h5>
  <a name="881859"> </a>Description
</h5>


<p>
  <a name="881860"> </a>Fills in <code>buf</code> with a hostid string specified by <code><em>id_type</em></code>. If <code><em>id_type</em></code> is HOSTID_DEFAULT, you get the default <code><em>id_type</em></code> on the system.
</p>


<p>
  <a name="881861"> </a>This function allows developers access to hostid information in string format. This function is recommended in the future; avoid functions that deal with <code>HOSTID *</code> struct information, because this struct may change from version to version.
</p>


<p>
  <a name="881862"> </a>Note that <font  face="Arial" size="2">lc_hostid()</font> may return a space-separated list of hostids, if appropriate.
</p>


<h5>
  <a name="881863"> </a>Parameters
</h5>


<p>
  <a name="904957"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904950"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="904952"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="904954"> </a><code>(int) </code><code><em>id_type</em></code><code> 
<br></code></td>
    <td><a name="904956"> </a>Hostid types (HOSTID_<code><em>xxx</em></code>) are 
<br>specified and described in <code>lmclient.h</code>.
<br></td>
  </tr>
</table>




<p>
  <a name="904958"> </a>
</p>


<h5>
  <a name="881866"> </a>Return
</h5>


<p>
  <a name="904984"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="904991"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="904993"> </a>0 if successful, FLEX<em>lm</em> errno 
<br>otherwise.
<br></td>
  </tr>
  <tr>
    <td><a name="904995"> </a><code>(char *) </code><code><em>buf
<br></em></code></td>
    <td><a name="904997"> </a>A pointer to a <code>char</code> array of length 
<br>MAX_CONFIG_LINE. If successful, 
<br>the hostid string is returned here.
<br></td>
  </tr>
</table>




<p>
  <a name="881872"> </a>
</p>


<h5>
  <a name="948640"> </a>Error Returns
</h5>


<p>
  <a name="905038"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="905045"> </a>LM_FUNCNOTAVAIL
<br></td>
    <td><a name="905047"> </a>Vendor keys do not support this 
<br><code><em>id_type</em></code>.
<br></td>
  </tr>
</table>




<p>
  <a name="905042"> </a>
</p>


<h5>
  <a name="881874"> </a>See Also
</h5>

<ul>
  <li><a name="881875"> </a><code>lmclient.h</code> for definition of <code>HOSTID</code> struct

</ul>

<h3>
  <a name="881878"> </a>3.23	 lc_idle()
</h3>


<h5>
  <a name="881879"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881880"> </a><CODE>(void) lc_idle(<code><em>job</em></code>, <code><em>flag</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881881"> </a>Description
</h5>


<p>
  <a name="881885"> </a>Informs FLEX<em>lm</em> when the process is idle. <font  face="Arial" size="2">lc_idle()</font> enables the end user feature inactivity TIMEOUT to allow idle licenses to be reclaimed. Use of <font  face="Arial" size="2">lc_idle()</font> is recommended for end users to take advantage of the TIMEOUT option. <font  face="Arial" size="2">lc_idle()</font> also affects vendor daemon timeout due to LM_A_TCP_TIMEOUT.
</p>


<p>
  <a name="881887"> </a><font  face="Arial" size="2">lc_idle()</font><em> </em>can be used to bracket a portion of the application code that prompts for user input, so that when the user is not using the application, the vendor daemon can detect the fact that the application is idle. <font  face="Arial" size="2">lc_idle()</font> only sets a flag internally in the application; it is therefore safe to call as often as necessary.
</p>


<p>
  <a name="881891"> </a>A typical use would be:
</p>

<dl>  <dl>
     <dt> <a name="881892"> </a><CODE>lc_idle(<code><em>job</em></code>, 1);	 	 /* Process is idle now */</CODE>
     <dt> <a name="881893"> </a><CODE>... get input from user...</CODE>
     <dt> <a name="881894"> </a><CODE>lc_idle(<code><em>job</em></code>, 0);	 /* Process is no longer idle */</CODE>
  </dl>
</dl>
<h5>
  <a name="881895"> </a>Parameters
</h5>


<p>
  <a name="905147"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="905140"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="905142"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="905144"> </a><code>(int) </code><code><em>flag</em></code><code> 
<br></code></td>
    <td><a name="905146"> </a>0 if process is not idle, non-zero if 
<br>process is idle.
<br></td>
  </tr>
</table>




<h5>
  <a name="881897"> </a><strong>Return</strong>
</h5>


<p>
  <a name="881898"> </a>None.
</p>


<h5>
  <a name="881902"> </a>See Also
</h5>

<ul>
  <li><a name="881906"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

  <li><a name="881914"> </a><a href="all.htm#883248">Section 4.24, "LM_A_TCP_TIMEOUT</a>

  <li><a name="947289"> </a><a href="all.htm#884944">Section 9.2.9, "ls_minimum_user_timeout</a>"

</ul>

<h3>
  <a name="881917"> </a>3.24	 lc_init() 
</h3>


<h5>
  <a name="881918"> </a>Syntax
</h5>


<p>
  <a name="881924"> </a>See <font  face="Arial" size="2">lc_cryptstr()</font>.
</p>


<h5>
  <a name="909209"> </a>Description
</h5>


<p>
  <a name="881925"> </a><font  face="Arial" size="2">lc_init()</font> should only be used with license generators and should not normally be used in applications shipped to clients. Use <font  face="Arial" size="2">lc_new_job()</font> instead, because it offers enhanced security.
</p>


<h5>
  <a name="881931"> </a>See Also
</h5>

<ul>
  <li><a name="881935"> </a><a href="all.htm#881393">Section 3.9, "lc_cryptstr()</a>"

  <li><a name="948675"> </a><a href="all.htm#881958">Section 3.26, "lc_new_job()</a>"

</ul>

<h3>
  <a name="881937"> </a>3.25	 lc_log()
</h3>


<h5>
  <a name="881938"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881939"> </a><CODE>(void) lc_log(<code><em>job</em></code>, <code><em>msg</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881940"> </a>Description
</h5>


<p>
  <a name="881941"> </a>Logs a message in the debug log file, if the license is served by <code>lmgrd</code>. 
</p>


<h5>
  <a name="881942"> </a>Parameters
</h5>


<p>
  <a name="905378"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="905371"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="905373"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="905375"> </a><code>(char *) </code><code><em>msg</em></code><code> 
<br></code></td>
    <td><a name="905377"> </a>The message to be logged. The 
<br>maximum length of the string is 
<br>LM_LOG_MAX_LEN.
<br></td>
  </tr>
</table>




<p>
  <a name="905379"> </a>
</p>


<h5>
  <a name="881946"> </a>Return
</h5>


<p>
  <a name="881947"> </a>None.
</p>


<h5>
  <a name="881948"> </a>Error Returns
</h5>


<p>
  <a name="905422"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="905425"> </a>LM_NOSOCKET
<br></td>
    <td><a name="905427"> </a>Communications failure to daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="905429"> </a>LM_CANTWRITE
<br></td>
    <td><a name="905431"> </a>Write error sending message to daemon.
<br></td>
  </tr>
</table>




<p>
  <a name="905435"> </a>
</p>


<h5>
  <a name="881951"> </a>See Also
</h5>

<ul>
  <li><a name="881955"> </a><a href="all.htm#890494">Chapter&nbsp;7, "Distributing and Locating the License File</a>"

</ul>

<h3>
  <a name="881958"> </a>3.26	 lc_new_job()
</h3>


<h5>
  <a name="881959"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881960"> </a><CODE>VENDORCODE code;</CODE>
     <dt> <a name="881961"> </a><CODE>LM_HANDLE *job = (LM_HANDLE *)NULL;</CODE>
     <dt> <a name="881962"> </a><CODE><code><em>status</em></code> = lc_new_job(<code><em>prevjob</em></code>, lc_new_job_arg2, &amp;code, &amp;job);</CODE>
  </dl>
</dl>
<h5>
  <a name="881963"> </a>Description
</h5>


<p>
  <a name="881964"> </a><font  face="Arial" size="2">lc_new_job()</font> should not be used with license generators (like <code>lmcrypt</code> and <code>makekey</code>). Use <font  face="Arial" size="2">lc_init()</font> instead.
</p>


<p>
  <a name="881967"> </a>All applications that call <font  face="Arial" size="2">lc_new_job()</font> must link <code>lm_new.o</code> (<code>lm_new.obj</code> on Windows) into their application. If the application fails to link with an error about <code>l_n36_buf</code>, it means that you need to link in <code>lm_new.o</code> (<code>lm_new.obj</code>).
</p>


<p>
  <a name="881973"> </a><font  face="Arial" size="2">lc_new_job()</font> initializes FLEX<em>lm</em> and creates a license job. Subsequent calls to <font  face="Arial" size="2">lc_new_job()</font> create new license jobs. Each license job is independent.
</p>


<p>
  <a name="881977"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 <font  face="Arial" size="2">lc_new_job()</font> MUST be the first FLEX<em>lm</em> call you make in your application. Do NOT call <font  face="Arial" size="2">lc_set_attr()</font> or <font  face="Arial" size="2">lc_get_attr()</font> before calling <font  face="Arial" size="2">lc_new_job()</font>.</FONT><HR WIDTH=75%>


<h5>
  <a name="881978"> </a>Parameters
</h5>


<p>
  <a name="905556"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="905563"> </a><code>(LM_HANDLE *) </code><code><em>prevjob
<br></em></code></td>
    <td><a name="905565"> </a>Must be NULL on first call to 
<br><font  face="Arial" size="2">lc_new_job()</font>. On subsequent calls, use 
<br>any existing job previously initialized 
<br>with <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="950231"> </a><code>lc_new_job_arg2
<br></code></td>
    <td><a name="950233"> </a>This second parameter is required for 
<br>enhanced security for a DLL. This 
<br>parameter is also safe for non-DLL 
<br>code. 
<br></td>
  </tr>
</table>




<p>
  <a name="905580"> </a>
</p>


<h5>
  <a name="881982"> </a>Return
</h5>


<p>
  <a name="905672"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="909705"> </a><code>pointer to<br>
<br>(VENDORCODE) </code><code><em>code
<br></em></code></td>
    <td><a name="909707"> </a>Pointer to <code>VENDORCODE</code> struct. 
<br>Initialized in this call and used later as 
<br>argument to<em> </em><font  face="Arial" size="2">lc_checkout()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="909709"> </a><code>pointer to <br>
<br>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="909711"> </a>Set to job for the current process. This is 
<br>used as the first argument to all 
<br>subsequent <font  face="Arial" size="2">lc_</font><em>xxx</em><font  face="Arial" size="2">()</font> functions.
<br></td>
  </tr>
  <tr>
    <td><a name="905679"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="905681"> </a>Value of <font  face="Arial" size="2">lc_get_errno()</font> after 
<br>initialization is complete, 0 if successful.
<br></td>
  </tr>
</table>




<p>
  <a name="905676"> </a>
</p>


<h5>
  <a name="881985"> </a>Error Returns
</h5>


<p>
  <a name="905704"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="905711"> </a>LM_BAD_TZ
<br></td>
    <td><a name="905713"> </a>Time zone offset from GMT is &gt; 24 
<br>hours (may imply a user is attempting to 
<br>bypass an expiration date).
<br></td>
  </tr>
  <tr>
    <td><a name="905715"> </a>LM_BADPLATFORM
<br></td>
    <td><a name="905717"> </a>Vendor keys do not support this 
<br>platform.
<br></td>
  </tr>
  <tr>
    <td><a name="905719"> </a>LM_BADKEYDATA
<br></td>
    <td><a name="905721"> </a>Bad vendor keys.
<br></td>
  </tr>
  <tr>
    <td><a name="905723"> </a>LM_BADVENDORDATA
<br></td>
    <td><a name="905725"> </a>Unknown vendor key type.
<br></td>
  </tr>
  <tr>
    <td><a name="905727"> </a>LM_CANTMALLOC
<br></td>
    <td><a name="905729"> </a><font  face="Arial" size="2">malloc()</font> call failed.
<br></td>
  </tr>
  <tr>
    <td><a name="905731"> </a>LM_DEFAULT_SEEDS
<br></td>
    <td><a name="905733"> </a>Encryption seeds were left to default 
<br>values, but the vendor daemon name is 
<br>not <code>demo</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="905735"> </a>LM_EXPIRED_KEYS
<br></td>
    <td><a name="905737"> </a>Vendor keys have expired.
<br></td>
  </tr>
  <tr>
    <td><a name="905739"> </a>LM_NOKEYDATA
<br></td>
    <td><a name="905741"> </a>Vendor key data not supplied.
<br></td>
  </tr>
  <tr>
    <td><a name="905743"> </a>LM_LIBRARYMISMATCH
<br></td>
    <td><a name="905745"> </a><code>lmclient.h/liblmgr.a</code> version 
<br>mismatch.
<br></td>
  </tr>
  <tr>
    <td><a name="905747"> </a>LM_NONETWORK
<br></td>
    <td><a name="905749"> </a>Networking software not available on 
<br>this machine.
<br></td>
  </tr>
  <tr>
    <td><a name="905751"> </a>LM_OLDVENDORDATA
<br></td>
    <td><a name="905753"> </a>Old vendor keys supplied.
<br></td>
  </tr>
</table>




<p>
  <a name="882008"> </a>
</p>


<h5>
  <a name="950246"> </a>See Also
</h5>

<ul>
  <li><a name="882012"> </a><a href="all.htm#881917">Section 3.24, "lc_init()</a>"

  <li><a name="882016"> </a><a href="all.htm#881697">Section 3.17, "lc_free_job()</a>"

  <li><a name="882020"> </a><a href="all.htm#946935">Section 2.6, "Multiple Jobs</a>"

</ul>

<h3>
  <a name="882023"> </a>3.27	 lc_next_conf()
</h3>


<h5>
  <a name="882024"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="882025"> </a><CODE>CONFIG *pos = 0;</CODE>
     <dt> <a name="909733"> </a><CODE><code><em>conf</em></code> = lc_next_conf(<code><em>job</em></code>, <code><em>feature</em></code>, &amp;pos);</CODE>
  </dl>
</dl>
<h5>
  <a name="882026"> </a>Description
</h5>


<p>
  <a name="882027"> </a>Returns the next line in the license file matching <code><em>feature</em></code>. The search is started from <code><em>pos</em></code>. <font  face="Arial" size="2">lc_next_conf()</font> does not authenticate FEATURE lines. That is, a user can type in a FEATURE line with an invalid signature, and <font  face="Arial" size="2">lc_next_conf()</font> will still return it. For an authenticated feature line, you must first check out the feature, and then use <font  face="Arial" size="2">lc_auth_data()</font>.
</p>


<h5>
  <a name="882028"> </a>Parameters
</h5>


<p>
  <a name="905935"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="905942"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="905944"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="905946"> </a><code>(char *) </code><code><em>feature</em></code><code> 
<br></code></td>
    <td><a name="905948"> </a>The desired feature line.
<br></td>
  </tr>
</table>




<p>
  <a name="905939"> </a>
</p>


<h5>
  <a name="882032"> </a>Return
</h5>


<p>
  <a name="905996"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906003"> </a><code>(CONFIG *) </code><code><em>conf
<br></em></code></td>
    <td><a name="906005"> </a>The <code>CONFIG</code> struct. If none found, then 
<br>NULL.
<br></td>
  </tr>
  <tr>
    <td><a name="906007"> </a><code>pointer to <br>
<br>(CONFIG *) </code><code><em>pos
<br></em></code></td>
    <td><a name="906009"> </a>Declare <code>CONFIG *pos = 0</code>; use <code>&amp;pos</code> 
<br>for argument. Updated to next license 
<br>file entry.
<br></td>
  </tr>
</table>




<p>
  <a name="882035"> </a>
</p>


<h5>
  <a name="950250"> </a>Error Returns
</h5>


<p>
  <a name="882036"> </a>See error returns for <font  face="Arial" size="2">lc_get_config()</font>.
</p>


<h5>
  <a name="882037"> </a>Example
</h5>

<dl>  <dl>
     <dt> <a name="882038"> </a><CODE>CONFIG *pos = 0, *conf;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (conf = lc_next_conf(job, "myfeature", &amp;pos))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* ... */</CODE>
  </dl>
</dl>
<h5>
  <a name="882039"> </a>See Also
</h5>

<ul>
  <li><a name="882043"> </a><a href="all.htm#881056">Section 3.3, "lc_auth_data()</a>"

</ul>

<h3>
  <a name="882046"> </a>3.28	 lc_perror()
</h3>


<h5>
  <a name="882047"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="882048"> </a><CODE>(void) lc_perror(<code><em>job</em></code>, <code><em>string</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="882049"> </a>Description
</h5>


<p>
  <a name="882056"> </a>Prints a FLEX<em>lm</em> error message, in the same format as the UNIX routine <font  face="Arial" size="2">perror()</font>, e.g.:
</p>

<dl>  <dl>
     <dt> <a name="882057"> </a><CODE>"string": FLEXlm error-string</CODE>
  </dl>
</dl>
<p>
  <a name="882058"> </a>If a system error has also occurred, it will be included in the message.
</p>


<p>
  <a name="882066"> </a>On Windows systems, a message box of type MB_OK will be displayed with the FLEX<em>lm</em> error message. The FLEX<em>lm</em> error messages are available by calling <font  face="Arial" size="2">lc_errstring()</font>.
</p>


<h5>
  <a name="882074"> </a>Parameters
</h5>


<p>
  <a name="906127"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906119"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="906121"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="906123"> </a><code>(char *) </code><code><em>string</em></code><code> 
<br></code></td>
    <td><a name="906125"> </a>The first part of the error message, as 
<br>above.
<br></td>
  </tr>
</table>




<p>
  <a name="882077"> </a>
</p>


<h5>
  <a name="948656"> </a>Return
</h5>


<p>
  <a name="882078"> </a>None.
</p>


<h5>
  <a name="882079"> </a>See Also
</h5>

<ul>
  <li><a name="882083"> </a><a href="all.htm#909119">Section 3.10, "lc_err_info()</a>"

  <li><a name="947290"> </a><a href="all.htm#881506">Section 3.11, "lc_errstring()</a>"

  <li><a name="951563"> </a><a href="all.htm#883142">Section 4.18, "LM_A_LONG_ERRMSG</a>"

</ul>

<h3>
  <a name="882086"> </a>3.29	 lc_set_attr()
</h3>


<h5>
  <a name="882087"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="882088"> </a><CODE>#include "lm_attr.h"</CODE>
     <dt> <a name="882089"> </a><CODE><code><em>status</em></code> = lc_set_attr(<code><em>job</em></code>, <code><em>attr</em></code>, (LM_A_VAL_TYPE)<code><em>value</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="909812"> </a>Description
</h5>


<p>
  <a name="909816"> </a>Sets a FLEX<em>lm</em> attribute. The <code><em>attr</em></code> describes which attribute to set, and the value is the value for the attribute. See the header file <code>lm_attr.h</code> for <code><em>attr</em></code> constants and value types. 
</p>


<h5>
  <a name="882095"> </a>Parameters
</h5>


<p>
  <a name="906192"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906185"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="906187"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="906189"> </a><code>(int) </code><code><em>attr</em></code><code> 
<br></code></td>
    <td><a name="906191"> </a>Which attribute to set.
<br></td>
  </tr>
  <tr>
    <td><a name="906218"> </a><code>(LM_A_VAL_TYPE) </code><code><em>value
<br></em></code></td>
    <td><a name="906220"> </a>Value to set it to. Values should be of the 
<br>appropriate type for the particular 
<br>attribute (see <code>lm_attr.h</code>), but should 
<br>be cast to <code>LM_A_VAL_TYPE</code>.
<br></td>
  </tr>
</table>




<p>
  <a name="906193"> </a>
</p>


<h5>
  <a name="882101"> </a>Return
</h5>


<p>
  <a name="906253"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906260"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="906262"> </a> 0--OK, !=0, error.
<br></td>
  </tr>
</table>




<p>
  <a name="882103"> </a>
</p>


<h5>
  <a name="948709"> </a>Error Returns
</h5>


<p>
  <a name="906282"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906289"> </a>LM_FUNCNOTAVAIL
<br></td>
    <td><a name="906291"> </a>Vendor keys do not support this 
<br>function.
<br></td>
  </tr>
  <tr>
    <td><a name="906293"> </a>LM_BADPARAM
<br></td>
    <td><a name="906295"> </a>Specified parameter is incorrect.
<br></td>
  </tr>
  <tr>
    <td><a name="906297"> </a>LM_NOCONFFILE
<br></td>
    <td><a name="906299"> </a>Specified license file cannot be found 
<br>(LM_A_LICENSE_FILE or 
<br>LM_A_LICENSE_FILE_PTR).
<br></td>
  </tr>
  <tr>
    <td><a name="906301"> </a>LM_NOSUCHATTR
<br></td>
    <td><a name="906303"> </a>Specified attribute does not exist.
<br></td>
  </tr>
</table>




<p>
  <a name="950254"> </a>
</p>


<h5>
  <a name="882109"> </a>See Also
</h5>

<ul>
  <li><a name="882112"> </a><a href="all.htm#911985">Chapter&nbsp;4, "Controlling Licensing Behavior with lc_set_attr()</a>"

</ul>

<h3>
  <a name="882115"> </a>3.30	 lc_set_registry()
</h3>


<h5>
  <a name="923196"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="923200"> </a><CODE>(void) lc_set_registry(<code><em>job</em></code>, <code><em>env_var</em></code>, <code><em>value</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="923217"> </a>Description
</h5>


<p>
  <a name="923287"> </a>Used on Windows to facilitate setting an environment variable. This call allows you to write into the registry (assuming your program has the appropriate security attributes). 
</p>


<p>
  <a name="923272"> </a>
</p>


<h5>
  <a name="923227"> </a>Parameters
</h5>


<p>
  <a name="923237"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="923230"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="923232"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="923234"> </a><code>(char *) </code><code><em>env_var</em></code><code> 
<br></code></td>
    <td><a name="923236"> </a>The environment variable name.
<br></td>
  </tr>
  <tr>
    <td><a name="923254"> </a><code>(char *) </code><code><em>value
<br></em></code></td>
    <td><a name="923256"> </a>Value of the environment variable.
<br></td>
  </tr>
</table>




<p>
  <a name="923238"> </a>
</p>


<h5>
  <a name="923239"> </a>Return
</h5>


<p>
  <a name="923248"> </a>None.
</p>


<h5>
  <a name="923298"> </a>Error Returns
</h5>


<p>
  <a name="923308"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="923301"> </a>LM_NOADMINAPI
<br></td>
    <td><a name="923303"> </a>Request was made to other company's 
<br>vendor daemon.
<br></td>
  </tr>
</table>




<p>
  <a name="923309"> </a>
</p>


<h3>
  <a name="923195"> </a>3.31	 lc_status()
</h3>


<h5>
  <a name="882116"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="882117"> </a><CODE><code><em>status</em></code> = lc_status(<code><em>job</em></code>, <code><em>feature</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="882118"> </a>Description
</h5>


<p>
  <a name="882119"> </a>Returns the status of the requested feature.
</p>


<p>
  <a name="882120"> </a>This call is used only when QUEUEing for a license. Normally QUEUEing is done in the following manner:
</p>

<dl>  <dl>
     <dt> <a name="882122"> </a><CODE>status = lc_checkout(....LM_CO_NOWAIT,...);</CODE>
     <dt> <a name="882123"> </a><CODE>if (status == LM_MAXUSERS || status == LM_USERSQUEUED)</CODE>
     <dt> <a name="882124"> </a><CODE>{</CODE>
    <dl>
       <dt> <a name="882125"> </a><CODE>printf("Waiting for license...");</CODE>
       <dt> <a name="882127"> </a><CODE>status = lc_checkout(....LM_CO_WAIT,...);</CODE>
    </dl>
     <dt> <a name="882128"> </a><CODE>}</CODE>
  </dl>
</dl>
<p>
  <a name="882129"> </a>However, in the above example, the application must wait in the <font  face="Arial" size="2">lc_checkout()</font> call. If the application needs to continue doing processing, use LM_CO_QUEUE in an <font  face="Arial" size="2">lc_checkout()</font> call and call <font  face="Arial" size="2">lc_status()</font> immediately after <font  face="Arial" size="2">lc_checkout()</font> and any other <font  face="Arial" size="2">lc_</font><em>xxx</em><font  face="Arial" size="2">()</font> calls until the license is granted or denied. This might be coded in the following manner:
</p>

<dl>  <dl>
     <dt> <a name="882131"> </a><CODE>status = lc_checkout(...,LM_CO_QUEUE,...)</CODE>
     <dt> <a name="906406"> </a><CODE>switch (status) </CODE>
     <dt> <a name="906407"> </a><CODE>{</CODE>
     <dt> <a name="906408"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:</CODE>
     <dt> <a name="906409"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; /* got the license */</CODE>
     <dt> <a name="906410"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case LM_MAXUSERS:</CODE>
     <dt> <a name="906429"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case LM_USERSQUEUED:</CODE>
     <dt> <a name="906431"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case LM_FEATQUEUE:</CODE>
     <dt> <a name="906432"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Waiting for license...");</CODE>
     <dt> <a name="906414"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (lc_status(job, feature)</CODE>
     <dt> <a name="906415"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="906416"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* processing */</CODE>
     <dt> <a name="906417"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="906418"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; /* got the license */</CODE>
     <dt> <a name="906419"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:</CODE>
     <dt> <a name="906420"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror("Checkout for license failed");</CODE>
     <dt> <a name="906421"> </a><CODE>}</CODE>
     <dt> <a name="952275"> </a><CODE></CODE>
  </dl>
</dl>
<h5>
  <a name="882134"> </a>Parameters
</h5>


<p>
  <a name="906449"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906442"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="906444"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="906446"> </a><code>(char *) </code><code><em>feature</em></code><code> 
<br></code></td>
    <td><a name="906448"> </a>The feature name.
<br></td>
  </tr>
</table>




<p>
  <a name="906450"> </a>
</p>


<h5>
  <a name="882137"> </a>Return
</h5>


<p>
  <a name="906464"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906471"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="906473"> </a>Status of this feature (in this process): 
<br><a name="906502"> </a>&lt; 0 -- error;
<br><a name="906503"> </a>0 -- feature is checked out by this 
<br>process.
<br></td>
  </tr>
</table>




<p>
  <a name="882139"> </a>
</p>


<h5>
  <a name="923222"> </a>Error Returns
</h5>


<p>
  <a name="906533"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906512"> </a>LM_CANTCONNECT
<br></td>
    <td><a name="906514"> </a>Feature was checked out, but lost 
<br>connection to the daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="906516"> </a>LM_FEATQUEUE
<br></td>
    <td><a name="906518"> </a>This process is in the queue for this 
<br>feature.
<br></td>
  </tr>
  <tr>
    <td><a name="906520"> </a>LM_NEVERCHECKOUT
<br></td>
    <td><a name="906522"> </a>Feature was never checked out by this 
<br>process, or was checked back in after a 
<br>checkout.
<br></td>
  </tr>
</table>




<p>
  <a name="906526"> </a>
</p>


<h5>
  <a name="882145"> </a>See Also
</h5>

<ul>
  <li><a name="882149"> </a><a href="all.htm#881152">Section 3.6, "lc_checkout()</a>"

</ul>

<h3>
  <a name="882152"> </a>3.32	 lc_userlist()
</h3>


<h5>
  <a name="882153"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="882154"> </a><CODE>LM_USERS *users;</CODE>
     <dt> <a name="882155"> </a><CODE><code><em>users</em></code> = lc_userlist(<code><em>job</em></code>, <code><em>feature</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="882156"> </a>Description
</h5>


<p>
  <a name="882157"> </a>Provides a list of who is using the feature, including information about the users of the license. This output is used by <code><em></em></code><code>lmstat</code>. See the <em>FLEXlm End Users Guide</em> for the behavior of <code>lmstat</code>. 
</p>


<h5>
  <a name="882159"> </a>Parameters
</h5>


<p>
  <a name="906619"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906612"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="906614"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="906616"> </a><code>(char *) </code><code><em>feature</em></code><code> 
<br></code></td>
    <td><a name="906618"> </a>The feature name.
<br></td>
  </tr>
</table>




<p>
  <a name="906620"> </a>
</p>


<p>
  <a name="882162"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 <font  face="Arial" size="2">lc_userlist()</font> is a potentially expensive call (it may cause a lot of network traffic), depending on the number of users of <code><em>feature</em></code>. Therefore this call must be used with caution. In particular, it is a good idea to call <font  face="Arial" size="2">lc_userlist()</font> when a checkout fails with LM_MAXUSERS/LM_USERSQUEUED error, to inform who is using the feature. However, do <em>not</em> call <font  face="Arial" size="2">lc_userlist()</font> before every checkout call, because this will be guaranteed to cause network load problems when a large number of licenses are checked out.</FONT><HR WIDTH=75%>


<h5>
  <a name="882163"> </a>Return 
</h5>


<p>
  <a name="882164"> </a>If successful, <font  face="Arial" size="2">lc_userlist()</font> returns a pointer to a linked list of structures, one for each user of the license. This data should not be modified by the caller. It will be freed on the next call to <font  face="Arial" size="2">lc_userlist()</font>. 
</p>


<p>
  <a name="882165"> </a>See <code>lmclient.h</code> for a description of the <code>LM_USERS</code> struct.
</p>


<p>
  <a name="882166"> </a>The list of users returned by <font  face="Arial" size="2">lc_userlist()</font> includes a special record, indicated by an empty user name (<code>name[0]==0</code>), which contains the total number of licenses supported by the daemon for the specified feature (in the <code>nlic</code> field), and the daemon's idea of the current time (in the <code>time</code> field). 
</p>


<p>
  <a name="882167"> </a>If there is an error, <font  face="Arial" size="2">lc_userlist()</font> returns NULL and sets the job error status. 
</p>


<p>
  <a name="882168"> </a><font  face="Arial" size="2">lc_userlist()</font><em> </em>returns only information about users the server knows about, therefore it will not return any information about users of node-locked uncounted or DEMO licenses, unless the server's license file includes the node-locked licenses and the client is not reading the license file (via <code>@</code><code><em>host</em></code>, <code><em>port</em></code><code>@</code><code><em>host</em></code> or USE_SERVER). Queued users and licenses shared due to duplicate grouping are also not returned by <font  face="Arial" size="2">lc_userlist()</font>. 
</p>


<p>
  <a name="882170"> </a>Reserved licenses are indicated by the <em></em><font  face="Arial" size="2">lm_isres()</font> macro (defined in <code>lmclient.h</code>). In this case, the <code>name</code> contains the entity that the reservation is for.
</p>


<h5>
  <a name="882171"> </a>Error Returns
</h5>


<p>
  <a name="906758"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906765"> </a>LM_BADCOMM
<br></td>
    <td><a name="906767"> </a>Communications error with license 
<br>server.
<br></td>
  </tr>
  <tr>
    <td><a name="906769"> </a>LM_CANTMALLOC
<br></td>
    <td><a name="906771"> </a><font  face="Arial" size="2">malloc()</font> call failed.
<br></td>
  </tr>
  <tr>
    <td><a name="906773"> </a>LM_FUNCNOTAVAIL
<br></td>
    <td><a name="906775"> </a>Vendor keys do not support this 
<br>function.
<br></td>
  </tr>
  <tr>
    <td><a name="906777"> </a>LM_NOFEATURE
<br></td>
    <td><a name="906779"> </a>Specified feature cannot be found.
<br></td>
  </tr>
</table>




<p>
  <a name="906762"> </a>
</p>


<h5>
  <a name="906808"> </a>See Also
</h5>

<ul>
  <li><a name="882177"> </a><code>lmclient.h</code> for <code>LM_USER</code> structure definition.

</ul>

<h3>
  <a name="882180"> </a>3.33	 lc_vsend()
</h3>


<h5>
  <a name="882181"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="882182"> </a><CODE><code><em>rcv_str</em></code> = lc_vsend(<code><em>job</em></code>, <code><em>send_str</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="882183"> </a>Description
</h5>


<p>
  <a name="882184"> </a>Sends a message to the vendor daemon and returns a result string. If the client is not already connected to a server, this function will connect to the first server in the first license file in its list. The string can be up to 140 bytes.
</p>


<p>
  <a name="882185"> </a>You must set up a processing routine in your vendor daemon to receive the message from <font  face="Arial" size="2">lc_vsend()</font> and send the reply. This routine is specified in <code>lsvendor.c</code><code><em> </em></code>in the variable ls_vendor_msg.
</p>


<h5>
  <a name="882188"> </a>Parameters
</h5>


<p>
  <a name="906886"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906879"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="906881"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="906883"> </a><code>(char *) </code><code><em>send_str</em></code><code> 
<br></code></td>
    <td><a name="906885"> </a>String to be send to your vendor 
<br>daemon.
<br></td>
  </tr>
</table>




<p>
  <a name="906887"> </a>
</p>


<h5>
  <a name="882191"> </a>Return
</h5>


<p>
  <a name="906904"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906907"> </a><code>(char *) </code><code><em>rcv_str
<br></em></code></td>
    <td><a name="906909"> </a>String returned by <font  face="Arial" size="2">ls_vendor_msg()</font> in 
<br>your vendor daemon; 0 if unsuccessful.
<br></td>
  </tr>
</table>




<h5>
  <a name="882194"> </a>Error Returns
</h5>


<p>
  <a name="906945"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906952"> </a>LM_BADCOMM
<br></td>
    <td><a name="906954"> </a>Communications problem with the 
<br>vendor daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="906956"> </a>LM_CANTREAD
<br></td>
    <td><a name="906958"> </a>Cannot read data from license server.
<br></td>
  </tr>
  <tr>
    <td><a name="906964"> </a>LM_NOSERVSUPP
<br></td>
    <td><a name="906966"> </a>Your vendor daemon does not support 
<br>this function.
<br></td>
  </tr>
</table>




<p>
  <a name="906949"> </a>
</p>


<h5>
  <a name="882200"> </a>See Also
</h5>

<ul>
  <li><a name="882204"> </a><a href="all.htm#885007">Section 9.2.16, "ls_vendor_msg</a>"

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="911985"> </a>Chapter 4 <br>Controlling Licensing Behavior with lc_set_attr()
</h2>
<hr>


<p>
  <a name="882830"> </a>The FLEXible API allows you to control the licensing behavior of your application with a set of <em>attributes</em>. FLEX<em>lm</em> attributes allow you control over licensing policy, internal operations of FLEX<em>lm</em> (e.g., use of timers, etc), and control of the licensing parameters of your process (e.g., define how FLEX<em>lm</em> will define "username," "hostname," and "display name," etc. for managed license distribution).
</p>


<p>
  <a name="882845"> </a>To set FLEX<em>lm</em> attributes, use the <font  face="Arial" size="2">lc_set_attr()</font> call, described in <a href="all.htm#882086">Section 3.29, "lc_set_attr()</a>."
</p>


<p>
  <a name="882847"> </a>Essential FLEXible API attributes which should be set by every FLEXible API application, are:
</p>

<ul>
  <li><a name="882848"> </a>License file location:

  <dl>
     <dt> <a name="882849"> </a>LM_A_LICENSE_DEFAULT
  </dl>
  <li><a name="882850"> </a>Heartbeat security policy:

  <dl>
     <dt> <a name="882851"> </a>LM_A_CHECK_INTERVAL
     <dt> <a name="882852"> </a>LM_A_RETRY_INTERVAL
     <dt> <a name="882853"> </a>LM_A_USER_RECONNECT
     <dt> <a name="882854"> </a>LM_A_USER_RECONNECT_DONE
     <dt> <a name="882855"> </a>LM_A_USER_EXITCALL
  </dl>
  <li><a name="882856"> </a>Performance:

  <dl>
     <dt> <a name="882857"> </a>LM_A_RETRY_CHECKOUT
  </dl>
</ul>

<p>
  <a name="882858"> </a>The following attributes are often useful:
</p>

<ul>
  <li><a name="882859"> </a>Vendor-defined Hostid:

  <dl>
     <dt> <a name="882860"> </a>LM_A_VENDOR_ID_DECLARE
     <dt> <a name="882861"> </a>LM_A_VENDOR_GETHOSTID
  </dl>
  <li><a name="882862"> </a>Customized checkout:

  <dl>
     <dt> <a name="882863"> </a>LM_A_CHECKOUTFILTER
     <dt> <a name="882864"> </a>LM_A_CHECKOUT_DATA
  </dl>
  <li><a name="882865"> </a>Information useful for error, or informational, reporting:

  <dl>
     <dt> <a name="882866"> </a>LM_A_LF_LIST
     <dt> <a name="882867"> </a>LM_A_VD_GENERIC_INFO
     <dt> <a name="882868"> </a>LM_A_VD_FEATURE_INFO
  </dl>
  <li><a name="882869"> </a>Disabling SIGALRM, for applications such as applications that use FORTRAN and XView, that cannot tolerate any use of SIGALRM:

  <dl>
     <dt> <a name="882870"> </a>LM_A_SETITIMER
     <dt> <a name="882871"> </a>LM_A_SIGNAL
  </dl>
</ul>

<p>
  <a name="882874"> </a>The other attributes are rarely needed, and are listed in <a href="allApp.htm#886924">Appendix&nbsp;E, "Rarely Used Functions and Attributes</a>."
</p>


<p>
  <a name="882876"> </a>The attributes are changed with <font  face="Arial" size="2">lc_set_attr()</font><em> </em>and queried with<em> </em><font  face="Arial" size="2">lc_get_attr()</font>.<em> </em>The section heading is the attribute name. The first line of each section is the data type of the attribute. All attribute definitions are in <code>lm_attr.h</code><code><em>.</em></code> 
</p>


<p>
  <a name="882877"> </a>When using these attributes with <font  face="Arial" size="2">lc_set_attr()</font>, the argument must be of the correct type (each item below lists its associated type), and must then be cast to <code>LM_A_VAL_TYPE</code>. When using them with <font  face="Arial" size="2">lc_get_attr()</font>, the pointer argument should point to a value of the correct type (noting that <code>short</code> and <code>int</code> are different in this case), and must be cast to a <code>short *</code>.
</p>


<h3>
  <a name="882881"> </a>4.1	 LM_A_BEHAVIOR_VER
</h3>


<p>
  <a name="882882"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="882884"> </a>Default: LM_BEHAVIOR_V7_1
</p>


<p>
  <a name="882889"> </a>The overall behavior for all FLEX<em>lm</em> components can easily be set in LM_VER_BEHAVIOR in <code>lm_code.h</code>.
</p>


<p>
  <a name="882890"> </a>Valid values are LM_BEHAVIOR_V<code><em>x</em></code>, where <code><em>x</em></code> is 2, 3, 4, 5 5_1, 6, 7, or 7_1.
</p>


<p>
  <a name="882891"> </a>For the vendor daemon, in <code>lsvendor.c</code>, set:
</p>

<dl>  <dl>
     <dt> <a name="882892"> </a><CODE>char *ls_a_behavior_ver = LM_BEHAVIOR_V<code><em>x</em></code>;</CODE>
  </dl>
</dl>
<h3>
  <a name="882894"> </a>4.2	 LM_A_CHECK_BADDATE
</h3>


<p>
  <a name="882895"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="882897"> </a>Default: False
</p>


<p>
  <a name="882899"> </a>If True, and the license that authorizes the application has an expiration date, a check is made to see if the system date has been set back on the client node. If the checkout fails for this reason, the checkout error is LM_BADSYSDATE.
</p>


<h5>
  <a name="882900"> </a>See Also
</h5>

<ul>
  <li><a name="882904"> </a><a href="all.htm#883481">Section 6.1.2, "Limited Functionality Demos</a>"

  <li><a name="882908"> </a><a href="all.htm#884799">Section 9.2.2, "ls_a_check_baddate</a>"

</ul>

<h3>
  <a name="882913"> </a>4.3	 LM_A_CHECK_INTERVAL
</h3>


<p>
  <a name="882914"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="882921"> </a>Default: 120 second interval
</p>


<p>
  <a name="898710"> </a>LM_A_CHECK_INTERVAL controls the client's detection of daemon failures. FLEX<em>lm</em> client routines will install a <code><em></em></code>SIGALRM handler or no handler at all, based on LM_A_CHECK_INTERVAL. The minimum value for LM_A_CHECK_INTERVAL is 30 seconds.
</p>


<p>
  <a name="882923"> </a>The results of possible settings of this variable are:
</p>


<p>
  <a name="898723"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="898730"> </a><strong>Variable:
<br></strong></td>
    <td><a name="898732"> </a><strong>Setting:
<br></strong></td>
    <td><a name="898734"> </a><strong>Result:
<br></strong></td>
  </tr>
  <tr>
    <td><a name="898736"> </a><code><em>check_interval
<br></em></code></td>
    <td><a name="898738"> </a>&lt; 0
<br></td>
    <td><a name="898740"> </a>No SIGALRM timer installed.
<br></td>
  </tr>
  <tr>
    <td><a name="898742"> </a><code><em>check_interval
<br></em></code></td>
    <td><a name="898744"> </a>&gt;= 0, &lt; 30
<br></td>
    <td><a name="898746"> </a>Old interval unchanged.
<br></td>
  </tr>
  <tr>
    <td><a name="898748"> </a><code><em>check_interval
<br></em></code></td>
    <td><a name="898750"> </a>&gt;= 30
<br></td>
    <td><a name="898752"> </a>Timer interval.
<br></td>
  </tr>
</table>




<p>
  <a name="898727"> </a>If you do not enable FLEX<em>lm</em>'s timer, you must call <font  face="Arial" size="2">lc_heartbeat()</font> (or <font  face="Arial" size="2">lc_timer()</font>) periodically to check the status of the license. You cannot set <code><em>check_interval</em></code> to less than 30 seconds with <font  face="Arial" size="2">lc_set_attr()</font>.
</p>


<p>
  <a name="882935"> </a>The timer handler remembers any other handler that was installed, and calls the previously installed handler when it has checked the socket. If it is unacceptable to have handlers installed for either of these signals (or to have the intervals changed), then set <code><em>check_interval</em></code> &lt; 0. If you set <code><em>check_interval</em></code> &lt; 0, then no checking of the daemon will be done unless you call <font  face="Arial" size="2">lc_timer()</font> periodically. You could, of course, do this from your own timer signal handler.
</p>


<p>
  <a name="923927"> </a>Starting with FLEX<em>lm</em> v6.0, the default timers included in FLEX<em>lm</em> can be used for any Windows application, whether it is a 32-bit Console or WIN32 application. You may still use your own timers by disabling the internal ones.
</p>


<h5>
  <a name="882936"> </a>See Also
</h5>

<ul>
  <li><a name="882940"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

  <li><a name="898828"> </a><a href="allApp.htm#921276">Appendix&nbsp;B, "UDP Communications</a>"

  <li><a name="882948"> </a><a href="all.htm#883217">Section 4.23, "LM_A_SETITIMER, LM_A_SIGNAL (UNIX Only)</a>"

</ul>

<h3>
  <a name="882951"> </a>4.4	 LM_A_CHECKOUT_DATA
</h3>


<p>
  <a name="882952"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="898848"> </a>Default: None.
</p>


<p>
  <a name="942434"> </a>LM_A_CHECKOUT_DATA allows you to send some vendor-specific data to the vendor daemon in addition to the normal USER/HOST/DISPLAY data. This checkout data can be used to group duplicates in addition to the USER/HOST/DISPLAY by setting the LM_DUP_VENDOR bit in the duplicate grouping bitmask passed to <font  face="Arial" size="2">lc_checkout()</font>. If LM_DUP_VENDOR is used, LM_A_CHECKOUT_DATA must be set. The checkout data can be modified before each individual <font  face="Arial" size="2">lc_checkout()</font> or <font  face="Arial" size="2">lc_checkin()</font> call. This makes it possible for a process to check out several different independent licenses (if LM_DUP_VENDOR is in the duplicate mask) and to check in the licenses independently by setting the vendor-defined field each time before calling <font  face="Arial" size="2">lc_checkin()</font>. The vendor-defined data is a character string, with a maximum size of <code><em></em></code>MAX_VENDOR_CHECKOUT_DATA bytes (32 bytes). 
</p>


<p>
  <a name="882959"> </a>You have the option in your vendor daemon of allowing this data to be visible or not. The daemon variable ls_show_vendor_def controls whether the vendor-defined field is visible to your end users via <code>lmstat</code> (or any utility which calls <font  face="Arial" size="2">lc_userlist()</font>).
</p>


<p>
  <a name="882963"> </a>Each checkout or checkin request uses the value of the vendor-defined data from the last <font  face="Arial" size="2">lc_set_attr()</font> call. Checkins will only be performed for features on which the vendor-defined field matches.
</p>


<h3>
  <a name="882968"> </a>4.5	 LM_A_CHECKOUTFILTER
</h3>


<p>
  <a name="882969"> </a>Type: Pointer to a function returning <code>int</code>.
</p>


<p>
  <a name="898945"> </a>Default: None.
</p>


<p>
  <a name="882971"> </a>The checkout filter allows you to examine the FEATURE line which is going to be used in an <em></em><font  face="Arial" size="2">lc_checkout()</font> request, and either allow the checkout to proceed or reject this particular FEATURE line. This filter function will be called with a pointer to the <code>CONFIG</code> struct which is about to be checked out. If this function returns 0, then checkout proceeds; otherwise, if this function returns a non-zero value, then the checkout proceeds to the next available FEATURE line. If this function returns a non-zero value and sets the error obtainable from <font  face="Arial" size="2">lc_get_errno()</font>, then this value will be the return of <font  face="Arial" size="2">lc_checkout()</font>, otherwise, if <font  face="Arial" size="2">lc_get_errno()</font> is set to 0 by this function, the result of <font  face="Arial" size="2">lc_checkout()</font> would be LM_LOCALFILTER (assuming the checkout was not attempted on further FEATURE lines or that another FEATURE line did not produce a LM_MAXUSERS/LM_USERSQUEUED result).
</p>


<p>
  <a name="882976"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Using LM_A_CHECKOUTFILTER when the client is not reading the license file (via <code>@</code><code><em>host</em></code>, <code><em>port</em></code><code>@</code><code><em>host</em></code> or USE_SERVER) requires the license server to pass each license to the client for verification. For this reason, LM_A_CHECKOUTFILTER should be used with discretion.</FONT><HR WIDTH=75%>


<h3>
  <a name="882978"> </a>4.6	 LM_A_CKOUT_INSTALL_LIC
</h3>


<p>
  <a name="882979"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="882981"> </a>By default, a successful checkout automatically updates the registry <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> setting (where <code><em>VENDOR</em></code> is your vendor name) to include the license file location that was used for the checkout. This can be disabled by setting this attribute to 0.
</p>


<p>
  <a name="882982"> </a>Default: None.
</p>


<h5>
  <a name="882984"> </a>See Also
</h5>

<ul>
  <li><a name="882988"> </a><a href="all.htm#881230">"Registry and $HOME/.flexlmrc"</a>

</ul>

<h3>
  <a name="882991"> </a>4.7	 LM_A_DISPLAY_OVERRIDE
</h3>


<p>
  <a name="882992"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="899025"> </a>Default: No override of display name.
</p>


<p>
  <a name="882994"> </a>This string, if specified, will be used to override the display name as derived from the UNIX <font  face="Arial" size="2">ttyname()</font> system call.
</p>


<p>
  <a name="882998"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 This value cannot be changed for a job after the initial connection to the vendor daemon.</FONT><HR WIDTH=75%>


<p>
  <a name="883002"> </a>The most common use of this attribute is for setting the display to the X-Display name. Unfortunately, the only reliable way of obtaining the name of the X-Display is via an X call. Therefore, this can only be done by the X-based application, after <font  face="Arial" size="2">XOpenDisplay()</font> (or <font  face="Arial" size="2">XtAppInitialize()</font>) has been called.
</p>


<p>
  <a name="883005"> </a>The Display name is available via the X macro <font  face="Arial" size="2">DisplayString(</font><code><em>display</em></code><font  face="Arial" size="2">)</font>.
</p>


<p>
  <a name="883008"> </a>In addition, it is essential to note that there are at least three possible aliases for using the monitor attached to the computer in use: <code>localhost:0</code>, <code>unix:0</code>, and <code>:0</code>. If any of these are used, <code>LM_A_DISPLAY_OVERRIDE</code> should use the result of <em></em><font  face="Arial" size="2">gethostname()</font> instead. Finally, it may be safest to use the IP address as a string to avoid the problem of aliases for a particular display host.
</p>


<p>
  <a name="883010"> </a>The following example code can be used for this purpose:
</p>

<dl>  <dl>
     <dt> <a name="883011"> </a><CODE>/* </CODE>
     <dt> <a name="899091"> </a><CODE>&nbsp;* assume XOpenDisplay or XtAppInitialize has already been called </CODE>
     <dt> <a name="899092"> </a><CODE>&nbsp;*/</CODE>
     <dt> <a name="899093"> </a><CODE>#include &lt;netdb.h&gt;</CODE>
     <dt> <a name="899094"> </a><CODE>char display_name[50], *cp, display_ip[9];</CODE>
     <dt> <a name="899095"> </a><CODE>struct hostent *he;</CODE>
     <dt> <a name="899096"> </a><CODE>/*...*/</CODE>
     <dt> <a name="899097"> </a><CODE>strncpy(display_name, DisplayString(display), 49);</CODE>
     <dt> <a name="899098"> </a><CODE>if (!(strncmp(display_name, ":0", 2)) ||</CODE>
     <dt> <a name="899122"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!(strncmp(display_name, "unix:0", 6)) ||</CODE>
     <dt> <a name="899147"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!(strncmp(display_name, "localhost:0", 12)))</CODE>
     <dt> <a name="899149"> </a><CODE>{</CODE>
     <dt> <a name="899150"> </a><CODE>&nbsp;&nbsp;static char d[50];</CODE>
    <dl>
       <dt> <a name="899151"> </a><CODE>gethostname(d, 47);</CODE>
       <dt> <a name="899152"> </a><CODE>if (*d)</CODE>
       <dt> <a name="899153"> </a><CODE>{</CODE>
       <dt> <a name="899154"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(d, ":0");</CODE>
       <dt> <a name="899155"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display_name = d;</CODE>
       <dt> <a name="899156"> </a><CODE>}</CODE>
    </dl>
     <dt> <a name="899157"> </a><CODE>}</CODE>
     <dt> <a name="899158"> </a><CODE>he = gethostbyname(display_name)</CODE>
     <dt> <a name="899159"> </a><CODE>sprintf(display_ip, "%x", *((int *)he-&gt;h_addr));</CODE>
     <dt> <a name="899160"> </a><CODE>lc_set_attr(LM_A_DISPLAY_OVERRIDE, display_ip);</CODE>
  </dl>
</dl>
<h3>
  <a name="883013"> </a>4.8	 LM_A_FLEXLOCK
</h3>


<p>
  <a name="883014"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="899237"> </a>Default: Off
</p>


<p>
  <a name="883016"> </a>Turns on FLEX<em>lock</em> capability. This must be enabled to use FLEX<em>lock</em>, but application security is poorer. FLEX<em>lock</em> is available only on Windows.
</p>


<p>
  <a name="883019"> </a>See the <em>FLEXlm Programmers Guide</em> and <a href="all.htm#880801">Section 2.7, "FLEXlock,"</a> for additional information on FLEX<em>lock</em>.
</p>


<h3>
  <a name="883021"> </a>4.9	 LM_A_FLEXLOCK_INSTALL_ID
</h3>


<p>
  <a name="883022"> </a>Type: <code>(short *)</code>
</p>


<p>
  <a name="883024"> </a>Default: Unused.
</p>


<p>
  <a name="938701"> </a>For additional security, each time that your application is installed, and the user activates the FLEX<em>lock</em> operation, a random id number is generated. This number can be used to identify work done with your application in this mode. If this number is saved in the work and compared when accessing it, you may be able to determine if your application has been re-installed. FLEX<em>lock</em> is available only on Windows.
</p>


<p>
  <a name="883025"> </a>You can obtain this number by calling:
</p>

<dl>  <dl>
     <dt> <a name="883026"> </a><CODE>long code_id;</CODE>
     <dt> <a name="899269"> </a><CODE>lc_get_attr(job, LM_A_FLEXLOCK_INSTALL_ID, (short *)&amp;code_id);</CODE>
  </dl>
</dl>
<p>
  <a name="883027"> </a>After the FLEX<em>lock</em> operation is activated, an entry is generated in the registry. It is located at:
</p>

<dl>  <dl>
     <dt> <a name="883028"> </a><CODE>HKEY_LOCAL_MACHINE-&gt;SOFTWARE-&gt;GLOBEtrotter Software Inc.-&gt;FLEXlock</CODE>
  </dl>
</dl>
<p>
  <a name="883029"> </a>A subkey for each feature is located inside the FLEX<em>lock</em> subkey and is a combination of the vendor name and the feature name. If this subkey is deleted, the program will act as if you had never activated the FLEX<em>lock</em> functionality. (Familiarity with the registry editor is necessary for testing FLEX<em>lock</em>-enabled features.)
</p>


<p>
  <a name="883030"> </a>See the <em>FLEXlm Programmers Guide</em> for additional information on FLEX<em>lock</em>.
</p>


<h3>
  <a name="883033"> </a>4.10	 LM_A_HOST_OVERRIDE
</h3>


<p>
  <a name="883034"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="899337"> </a>Default: No override of host name
</p>


<p>
  <a name="883036"> </a>This string, if specified, will be used to override the host name as derived from the UNIX <font  face="Arial" size="2">gethostname()</font> system call.
</p>


<p>
  <a name="883041"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 This value cannot be changed for a job after the initial connection to the vendor daemon.</FONT><HR WIDTH=75%>


<h3>
  <a name="883045"> </a>4.11	 LM_A_LCM
</h3>


<p>
  <a name="883046"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="899362"> </a>Default: True
</p>


<p>
  <a name="883048"> </a>Used to turn off the License Certificate Manager. The LCM is available only on Windows.
</p>


<h3>
  <a name="883053"> </a>4.12	 LM_A_LCM_URL
</h3>


<p>
  <a name="883054"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="938707"> </a>Default: www.globetrotter.com/<code><em>vendor</em></code>, where<em> </em><code><em>vendor</em></code><em> </em>is your vendor daemon name.
</p>


<p>
  <a name="883056"> </a>Used to override the License Certificate Manager URL default:
</p>

<dl>  <dl>
     <dt> <a name="883057"> </a><CODE>lc_set_attr(job, LM_A_LCM_URL,</CODE>
    <dl>
       <dt> <a name="899382"> </a><CODE>(LM_A_VAL_TYPE)"www.<code><em>mycompany</em></code>.com/licenses");</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="883060"> </a>See the <em>FLEXlm Programmers Guide</em> for additional information on LCM. The LCM is available only on Windows.
</p>


<h3>
  <a name="883064"> </a>4.13	 LM_A_LF_LIST
</h3>


<p>
  <a name="883065"> </a>Type: Pointer to <code>(char **)</code>
</p>


<p>
  <a name="883067"> </a>List of all license files searched for features. Useful for failure messages for debugging. Note that <font  face="Arial" size="2">lc_lic_where()</font> prints only one file, the one last searched. For example:
</p>

<dl>  <dl>
     <dt> <a name="883068"> </a><CODE>#include "lm_attr.h"</CODE>
     <dt> <a name="899438"> </a><CODE>/*...*/</CODE>
     <dt> <a name="899439"> </a><CODE>char **cp;</CODE>
     <dt> <a name="899440"> </a><CODE>lc_get_attr(job, LM_A_LF_LIST, (LM_A_VAL_TYPE)&amp;cp);</CODE>
     <dt> <a name="899441"> </a><CODE>if (cp)</CODE>
     <dt> <a name="899442"> </a><CODE>{</CODE>
     <dt> <a name="899443"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts("files searched are: ");</CODE>
     <dt> <a name="899444"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (*cp)</CODE>
     <dt> <a name="899445"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\t%s\n",*cp++);</CODE>
     <dt> <a name="899446"> </a><CODE>}</CODE>
  </dl>
</dl>
<h3>
  <a name="883071"> </a>4.14	 LM_A_LICENSE_CASE_SENSITIVE
</h3>


<p>
  <a name="883072"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="883074"> </a>Default: False
</p>


<p>
  <a name="883076"> </a>If True, the license file is case-sensitive. Before v6, license files were largely case-sensitive. The default is strongly recommended, and makes end-user usage much easier. This should be set to True to generate license files compatible with older versions of FLEX<em>lm</em>. This attribute is automatically turned on by setting LM_VER_BEHAVIOR in <code>lm_code.h</code> to LM_BEHAVIOR_V5_1 or less.
</p>


<h3>
  <a name="883083"> </a>4.15	 LM_A_LICENSE_DEFAULT
</h3>


<p>
  <a name="883084"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="912083"> </a>The default license file location. We recommend that this be set to the default location in your distribution hierarchy. If LM_A_LICENSE_DEFAULT is set, FLEX<em>lm</em> still honors the <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> and <code>LM_LICENSE_FILE</code> environment variables first.
</p>


<p>
  <a name="883091"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 It is strongly recommended that this attribute be set for all applications.</FONT><HR WIDTH=75%>


<h3>
  <a name="883094"> </a>4.16	 LM_A_LICENSE_FMT_VER
</h3>


<p>
  <a name="883095"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="883097"> </a>Default: LM_BEHAVIOR_V7_1
</p>


<p>
  <a name="912084"> </a>Licenses generated by <font  face="Arial" size="2">lc_cryptstr()</font> will be compatible with the version specified. Valid arguments are LM_BEHAVIOR_V<code><em>x</em></code>, where <code><em>x</em></code> is 2, 3, 4, 5, 5_1, 6, 7, or 7_1. Note that this is not automatically set by LM_VER_BEHAVIOR in <code>lm_code.h</code>. If the license compatible with the desired version cannot be generated:
</p>

<ul>
  <li><a name="883098"> </a>The error LM_LGEN_VER (-94) will be generated: "Attempt to generate license with incompatible attributes."

  <li><a name="883100"> </a>The FEATURE line will be left as is, without replacing the signature with a correct one.

</ul>

<h5>
  <a name="883101"> </a>See Also
</h5>

<ul>
  <li><a name="883105"> </a><a href="all.htm#881393">Section 3.9, "lc_cryptstr()</a>"

</ul>

<h3>
  <a name="883107"> </a>4.17	 LM_A_LINGER
</h3>


<p>
  <a name="883108"> </a>Type: <code>(long)</code>
</p>


<p>
  <a name="899933"> </a>Default: 0 (no linger)
</p>


<p>
  <a name="883109"> </a>This option controls the license linger time for your application. Any checkout performed after setting LM_A_LINGER to a non-zero value will cause the license to be held by the vendor daemon for the specified number of seconds after either a checkin or your process exits. The vendor daemon checks for lingering licenses only once per minute, which will limit the granularity of this setting.
</p>


<h5>
  <a name="883113"> </a>See Also
</h5>

<ul>
  <li><a name="883117"> </a><a href="all.htm#880724">Section 2.4, "Lingering Licenses</a>""

</ul>

<h3>
  <a name="883142"> </a>4.18	 LM_A_LONG_ERRMSG
</h3>


<p>
  <a name="883143"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="883145"> </a>Default: True
</p>


<p>
  <a name="883147"> </a>The default is long error messages. Error messages can be presented in a long, more descriptive format. The new format contains embedded newline characters, which some applications may not be able to handle, or may need special handling.
</p>


<p>
  <a name="883148"> </a>Applications will often find it useful to present the short error message first, and then long error message upon user request. This can be done thus:
</p>

<dl>  <dl>
     <dt> <a name="883149"> </a><CODE>lc_set_attr(<code><em>job</em></code>, LM_A_LONG_ERRMSG, (LM_A_VAL_TYPE)0);</CODE>
     <dt> <a name="900034"> </a><CODE>....</CODE>
     <dt> <a name="900035"> </a><CODE>/*error occurs*/</CODE>
     <dt> <a name="900036"> </a><CODE>lc_perror(<code><em>job</em></code>);</CODE>
     <dt> <a name="900037"> </a><CODE>/* user requests long error message */</CODE>
     <dt> <a name="900038"> </a><CODE>lc_set_attr(<code><em>job</em></code>, LM_A_LONG_ERRMSG, (LM_A_VAL_TYPE)1);</CODE>
     <dt> <a name="900039"> </a><CODE>lc_perror(<code><em>job</em></code>);</CODE>
  </dl>
</dl>
<p>
  <a name="883153"> </a>Note that this only works if another FLEX<em>lm</em> error doesn't occur in between, which would change the error condition and message. Not all error conditions have long explanations or context-sensitive information. 
</p>


<p>
  <a name="883154"> </a>Example:
</p>

<dl>  <dl>
     <dt> <a name="883155"> </a><CODE>Invalid host</CODE>
     <dt> <a name="900040"> </a><CODE>&nbsp;&nbsp;The hostid of this system does not match the hostid</CODE>
     <dt> <a name="900043"> </a><CODE>&nbsp;&nbsp;specified in the license file</CODE>
     <dt> <a name="900044"> </a><CODE>Hostid:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12345678</CODE>
     <dt> <a name="900047"> </a><CODE>License path:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;./file1.lic:./file2.lic:./file3.lic</CODE>
     <dt> <a name="900048"> </a><CODE>FLEXlm error:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-9,9</CODE>
  </dl>
</dl>
<p>
  <a name="883157"> </a>The format is:
</p>

<dl>  <dl>
     <dt> <a name="883158"> </a><CODE>short-error-description</CODE>
     <dt> <a name="900085"> </a><CODE>optional-long-explanation [1-3 lines]</CODE>
     <dt> <a name="900086"> </a><CODE>optional-context-information</CODE>
     <dt> <a name="900087"> </a><CODE>License path:&nbsp;&nbsp;&nbsp;path1:...:pathn</CODE>
     <dt> <a name="900088"> </a><CODE>FLEXlm error:&nbsp;&nbsp;&nbsp;major, minor</CODE>
  </dl>
</dl>
<p>
  <a name="883159"> </a>This attribute is automatically turned off by setting LM_VER_BEHAVIOR in <code>lm_code.h</code> to LM_BEHAVIOR_V5_1 or less.
</p>


<h3>
  <a name="883161"> </a>4.19	 LM_A_PERROR_MSGBOX (Windows Only)
</h3>


<p>
  <a name="883162"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="900138"> </a>Default: True
</p>


<p>
  <a name="883164"> </a>If True, <font  face="Arial" size="2">lc_perror()</font> presents the error message in an error message box. Also turned off when <code>FLEXLM_BATCH</code> is set.
</p>


<h3>
  <a name="883168"> </a>4.20	 LM_A_PROMPT_FOR_FILE (Windows Only)
</h3>


<p>
  <a name="883169"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="900168"> </a>Default: True
</p>


<p>
  <a name="938756"> </a>When True, the user is prompted for the license file path or server name or IP address, if needed. Also turned off when <code>FLEXLM_BATCH</code> is set.
</p>


<h3>
  <a name="883175"> </a>4.21	 LM_A_RETRY_CHECKOUT
</h3>


<p>
  <a name="883176"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="900206"> </a>Default: False (for backward compatibility, but we recommend setting to True).
</p>


<p>
  <a name="883178"> </a>When True, checkouts that fail due to communications errors are automatically retried once. Often this second attempt will succeed on networks with poor communications. This is turned on by default in both the Simple and Trivial API, and the default is off in the FLEXible API. Use <font  face="Arial" size="2">lc_set_attr(</font><code><em>job</em></code><code>, LM_A_RETRY_CHECKOUT, (LM_A_VAL_TYPE)1</code><font  face="Arial" size="2">)</font> to turn this attribute on for the FLEXible API (recommended). It's turned off by default in the FLEXible API so that previous default behavior is preserved.
</p>


<h3>
  <a name="883196"> </a>4.22	 LM_A_RETRY_COUNT, LM_A_RETRY_INTERVAL
</h3>


<p>
  <a name="883197"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="900244"> </a>Default: 5 for LM_A_RETRY_COUNT, 60 for LM_A_RETRY_INTERVAL
</p>


<p>
  <a name="883199"> </a>Together, LM_A_RETRY_COUNT and LM_A_RETRY_INTERVAL are used for automatic reconnection to a daemon. Once daemon failure is detected, the client library routines will attempt to reconnect to a daemon. If reconnection fails, then the reconnect will be re-attempted LM_A_RETRY_COUNT times at intervals of LM_A_RETRY_INTERVAL. This timing will be done with the same timer that detects the daemon's failure. If no FLEX<em>lm</em> timers (SIGALRM) are desired, set LM_A_RETRY_INTERVAL to a negative value. The minimum value for LM_A_RETRY_INTERVAL is 30 seconds.
</p>


<p>
  <a name="883204"> </a>If LM_A_RETRY_COUNT is set to -1, the application will attempt retrying forever--for applications desiring a more lenient policy, this is recommended. In addition, on Windows, it is not legal to set LM_A_RETRY_COUNT to anything other than -1 without also setting LM_A_USER_EXITCALL, because there is no default behavior for exiting a Windows application.
</p>


<h5>
  <a name="883205"> </a>See Also
</h5>

<ul>
  <li><a name="883209"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

  <li><a name="883213"> </a><a href="all.htm#882913">Section 4.3, "LM_A_CHECK_INTERVAL</a>"

</ul>

<h3>
  <a name="883217"> </a>4.23	 LM_A_SETITIMER, LM_A_SIGNAL (UNIX Only)
</h3>


<p>
  <a name="883218"> </a>Type: Pointer to a function returning <code>void</code>.
</p>


<p>
  <a name="938767"> </a>Default: <font  face="Arial" size="2">setitimer()</font> and <font  face="Arial" size="2">signal()</font>
</p>


<p>
  <a name="883221"> </a>This option allows you to replace <em></em><font  face="Arial" size="2">setitimer()</font> with a routine of your choice. This might be done, for example, if your application is written in FORTRAN on UNIX, where use of SIGALRM is not allowed.
</p>


<p>
  <a name="883223"> </a>To disable SIGALRM, create a function that does nothing and use a pointer to this function as the setting for both these attributes.
</p>

<dl>  <dl>
     <dt> <a name="883224"> </a><CODE>null_func() {}</CODE>
     <dt> <a name="883225"> </a><CODE>/* ... */</CODE>
     <dt> <a name="883226"> </a><CODE>lc_set_attr(<code><em>job</em></code>, LM_A_SETITIMER, (LM_A_VAL_TYPE)null_func);</CODE>
     <dt> <a name="883228"> </a><CODE>lc_set_attr(<code><em>job</em></code>, LM_A_SIGNAL, (LM_A_VAL_TYPE)null_func);</CODE>
  </dl>
</dl>
<h3>
  <a name="883248"> </a>4.24	 LM_A_TCP_TIMEOUT
</h3>


<p>
  <a name="883249"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="938773"> </a>Default: 7200 seconds (2 hours)
</p>


<p>
  <a name="938774"> </a>Maximum: 15300 seconds (4 hours 15 minutes). 
</p>


<p>
  <a name="883252"> </a>If a TCP client node crashes or the client node is disconnected from the network, the license will be automatically checked back in LM_A_TCP_TIMEOUT seconds later. 0 means no TCP timeout.
</p>


<h5>
  <a name="883257"> </a>See Also
</h5>

<ul>
  <li><a name="883261"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

  <li><a name="883265"> </a><a href="allApp.htm#921276">Appendix&nbsp;B, "UDP Communications</a>"

</ul>

<h3>
  <a name="883303"> </a>4.25	 LM_A_USER_EXITCALL
</h3>


<p>
  <a name="883304"> </a>Type: Pointer to a function returning <code>int</code>. Return value unused.
</p>


<p>
  <a name="938813"> </a>Default: No user exit handler (program exits).
</p>


<p>
  <a name="883306"> </a>The function pointer LM_A_USER_EXITCALL can be set to point to the routine that is to receive control if reconnection fails after LM_A_RETRY_COUNT attempts. If no routine is specified, then <font  face="Arial" size="2">lc_perror()</font> is called, and the program will exit.   If the LM_A_USER_EXITCALL function returns control to its caller, program operation will continue as if no license had been checked out. The LM_A_USER_EXITCALL routine is called as follows:
</p>

<dl>  <dl>
     <dt> <a name="883308"> </a><CODE><code>(*exitcall)(</code><code><em>feature</em></code><code>)</code></CODE>
  </dl>
</dl>
<p>
  <a name="883311"> </a>The<em> </em><font  face="Arial" size="2">exitcall()</font> function will be called for <em>each feature</em> that the program had checked out, if that feature's license is lost. If the <font  face="Arial" size="2">exitcall()</font> function returns, it will be called again for the next feature. After it has been called for all features, control will return to the program at the point where detection of loss of licenses occurred.
</p>


<h5>
  <a name="883312"> </a>See Also
</h5>

<ul>
  <li><a name="883317"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

</ul>

<h3>
  <a name="883320"> </a>4.26	 LM_A_USER_OVERRIDE
</h3>


<p>
  <a name="883321"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="900449"> </a>Default: No override of user name.
</p>


<p>
  <a name="883323"> </a>This string, if specified, will be used to override the user name as derived from the UNIX password file. On Windows, the user name is set to the host name, but can be overridden with this attribute.
</p>


<p>
  <a name="883327"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 This value cannot be changed after the initial connection to the vendor daemon.</FONT><HR WIDTH=75%>


<h3>
  <a name="883334"> </a>4.27	 LM_A_USER_RECONNECT
</h3>


<p>
  <a name="883335"> </a>Type: Pointer to a function returning <code>int</code>. Return value unused.
</p>


<p>
  <a name="900480"> </a>Default: No user reconnection handler.
</p>


<p>
  <a name="883337"> </a>This reconnection routine is called each time just before a reconnection is attempted, either automatically as a result of the timer set by LM_A_CHECK_INTERVAL, or as a result of the application program calling <font  face="Arial" size="2">lc_timer()</font>. 
</p>


<p>
  <a name="883342"> </a>The reconnection routine is called as follows:
</p>

<dl>  <dl>
     <dt> <a name="883343"> </a><CODE>(*reconnect)(<code><em>feature</em></code>, <code><em>pass</em></code>, <code><em>total_attempts</em></code>, <code><em>interval</em></code>)</CODE>
  </dl>
</dl>
<p>
  <a name="902210"> </a>where:
</p>


<p>
  <a name="902214"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="902221"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="902223"> </a>Feature name.
<br></td>
  </tr>
  <tr>
    <td><a name="902225"> </a><code>(int) </code><code><em>pass
<br></em></code></td>
    <td><a name="902227"> </a>Current attempt number.
<br></td>
  </tr>
  <tr>
    <td><a name="902229"> </a><code>(int) </code><code><em>total_attempts
<br></em></code></td>
    <td><a name="902231"> </a>Maximum number of passes that will be 
<br>attempted.
<br></td>
  </tr>
  <tr>
    <td><a name="902233"> </a><code>(int) </code><code><em>interval
<br></em></code></td>
    <td><a name="902235"> </a>Time in seconds between reconnection 
<br>attempts.
<br></td>
  </tr>
</table>




<p>
  <a name="902218"> </a>
</p>


<p>
  <a name="883349"> </a>If LM_A_RETRY_COUNT is set to a value &lt;=0, then the reconnect handler will not be called.
</p>


<h5>
  <a name="883350"> </a>See Also 
</h5>

<ul>
  <li><a name="883354"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

  <li><a name="883358"> </a><a href="all.htm#882913">Section 4.3, "LM_A_CHECK_INTERVAL</a>"

</ul>

<h3>
  <a name="883361"> </a>4.28	 LM_A_USER_RECONNECT_DONE
</h3>


<p>
  <a name="883362"> </a>Type: Pointer to a function returning <code>int</code>. Return value unused.
</p>


<p>
  <a name="902347"> </a>Default: No user <code>reconnect_done</code> handler.
</p>


<p>
  <a name="883364"> </a>This function will be called when reconnection is successfully completed. 
</p>


<p>
  <a name="883367"> </a>The reconnection done handler is called as follows:
</p>

<dl>  <dl>
     <dt> <a name="883368"> </a><CODE>(*reconnect_done)(<code><em>feature</em></code>, <code><em>tries</em></code>, <code><em>total_attempts</em></code>, <code><em>interval</em></code>)</CODE>
  </dl>
</dl>
<p>
  <a name="902350"> </a>where:
</p>


<p>
  <a name="902354"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="902361"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="902363"> </a>Feature name.
<br></td>
  </tr>
  <tr>
    <td><a name="902365"> </a><code>(int) </code><code><em>tries</em></code><code> 
<br></code></td>
    <td><a name="902367"> </a>Number of attempts that were required 
<br>to re-connect for this feature.
<br></td>
  </tr>
  <tr>
    <td><a name="902369"> </a><code>(int) </code><code><em>total_attempts
<br></em></code></td>
    <td><a name="902371"> </a>Maximum number of retry attempts that 
<br>would be made.
<br></td>
  </tr>
  <tr>
    <td><a name="902373"> </a><code>(int) </code><code><em>interval
<br></em></code></td>
    <td><a name="902375"> </a>Interval in seconds between 
<br>reconnection attempts.
<br></td>
  </tr>
</table>




<h3>
  <a name="883377"> </a>4.29	 LM_A_VD_GENERIC_INFO, LM_A_VD_FEATURE_INFO
</h3>


<p>
  <a name="883378"> </a>Type: Pointer to <code>LM_VD_GENERIC_INFO</code> or pointer to <code>LM_VD_FEATURE_INFO</code>
</p>


<p>
  <a name="883379"> </a>Both attributes get information from your vendor daemon. LM_A_VD_GENERIC_INFO gets information which is not specific to a feature, and which is mostly found in <code>lsvendor.c</code>.
</p>


<p>
  <a name="883380"> </a>LM_A_VD_FEATURE_INFO gets information about a particular feature, and provides an accurate count of licenses used, users queued, etc., and works correctly when a license file has more than one FEATURE or INCREMENT line for the same feature name. This will result in a LM_NOSERVSUPP error if the particular <code>CONFIG</code> struct has been merged with another <code>CONFIG</code> in the vendor daemon.
</p>


<p>
  <a name="883381"> </a>These attributes will only work on your vendor daemon. If a request is made for a feature only served by a different vendor daemon, then <em>the </em>LM_NOADMINAPI error results.
</p>


<p>
  <a name="883383"> </a>A pointer to a struct is given as an argument to <font  face="Arial" size="2">lc_get_attr()</font>, and upon successful return, this struct is filled with the appropriate information. The following example illustrates the use of both attributes:
</p>

<dl>  <dl>
     <dt> <a name="883384"> </a><CODE>#include "lmclient.h"</CODE>
     <dt> <a name="902462"> </a><CODE>#include "lm_code.h"</CODE>
     <dt> <a name="902463"> </a><CODE>#include "lm_attr.h"</CODE>
     <dt> <a name="902464"> </a><CODE>/* ... */</CODE>
     <dt> <a name="902465"> </a><CODE>/* </CODE>
     <dt> <a name="902467"> </a><CODE>* Print out GENERIC and FEATURE information for every</CODE>
     <dt> <a name="902468"> </a><CODE>* license file line for a given feature name</CODE>
     <dt> <a name="902470"> </a><CODE>*/</CODE>
     <dt> <a name="902472"> </a><CODE>void</CODE>
     <dt> <a name="902473"> </a><CODE>vendor_daemon_info(LM_HANDLE *job, char *feature)</CODE>
     <dt> <a name="902476"> </a><CODE>{</CODE>
     <dt> <a name="902478"> </a><CODE>&nbsp;&nbsp;CONFIG *conf, *c;</CODE>
     <dt> <a name="902481"> </a><CODE>&nbsp;&nbsp;LM_VD_GENERIC_INFO gi;</CODE>
     <dt> <a name="902489"> </a><CODE>&nbsp;&nbsp;LM_VD_FEATURE_INFO fi;</CODE>
     <dt> <a name="902490"> </a><CODE>&nbsp;&nbsp;int first = 1;</CODE>
     <dt> <a name="902493"> </a><CODE></CODE>
     <dt> <a name="902494"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;c = (CONFIG *)0; </CODE>
     <dt> <a name="902495"> </a><CODE></CODE>
     <dt> <a name="902496"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;for (conf = lc_next_conf(job, feature, &amp;c);conf; </CODE>
     <dt> <a name="902497"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conf=lc_next_conf(job, feature, &amp;c))</CODE>
     <dt> <a name="902498"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="902499"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (first)</CODE>
     <dt> <a name="902500"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="902501"> </a><CODE>/* </CODE>
     <dt> <a name="902503"> </a><CODE>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get generic daemon info</CODE>
     <dt> <a name="902504"> </a><CODE>&nbsp;*/</CODE>
     <dt> <a name="902506"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.feat = conf;</CODE>
     <dt> <a name="902603"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lc_get_attr(job, LM_A_VD_GENERIC_INFO,</CODE>
     <dt> <a name="902508"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;short *)&amp;gi))</CODE>
     <dt> <a name="902509"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="902510"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror(job, "LM_A_VD_GENERIC_INFO");</CODE>
     <dt> <a name="902511"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="902512"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else </CODE>
     <dt> <a name="902513"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="902514"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" conn-timeout %d\n",</CODE>
     <dt> <a name="919233"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.conn_timeout);</CODE>
     <dt> <a name="902516"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" normal_hostid %d\n",</CODE>
     <dt> <a name="902517"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.normal_hostid);</CODE>
     <dt> <a name="902518"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" minimum_user_timeout %d\n", </CODE>
     <dt> <a name="902519"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.minimum_user_timeout);</CODE>
     <dt> <a name="902520"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" min_lmremove %d\n", </CODE>
     <dt> <a name="902521"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.min_lmremove);</CODE>
     <dt> <a name="902522"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" use_featset %d\n", </CODE>
     <dt> <a name="902523"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.use_featset);</CODE>
     <dt> <a name="902524"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" dup_sel 0x%x\n", gi.dup_sel);</CODE>
     <dt> <a name="902642"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" use_all_feature_lines %d\n",</CODE>
     <dt> <a name="902526"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.use_all_feature_lines);</CODE>
     <dt> <a name="902527"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" do_checkroot %d\n", </CODE>
     <dt> <a name="902528"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.do_checkroot);</CODE>
     <dt> <a name="902529"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(" show_vendor_def %d\n", </CODE>
     <dt> <a name="902530"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gi.show_vendor_def);</CODE>
     <dt> <a name="902531"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="902532"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first = 0;</CODE>
     <dt> <a name="902533"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="919237"> </a><CODE>/* </CODE>
     <dt> <a name="919238"> </a><CODE>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get specific feature info</CODE>
     <dt> <a name="919239"> </a><CODE>&nbsp;*/</CODE>
     <dt> <a name="902534"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi.feat = conf;</CODE>
     <dt> <a name="902535"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lc_get_attr(job, LM_A_VD_FEATURE_INFO,</CODE>
     <dt> <a name="902654"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(short *)&amp;fi))</CODE>
     <dt> <a name="902536"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="902537"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror(job, "LM_A_VD_FEATURE_INFO");</CODE>
     <dt> <a name="902538"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="902539"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</CODE>
     <dt> <a name="902540"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="902546"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\nfeature s\n", conf-&gt;feature);</CODE>
     <dt> <a name="902547"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("code %s\n", conf-&gt;code);</CODE>
     <dt> <a name="902548"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("rev %d\n", fi.rev);</CODE>
     <dt> <a name="902549"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("timeout %d\n", fi.timeout);</CODE>
     <dt> <a name="902550"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("linger %d\n", fi.linger);</CODE>
     <dt> <a name="902551"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("res %d\n", fi.res);</CODE>
     <dt> <a name="902552"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("tot_lic_in_use %d\n",</CODE>
     <dt> <a name="902553"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi.tot_lic_in_use);</CODE>
     <dt> <a name="902554"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("float_in_use %d\n", </CODE>
     <dt> <a name="902555"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi.float_in_use);</CODE>
     <dt> <a name="902556"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("user_cnt %d\n", fi.user_cnt);</CODE>
     <dt> <a name="902557"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("num_lic %d\n", fi.num_lic);</CODE>
     <dt> <a name="902558"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("queue_cnt %d\n", fi.queue_cnt);</CODE>
     <dt> <a name="902559"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("overdraft %d\n", fi.overdraft</CODE>
     <dt> <a name="902560"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="902561"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="919242"> </a><CODE>}</CODE>
  </dl>
</dl>
<h5>
  <a name="883387"> </a>Detecting OVERDRAFT for Suites
</h5>


<p>
  <a name="902735"> </a>This is a special case for OVERDRAFT. With suites, when you check out a feature, you also silently check out a token for the suite. Both the suite and feature token may be in the OVERDRAFT state, or only one, or neither. To detect suite overdraft, the code must get the parent/suite feature name, and then check for overdraft for this feature:
</p>

<dl>  <dl>
     <dt> <a name="902736"> </a><CODE>if ((conf-&gt;package_mask &amp; LM_LICENSE_PKG_COMPONENT)</CODE>
     <dt> <a name="902739"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; (conf-&gt;package_mask &amp; LM_LICENSE_PKG_SUITE))</CODE>
     <dt> <a name="902740"> </a><CODE>{</CODE>
     <dt> <a name="902741"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;fi.feat = conf-&gt;parent_feat;</CODE>
     <dt> <a name="902742"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;if (lc_get_attr(job, LM_A_VD_FEATURE_INFO, (short *)&amp;fi))</CODE>
     <dt> <a name="902743"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror(job, "LM_A_VD_FEATURE_INFO");</CODE>
     <dt> <a name="902744"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;else</CODE>
     <dt> <a name="902745"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("suite overdraft is %d\n", fi.overdraft);</CODE>
     <dt> <a name="902746"> </a><CODE>}</CODE>
  </dl>
</dl>
<h3>
  <a name="883392"> </a>4.30	 LM_A_VENDOR_ID_DECLARE
</h3>


<p>
  <a name="883393"> </a>Type: Pointer to <code>LM_VENDOR_HOSTID</code> struct.
</p>


<p>
  <a name="902772"> </a>Default: None.
</p>


<p>
  <a name="883396"> </a>This is for supporting vendor-defined hostid. The struct defines and declares the hostid to FLEX<em>lm</em>.
</p>


<h5>
  <a name="883402"> </a>See Also
</h5>

<ul>
  <li><a name="883406"> </a><a href="all.htm#940228">Section 5.13.3, "Vendor-Defined Hostid Types</a>"

  <li><a name="883407"> </a><code>lmclient.h</code> for <code>LM_VENDOR_HOSTID</code> definition

  <li><a name="883408"> </a><code>examples/vendor_hostid</code> directory

</ul>

<h3>
  <a name="883433"> </a>4.31	 LM_A_VERSION and LM_A_REVISION
</h3>


<p>
  <a name="883434"> </a>Type: <code>(short)</code>
</p>


<p>
  <a name="902871"> </a>Default: Version and revision of the libraries you have linked with.
</p>


<p>
  <a name="883439"> </a>FLEX<em>lm</em> version. Cannot be set. Only for use with <font  face="Arial" size="2">lc_get_attr()</font>.
</p>


<h3>
  <a name="883443"> </a>4.32	 LM_A_WINDOWS_MODULE_HANDLE
</h3>


<p>
  <a name="883444"> </a>Type: <code>(long)</code>
</p>


<p>
  <a name="902933"> </a>Default: 0
</p>


<p>
  <a name="883446"> </a>This is only needed for a specific situation on Windows: You are building a DLL, and the FLEX<em>lm</em> library (<code>lmgr.lib</code>) gets linked into your DLL. Or put another way, the FLEX<em>lm</em> calls are not in a static binary, but only in a DLL. In this case, the DLL should make the following call before calling <font  face="Arial" size="2">lc_checkout()</font>:
</p>

<dl>  <dl>
     <dt> <a name="883453"> </a><CODE>lc_set_attr(job, LM_A_WINDOWS_MODULE_HANDLE, </CODE>
     <dt> <a name="902906"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(LM_A_VAL_TYPE)GetModuleHandle(<code><em>dllname</em></code>));</CODE>
  </dl>
</dl>
<p>
  <a name="883454"> </a>where <code><em>dllname</em></code> is the name of the DLL. If this call is not made, Windows dialogs and error messages do not work properly.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="912128"> </a>Chapter 5 <br>The License File
</h2>
<hr>


<p>
  <a name="912149"> </a>Please refer first to the license file description in the <em>FLEXlm Programmers Guide</em>--especially the license file examples--to get an overview of the license file. The following is a detailed description of every license file attribute. Most companies need only use a small portion of the capabilities of the license file.
</p>


<h3>
  <a name="912150"> </a>5.1	 Format of the License File
</h3>


<p>
  <a name="922065"> </a>A license file consists of the following sections:
</p>


<p>
  <a name="915932"> </a>SERVER/VENDOR lines
</p>

<dl>  <dl>
     <dt> <a name="915933"> </a>These lines appear in the license file if a license server is used (that is, if any features are <em>counted</em>). The SERVER line(s) contain information about the node(s) where <code>lmgrd</code> is running. The vendor-specific VENDOR line(s) contain information about the vendor daemon(s) that run on the license server node(s).
  </dl>
</dl>
<p>
  <a name="915935"> </a>USE_SERVER line
</p>

<dl>  <dl>
     <dt> <a name="915936"> </a>A USE_SERVER line, if used, usually follows the SERVER line and indicates that a client application should not process the rest of the license file itself, but should check out the license directly from the license server. GLOBEtrotter recommends the use of a USE_SERVER line, particularly where performance is important.
  </dl>
</dl>
<p>
  <a name="915940"> </a>FEATURE lines
</p>

<dl>  <dl>
     <dt> <a name="915941"> </a>This section consists of any combination of FEATURE, INCREMENT, UPGRADE, or PACKAGE lines. This section is required in the license file read by <code>lmgrd</code>. This section is also required in the license file read by a client application, unless a USE_SERVER line is used.
  </dl>
</dl>
<p>
  <a name="915959"> </a>Comment lines
</p>

<dl>  <dl>
     <dt> <a name="915943"> </a>Comment lines should begin with a "#" character. However, in practice, all lines not beginning with a FLEX<em>lm</em> reserved keyword are considered comments.
  </dl>
</dl>
<p>
  <a name="915947"> </a>Long lines can be broken up. It is customary to use a "\" line continuation character, but in v7+ this is not required, particularly because newlines are often added by emailers.
</p>


<p>
  <a name="912162"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 See the <em>FLEXlm Programmers Guide</em> for information on <code>lmcrypt</code> and <code>makekey</code>, the license generation utilities. Also see <a href="all.htm#881393">Section 3.9, "lc_cryptstr(),"</a> for generating licenses with a C function call.</FONT><HR WIDTH=75%>


<p>
  <a name="916280"> </a>Vendors and license administrators will read the license file to understand how the licensing will behave, e.g., what features are licensed, the number of licenses, whether these features are node-locked, if the features are demo or regular, etc. 
</p>


<p>
  <a name="916297"> </a>End users often need to edit a few fields in the license file. Nearly all of the fields in a license file are authenticated; if the authenticated portions are edited by the license administrator, an LM_BADCODE error will result. 
</p>


<p>
  <a name="916298"> </a>The only data items in the license file that are editable by the end user are:
</p>

<ul>
  <li><a name="916007"> </a>Host names on SERVER lines

  <li><a name="916008"> </a>(Optional) port numbers on the SERVER or VENDOR lines

  <li><a name="916009"> </a>(Optional) path names on VENDOR lines

  <li><a name="916010"> </a>(Optional) options file path names on VENDOR lines

  <li><a name="916011"> </a>(Optional) lowercase <code><em>keyword</em></code><code>=</code><code><em>value</em></code> pairs on FEATURE lines

</ul>

<p>
  <a name="912173"> </a>Any amount of white space can separate the components of license file lines; data can be entered via any plain text editor. Vendors can therefore distribute license data via fax or telephone.
</p>


<p>
  <a name="912180"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The SERVER hostid(s) and everything on a FEATURE line (except the vendor daemon name and lowercase <code><em>keyword</em></code><code>=</code><code><em>value</em></code> pairs) are input to the authentication algorithm to generate the signature for that FEATURE line.</FONT><HR WIDTH=75%>


<h3>
  <a name="912184"> </a>5.2	 SERVER Lines
</h3>


<p>
  <a name="912185"> </a>The SERVER line specifies the node name and hostid of the license server machine and the port number of the <code>lmgrd</code>. A license file may have one or three SERVER lines. The SERVER node name in the license file can be any network alias for the node.
</p>


<p>
  <a name="938914"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The SERVER line must apply to all lines in the license file. It is permitted to combine license files from different vendors, but only if the SERVER hostids are identical in all files that are to be combined. A license file list can be used if hostids are not identical, but refer to the same machine.</FONT><HR WIDTH=75%>

<dl>  <dl>
     <dt> <a name="912186"> </a><CODE>SERVER <code><em>host</em></code> <code><em>hostid</em></code> [<code><em>port</em></code>]</CODE>

<p>
  <a name="916070"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="916077"> </a><code><em>host
<br></em></code></td>
    <td><a name="916079"> </a>String returned by the UNIX <code>hostname</code> or 
<br><code>uname -n</code> commands, or an IP address in 
<br>###.###.###.### format. This can be edited by 
<br>the license administrator. IP address is 
<br>recommended for sites where NIS or DNS have 
<br>trouble resolving a host name, or if the server 
<br>node has multiple network interfaces, and hence 
<br>multiple host names.
<br><a name="916095"> </a><code>this_host</code> can be used when the host name is 
<br>unknown. This allows the product to be installed 
<br>and to start the license server. Clients on the 
<br>same host as the license server will work fine. 
<br>Clients on other nodes will need to set 
<br><code>LM_LICENSE_FILE</code> or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> 
<br>to <code><em>port</em></code><code>@</code><code><em>host</em></code> or <code>@</code><code><em>host</em></code> to find the license 
<br>server, or <code>this_host</code> can simply be edited to 
<br>the real host name. Note that <code>lminstall</code> and 
<br><font  face="Arial" size="2">lc_convert()</font> will automatically change 
<br><code>this_host</code> to the real host name when 
<br>appropriate.
<br></td>
  </tr>
  <tr>
    <td><a name="916081"> </a><code><em>hostid
<br></em></code></td>
    <td><a name="916083"> </a>String returned by the <code>lmhostid</code> command 
<br>(case insensitive).
<br><a name="916170"> </a>Note that a hostid list on the SERVER line is not 
<br>supported. 
<br><a name="939427"> </a>Alternate special hostids can also be specified 
<br>here, including ANY, HOSTNAME=<code><em>host</em></code>, etc. 
<br>See <a href="all.htm#939969">Section 5.13, "Hostids for FLEXlm-
<br>Supported Machines,"</a> for information about 
<br>expected, special, and vendor-defined hostids.
<br><a name="939420"> </a><strong>WARNING</strong>: If the INTERNET hostid is used on 
<br>the SERVER line, wildcards should not be 
<br>allowed in the IP address. If wildcards are used, 
<br>the customer could easily start license managers 
<br>on more than one node and obtain "extra" 
<br>licenses.
<br></td>
  </tr>
  <tr>
    <td><a name="916085"> </a><code><em>port
<br></em></code></td>
    <td><a name="916087"> </a>TCP port number to use. This can be edited by 
<br>the license administrator. If not specified, 
<br>FLEX<em>lm</em> will automatically use the next 
<br>available port number in the range 27000-27009. 
<br>Applications, when connecting to a server, try 
<br>all numbers in the range 27000-27009. The port 
<br>number is required if the license is for a three-
<br>server redundant license server, or if the vendor 
<br>daemon or clients are older than FLEX<em>lm</em> v6. 
<br>Using a port number in the range 27000-27009 
<br>is recommended when specifying a port number, 
<br>because v6 utilities and clients can then use 
<br><code>@</code><code><em>host</em></code> to find the server.
<br></td>
  </tr>
</table>




<p>
  <a name="916074"> </a>
</p>

  </dl>
</dl>
<h5>
  <a name="912198"> </a>See Also
</h5>

<ul>
  <li><a name="912202"> </a><a href="all.htm#939969">Section 5.13, "Hostids for FLEXlm-Supported Machines</a>"

  <li><a name="912206"> </a><a href="all.htm#940145">Section 5.13.2, "Special FLEXlm Hostids</a>"

</ul>

<h3>
  <a name="912209"> </a>5.3	 VENDOR Line
</h3>


<p>
  <a name="912210"> </a>The VENDOR line specifies the name and location of a vendor daemon, as well as the location of the end user's options file.
</p>


<p>
  <a name="912211"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Prior to FLEX<em>lm</em> v6, the VENDOR line was called a DAEMON line. DAEMON is still recognized, and DAEMON is required for <code>lmgrd</code>s and vendor daemons older than v6.</FONT><HR WIDTH=75%>

<dl>  <dl>
     <dt> <a name="912213"> </a><CODE>VENDOR <code><em>vendor</em></code> [<code><em>vendor_daemon_path</em></code>] \</CODE>
    <dl>
       <dt> <a name="916339"> </a><CODE>[[options=]<code><em>options_file_path</em></code>] [[port=]<code><em>port</em></code>]</CODE>

<p>
  <a name="916266"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="916345"> </a><code><em>vendor
<br></em></code></td>
    <td><a name="916347"> </a>Name of the vendor daemon used to serve at 
<br>least some feature(s) in the file.
<br></td>
  </tr>
  <tr>
    <td><a name="916349"> </a><code><em>vendor_daemon_path
<br></em></code></td>
    <td><a name="916351"> </a>Path to the executable for this daemon. If 
<br>blank, the <code>PATH</code> environment variable, plus 
<br>the current directory, is used by <code>lmgrd</code> to 
<br>find the daemon process to start. Prior to v6, 
<br>this path was required.
<br></td>
  </tr>
  <tr>
    <td><a name="916353"> </a><code><em>options_file_path
<br></em></code></td>
    <td><a name="916355"> </a>Path to the end-user options file for this 
<br>daemon.
<br><a name="916421"> </a>If unspecified, a v6+ vendor daemon will 
<br>look for a file called <code><em>vendor</em></code><code>.opt</code> (where 
<br><code><em>vendor</em></code> is the vendor daemon name) in the 
<br>same directory where the license file is 
<br>located. If found, this file is used as the end-
<br>user options file. Vendor daemons older than 
<br>v6 will not look for <code><em>vendor</em></code><code>.opt</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="916357"> </a><code><em>port
<br></em></code></td>
    <td><a name="916359"> </a>Vendor daemon port number. The default, if 
<br><code><em>port</em></code> is not specified, is chosen by the 
<br>system at runtime. Sites with Internet 
<br>firewalls need to specify the port number the 
<br>daemon uses. If a port number is specified 
<br>on the VENDOR line, there may be a delay 
<br>restarting the vendor daemon until all the 
<br>clients have closed their connections to the 
<br>vendor daemon.
<br></td>
  </tr>
</table>




    </dl>
  </dl>
</dl>
<h5>
  <a name="912219"> </a>UNIX Examples
</h5>

<dl>  <dl>
     <dt> <a name="912220"> </a><CODE>VENDOR xyzd</CODE>
     <dt> <a name="947305"> </a><CODE>VENDOR xyzd /etc/xyzd</CODE>
     <dt> <a name="912221"> </a><CODE>VENDOR xyzd /etc/xyzd options=/<code><em>a</em></code>/<code><em>b</em></code>/<code><em>c</em></code>/licenses/xyzd.opts</CODE>
  </dl>
</dl>
<h5>
  <a name="912223"> </a>Windows Examples
</h5>

<dl>  <dl>
     <dt> <a name="912224"> </a><CODE>VENDOR xyzd C:\Windows\system\xyzd.exe</CODE>
     <dt> <a name="912225"> </a><CODE>VENDOR xyzd C:\Windows\system\xyzd.exe \</CODE>
    <dl>
       <dt> <a name="947313"> </a><CODE>options=C:\licenses\xyzd.opts</CODE>
    </dl>
  </dl>
</dl>
<h3>
  <a name="912227"> </a>5.4	 USE_SERVER Line
</h3>


<p>
  <a name="916527"> </a>USE_SERVER takes no arguments and has no impact on the server. When the client application sees a USE_SERVER line, it ignores everything in the license file except the preceding SERVER lines. In effect, USE_SERVER forces the application to behave as though <code>LM_LICENSE_FILE</code> were set to <code><em>port</em></code><code>@</code><code><em>host</em></code> or <code>@</code><code><em>host</em></code>. USE_SERVER is recommended because it improves performance when a license server is used.
</p>


<p>
  <a name="916525"> </a>The advantages to USE_SERVER are that the application's license file:
</p>

<ul>
  <li><a name="912229"> </a>Does not need to match the one the server uses

  <li><a name="912230"> </a>Requires only SERVER and USE_SERVER lines

</ul>

<h3>
  <a name="912235"> </a>5.5	 FEATURE or INCREMENT Lines
</h3>


<p>
  <a name="912236"> </a>A FEATURE line describes the license to use a product. An INCREMENT line can be used in place of a FEATURE line, as well as to incrementally add licenses to a prior FEATURE or INCREMENT line in the license file.
</p>


<p>
  <a name="912237"> </a>If the vendor daemon has ls_use_all_feature_lines set in <code>lsvendor.c</code>, then FEATURE lines function as INCREMENT lines, and the behavior of a FEATURE line is unavailable to that application. GLOBEtrotter Software strongly discourages the use of ls_use_all_feature_lines.
</p>


<p>
  <a name="912241"> </a>Only one FEATURE line for a given feature will be processed by the vendor daemon. If you want to have additional copies of the same feature (for example, to have multiple node-locked, counted features), then you must use multiple INCREMENT lines. INCREMENT lines form license groups, or <em>pools</em>, based on the feature name, version, node-lock hostid, USER_BASED, HOST_BASED, and CAPACITY fields. If two lines differ by any of these fields, they are counted separately in separate pools. A FEATURE line does not give an additional number of licenses, whereas an INCREMENT line always gives an additional number of licenses.
</p>


<p>
  <a name="912242"> </a>There are two formats for FEATURE; pre-v3.0 and current. The old format is still understood and correct with new clients and servers, but the new format is more flexible.
</p>


<p>
  <a name="917031"> </a>The current syntax of FEATURE and INCREMENT lines (FLEX<em>lm</em> v7.2) is:
</p>

<dl>  <dl>
     <dt> <a name="912252"> </a><CODE>FEATURE|INCREMENT <code><em>feature</em></code> <code><em>vendor</em></code> \</CODE>
    <dl>
       <dt> <a name="916659"> </a><CODE><code><em>feat_version</em></code> <code><em>exp_date</em></code> <code><em>num_lic</em></code> [options...] \ </CODE>
       <dt> <a name="916679"> </a><CODE>SIGN=<code><em>sign</em></code></CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="938989"> </a>The optional <code><em>keyword</em></code><code>=</code><code><em>value</em></code> pairs must appear after all required fields, but can appear in any order. For optional pairs, if <code><em>keyword</em></code> is lowercase, its value can be modified and the license will remain valid.
</p>


<h4>
  <a name="916789"> </a>5.5.1	 Feature Name
</h4>


<p>
  <a name="916802"> </a><code><em>feature</em></code> is the name given to the feature by the vendor. Legal feature names in FLEX<em>lm</em> must contain only letters, numbers, and underscore characters.
</p>


<h4>
  <a name="916823"> </a>5.5.2	 Vendor Daemon Name
</h4>


<p>
  <a name="916828"> </a><code><em>vendor</em></code> is the vendor daemon name from a VENDOR line. This vendor daemon serves this <code><em>feature</em></code>.
</p>


<h4>
  <a name="938963"> </a>5.5.3	 Feature Version
</h4>


<p>
  <a name="938964"> </a>The <code><em>feat_version</em></code> is the latest (highest-numbered) version of this <code><em>feature</em></code> that is supported by this license file. The version is in floating point format, with a ten character maximum.
</p>


<h4>
  <a name="916862"> </a>5.5.4	 Expiration Date
</h4>


<p>
  <a name="916867"> </a><code><em>exp_date</em></code> is the expiration date of the feature in the format: 
</p>

<dl>  <dl>
     <dt> <a name="916875"> </a><CODE>{dd-mmm-yyyy | permanent}</CODE>
  </dl>
</dl>
<p>
  <a name="916879"> </a>For example, <code>22-mar-2005</code>. For no expiration, use "permanent," or an expiration date with the year as 0, e.g., 1-jan-0. Two-digit years are assumed to be 19xx and are valid only up till 1999. For years 2000 and later, you must use four digits. 1-jan-0 = 1-jan-00 = 1-jan-0000 = permanent. FLEX<em>lm</em> fully supports dates beyond 2000. Prior to v6, the keyword "permanent" was not recognized.
</p>


<h4>
  <a name="916912"> </a>5.5.5	 Number of Licenses
</h4>


<p>
  <a name="916917"> </a>Number of licenses for this feature. Use "uncounted" or 0, for unlimited use of node-locked licenses. Prior to v6, the keyword "uncounted" was not recognized.
</p>


<h4>
  <a name="912272"> </a>5.5.6	 Signature
</h4>


<p>
  <a name="916948"> </a>Signature for this FEATURE line. The signature is produced by <font  face="Arial" size="2">lc_cryptstr()</font> in <code>lmcrypt</code> or <code>makekey</code>, or a vendor-defined routine. The signature is from 12-120 characters and is preceded by SIGN=. When using <code>lmcrypt</code>, put <code>SIGN=0</code> at the end of each FEATURE line, and <code>lmcrypt</code> will replace the <code>0</code> with the correct signature.
</p>


<h4>
  <a name="917274"> </a>5.5.7	 HOSTID
</h4>

<dl>  <dl>
     <dt> <a name="917567"> </a><CODE>HOSTID="<code><em>hostid1</em></code> <code><em>hostid2</em></code> ... <code><em>hostidn</em></code>"</CODE>
  </dl>
</dl>
<p>
  <a name="917563"> </a>Optional field. Case-insensitive strings returned by <code>lmhostid</code>. Use if this feature is to be bound to a particular host or hosts, whether its use is counted or not. If the license is uncounted, then this field is required. If hostid is DEMO, ANY, or ID=, the license is valid on any system. If DEMO, the application can determine this is a demo license by calling <font  face="Arial" size="2">lc_auth_data()</font> and noting the hostid type. All other <em>special</em> hostids are supported: INTERNET=<code><em>###.###.###.###</em></code>, etc. This can be a list of hostids using a space separator and quotes, e.g.:
</p>

<dl>  <dl>
     <dt> <a name="917573"> </a><CODE>HOSTID="12345678 FLEXID=876321 HOSTNAME=joe"</CODE>
  </dl>
</dl>
<p>
  <a name="917078"> </a>If a list of hostids is used, the license is granted if the client is on any one of the hostids in the list. See <a href="all.htm#939969">Section 5.13, "Hostids for FLEXlm-Supported Machines,"</a> for information about expected, special, and vendor-defined hostids.
</p>


<h4>
  <a name="917109"> </a>5.5.8	 CAPACITY
</h4>

<dl>  <dl>
     <dt> <a name="917116"> </a><CODE>CAPACITY</CODE>
  </dl>
</dl>
<p>
  <a name="917588"> </a>Optional field. This is used in conjunction with the LM_A_CAPACITY attribute to <font  face="Arial" size="2">lc_set_attr()</font>, available in the FLEXible API. The most common purpose of CAPACITY is to charge more for a more powerful system. For example, with CAPACITY, you could automatically check out more licenses on a UNIX system than on a PC, thereby effectively charging more for the more powerful system. CAPACITY is a checkout multiplier--if <font  face="Arial" size="2">lc_checkout()</font> requests 1 license, and LM_A_CAPACITY is set to 3, three licenses will be checked out. CAPACITY is set by adding the CAPACITY keyword to the FEATURE line and setting LM_A_CAPACITY in the application with:
</p>

<dl>  <dl>
     <dt> <a name="917117"> </a><CODE>lc_set_attr(<code><em>job</em></code>,LM_A_CAPACITY,(LM_A_VAL_TYPE)<code><em>i</em></code>);</CODE>
  </dl>
</dl>
<p>
  <a name="917118"> </a>If CAPACITY is missing from the FEATURE line, the attribute setting in the code will have no effect. Similarly, if CAPACITY is on the FEATURE line, but there is no call to <font  face="Arial" size="2">lc_set_attr(</font><code>...LM_A_CAPACITY...</code><font  face="Arial" size="2">)</font>, it will have no effect.
</p>


<p>
  <a name="917114"> </a>The attribute must be set before the first connection to the server (usually <font  face="Arial" size="2">lc_checkout()</font>) and cannot be reset once set. If an INCREMENT appears where some licenses are CAPACITY and some are not, the vendor daemon tracks these in separate license pools.
</p>


<h4>
  <a name="917163"> </a>5.5.9	 DUP_GROUP
</h4>

<dl>  <dl>
     <dt> <a name="917170"> </a><CODE>DUP_GROUP=NONE|SITE|[UHDV]</CODE>
  </dl>
</dl>
<p>
  <a name="917570"> </a>Optional field. You can specify the duplicate grouping (license sharing) parameter in the license in FLEX<em>lm</em> v4.0 or later. If DUP_GROUP= is specified in the license, this parameter overrides the <code><em>dup_group</em></code> parameter in the <font  face="Arial" size="2">lc_checkout()</font> call. If not specified in the license, the <code><em>dup_group</em></code> parameter from <font  face="Arial" size="2">lc_checkout()</font> will be used. The syntax is:
</p>

<dl>  <dl>
     <dt> <a name="917174"> </a><CODE>DUP_GROUP=NONE|SITE|[UHDV]</CODE>
    <dl>
       <dt> <a name="917175"> </a><CODE>U = DUP_USER</CODE>
       <dt> <a name="917176"> </a><CODE>H = DUP_HOST</CODE>
       <dt> <a name="917177"> </a><CODE>D = DUP_DISPLAY</CODE>
       <dt> <a name="917178"> </a><CODE>V = DUP_VENDOR_DEF</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="917168"> </a>Any combination of UHDV is allowed, and the DUP_MASK is the OR of the combination. For example "DUP_GROUP=UHD" means the duplicate grouping is (DUP_USER | DUP_HOST | DUP_DISPLAY), so a user on the same host and display will have additional uses of a feature not consume additional licenses.
</p>


<h4>
  <a name="917223"> </a>5.5.10	 HOST_BASED
</h4>

<dl>  <dl>
     <dt> <a name="917237"> </a><CODE>HOST_BASED[=<code><em>n</em></code>]</CODE>
  </dl>
</dl>
<p>
  <a name="917599"> </a>Optional field. If HOST_BASED appears, then licenses can be used only by hosts INCLUDEd for this feature in the end-user options file. The purpose is to limit the use to a particular number of hosts, but allow the end user to determine which hosts. If <code>=</code><code><em>n</em></code> is specified, then the number of hosts which can be INCLUDEd is limited to <code><em>n</em></code>. Otherwise, the limit is the <code><em>num_lic</em></code> field. If an INCREMENT appears where some licenses are HOST_BASED and some are not, the vendor daemon tracks these in separate license pools.
</p>


<h4>
  <a name="917270"> </a>5.5.11	 ISSUED
</h4>

<dl>  <dl>
     <dt> <a name="917299"> </a><CODE>ISSUED=<code><em>dd</em></code>-<code><em>mmm</em></code>-<code><em>yyyy</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="917606"> </a>Optional field. Date that the license was issued. Can be used in conjunction with SUPERSEDE.
</p>


<h4>
  <a name="912309"> </a>5.5.12	 ISSUER
</h4>

<dl>  <dl>
     <dt> <a name="917315"> </a><CODE>ISSUER="..."</CODE>
  </dl>
</dl>
<p>
  <a name="917621"> </a>Optional field. Issuer of the license.
</p>


<h4>
  <a name="917319"> </a>5.5.13	 MINIMUM
</h4>

<dl>  <dl>
     <dt> <a name="917333"> </a><CODE>MINIMUM=<code><em>n</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="917625"> </a>Optional field. If in <font  face="Arial" size="2">lc_checkout(</font><code>...</code><code><em>num_lic</em></code><code>...</code><font  face="Arial" size="2">)</font>, <code><em>num_lic</em></code> is less than <code><em>n</em></code>, then the server will checkout <code><em>n</em></code> licenses.
</p>


<h4>
  <a name="917373"> </a>5.5.14	 NOTICE
</h4>

<dl>  <dl>
     <dt> <a name="917377"> </a><CODE>NOTICE="..."</CODE>
  </dl>
</dl>
<p>
  <a name="917634"> </a>Optional field. A field for intellectual property notices.
</p>


<h4>
  <a name="912316"> </a>5.5.15	 OVERDRAFT
</h4>

<dl>  <dl>
     <dt> <a name="917394"> </a><CODE>OVERDRAFT=<code><em>n</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="917640"> </a>Optional field. The OVERDRAFT policy allows you to specify a number of additional licenses which your end user will be allowed to use, in addition to the licenses they have purchased. This is useful if you want to allow your customers to not be denied service when in a "temporary overdraft" state. Usage above the licensed limit will be reported by the SAM<em>report</em> reporting tool. In addition, you can determine if the user is in an overdraft condition by calling <font  face="Arial" size="2">lc_get_attr(</font><code><em>job</em></code><code>, LM_A_VD_FEATURE_INFO, ...</code><font  face="Arial" size="2">)</font>. The returned structure has at least three members of interest: <code>lic_in_use</code>, <code>lic_avail</code>, and <code>overdraft</code>. If <code>lic_in_use</code> &gt; <code>lic_avail</code> - <code>overdraft</code>, then you are in an "overdraft state."
</p>


<h4>
  <a name="912323"> </a>5.5.16	 PLATFORMS
</h4>

<dl>  <dl>
     <dt> <a name="917466"> </a><CODE>PLATFORMS="<code><em>plat1</em></code> ... <code><em>platn</em></code>"</CODE>
  </dl>
</dl>
<p>
  <a name="917652"> </a>Optional field. This allows you to restrict usage to particular hardware platforms. The platforms are defined as the same platforms that are used to license FLEX<em>lm</em> itself: <code>sun4_u5</code>, <code>i86_n3</code>, etc. The names can be found in <a href="all.htm#885457">Chapter&nbsp;11, "UNIX Platform-Specific Notes,"</a> and in <a href="all.htm#885653">Chapter&nbsp;12, "Windows Platform-Specific Notes</a>." Note that the platform name can be overridden with:
</p>

<dl>  <dl>
     <dt> <a name="917470"> </a><CODE>lc_set_attr(<code><em>job</em></code>, LM_A_PLATFORM_OVERRIDE, (LM_A_VAL_TYPE)<code><em>str</em></code>);</CODE>
  </dl>
</dl>
<p>
  <a name="917471"> </a>Note that the trailing digit in the platform name is ignored, and can be optionally left off in the name.
</p>


<p>
  <a name="917522"> </a>If the platform list differs in any way for two INCREMENT lines for the same feature name, they're are pooled and counted separately.
</p>


<p>
  <a name="917473"> </a>Examples:
</p>

<dl>  <dl>
     <dt> <a name="917474"> </a><CODE>FEATURE f1 ... PLATFORMS=sun4_u5</CODE>
     <dt> <a name="917475"> </a><CODE>INCREMENT f2 ... 1 PLATFORMS="i86_n3 hp700_u9"</CODE>
     <dt> <a name="917476"> </a><CODE>INCREMENT f2 ... 1 PLATFORMS="i86_n3"</CODE>
  </dl>
</dl>
<p>
  <a name="917477"> </a>Feature "f1" can be used on any Sparc station running Solaris.
</p>


<p>
  <a name="917478"> </a>Feature "f2" can be used on a PC running Windows or an HP machine. There is one license that can be shared between all Windows and HP systems and one license just for Windows. That is, at most one "f2" can be used on the HP systems, and at most two "f2"s can be used on Windows systems.
</p>


<p>
  <a name="917461"> </a>If the checkout fails because it's on the wrong platform, the error returned is LM_PLATNOTLIC: "This platform not authorized by license."
</p>


<h4>
  <a name="917784"> </a>5.5.17	 SN
</h4>

<dl>  <dl>
     <dt> <a name="917788"> </a><CODE>SN=<code><em>serial_num</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="917796"> </a>Optional field. Useful for differentiating otherwise identical INCREMENT lines. Its only use by FLEX<em>lm</em> is to be encrypted in the signature. Similar to HOSTID.
</p>


<h4>
  <a name="917826"> </a>5.5.18	 START
</h4>

<dl>  <dl>
     <dt> <a name="917831"> </a><CODE>START=<code><em>dd</em></code>-<code><em>mmm</em></code>-<code><em>yyyy</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="917835"> </a>Optional field. Feature start date.
</p>


<h4>
  <a name="917850"> </a>5.5.19	 SUITE_DUP_GROUP
</h4>

<dl>  <dl>
     <dt> <a name="917855"> </a><CODE>SUITE_DUP_GROUP=NONE|SITE|[UHDV]</CODE>
  </dl>
</dl>
<p>
  <a name="917863"> </a>Optional field. Similar to DUP_GROUP, but affects only the enabling FEATURE line for a package suite. Note: If SUITE_DUP_GROUP is not specified, the parent will have the same duplicate grouping as the components.
</p>


<h4>
  <a name="912348"> </a>5.5.20	 SUPERSEDE
</h4>

<dl>  <dl>
     <dt> <a name="917880"> </a><CODE>SUPERSEDE[="<code><em>feat1</em></code> ... <code><em>featn"</em></code>]</CODE>
  </dl>
</dl>
<p>
  <a name="917896"> </a>Optional field. Replaces existing lines in a license file. Without the optional list of features, allows vendors to sum up a set of INCREMENT lines in a single, new FEATURE (or INCREMENT) line, which supersedes all INCREMENT lines for the same feature name with previous START or<em> </em>ISSUED dates. With the optional list of features, it replaces all previously issued lines for <code><em>feat1</em></code> through<em> </em><code><em>featn</em></code>.
</p>


<p>
  <a name="917897"> </a>Note that the start date is the one field which is not readable in the license file and is part of the signature. 
</p>


<p>
  <a name="917899"> </a>The ISSUED field makes this more readable (e.g., ISSUED=1-jan-2005). If the ISSUED date is set, then SUPERSEDE uses it, otherwise it uses the start date.
</p>


<p>
  <a name="917900"> </a>For example
</p>

<dl>  <dl>
     <dt> <a name="917901"> </a><CODE>INCREMENT f1 ... 1 ... ISSUED=1-jan-2005</CODE>
     <dt> <a name="917902"> </a><CODE>INCREMENT f1 ... 4 ... SUPERSEDE ISSUED=1-jan-2007</CODE>
  </dl>
</dl>
<p>
  <a name="917906"> </a>The second line supersedes the first, and causes FLEX<em>lm</em> to ignore the first line.
</p>

<dl>  <dl>
     <dt> <a name="917907"> </a><CODE>FEATURE f1 ... 1 ... ISSUED=1-jan-2003</CODE>
     <dt> <a name="917908"> </a><CODE>FEATURE f2 ... 1 ... ISSUED=1-jan-2003</CODE>
     <dt> <a name="917909"> </a><CODE>FEATURE f3 ... 4 ... SUPERSEDE="f1 f2" ISSUED=2-jan-2003</CODE>
  </dl>
</dl>
<p>
  <a name="917891"> </a>"f3" supersedes "f1" and "f2" and causes FLEX<em>lm</em> to support only "f3."
</p>


<h4>
  <a name="912369"> </a>5.5.21	 USER_BASED
</h4>

<dl>  <dl>
     <dt> <a name="917994"> </a><CODE>USER_BASED[=<code><em>n</em></code>]</CODE>
  </dl>
</dl>
<p>
  <a name="918002"> </a>Optional field. If USER_BASED appears, then licenses can only be used by users INCLUDEd for this feature in the end-user options file. The purpose is to limit the use to a particular number of users, but allow the end user to determine which users. If <code>=</code><code><em>n</em></code> is specified, then the number of users which can be INCLUDEd is limited to <code><em>n</em></code>. Otherwise, the limit is the <code><em>num_lic</em></code> field. If an INCREMENT appears where some licenses are USER_BASED and some are not, the vendor daemon tracks these in separate license pools.
</p>


<h4>
  <a name="912371"> </a>5.5.22	 VENDOR_STRING
</h4>

<dl>  <dl>
     <dt> <a name="918042"> </a><CODE>VENDOR_STRING="..."</CODE>
  </dl>
</dl>
<p>
  <a name="918046"> </a>Optional field. Vendor-defined license data. If checkout is to be conditioned by what's in the vendor string, then LM_A_CHECKOUTFILTER is the best way to do this. If the VENDOR_STRING is set, you will probably also need to set ls_compare_vendor_* in <code>lsvendor.c</code>. 
</p>


<h5>
  <a name="947321"> </a>See Also
</h5>

<ul>
  <li><a name="947322"> </a><a href="all.htm#882968">Section 4.5, "LM_A_CHECKOUTFILTER</a>" 

  <li><a name="947329"> </a><a href="all.htm#884841">Section 9.2.4, "ls_compare_vendor_on_increment and ls_compare_vendor_on_upgrade</a>"

</ul>

<h4>
  <a name="912377"> </a>5.5.23	 asset_info
</h4>

<dl>  <dl>
     <dt> <a name="918074"> </a><CODE>asset_info="..."</CODE>
  </dl>
</dl>
<p>
  <a name="918078"> </a>Optional field. Additional information provided by the software end user's license administrator for asset management. Not encrypted into the feature's signature or checksum.
</p>


<h4>
  <a name="912379"> </a>5.5.24	 ck
</h4>

<dl>  <dl>
     <dt> <a name="918105"> </a><CODE>ck=<code><em>nnn</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="918112"> </a>Optional field. A checksum, useful with the <code>lmcksum</code> utility, which will verify that the license has been entered correctly by the license administrator. When using <code>lmcrypt</code>, put <code>ck=0</code> on each FEATURE line, and <code>lmcrypt</code> will replace the <code>0</code> with the correct checksum. Not encrypted. 
</p>


<h4>
  <a name="918159"> </a>5.5.25	 dist_info
</h4>

<dl>  <dl>
     <dt> <a name="918160"> </a><CODE>dist_info="..."</CODE>
  </dl>
</dl>
<p>
  <a name="918161"> </a>Optional field. Additional information provided by the software distributor. Not encrypted into the feature's signature or checksum.
</p>


<h4>
  <a name="912383"> </a>5.5.26	 user_info
</h4>

<dl>  <dl>
     <dt> <a name="918183"> </a><CODE>user_info="..."</CODE>
  </dl>
</dl>
<p>
  <a name="918187"> </a>Optional field. Additional information provided by the software end user's license administrator. Not encrypted into the feature's signature or checksum.
</p>


<h4>
  <a name="912385"> </a>5.5.27	 vendor_info
</h4>

<dl>  <dl>
     <dt> <a name="918209"> </a><CODE>vendor_info="..."</CODE>
  </dl>
</dl>
<p>
  <a name="918213"> </a>Optional field. Additional information provided by the software vendor. Not encrypted into the feature's signature or checksum.
</p>


<h4>
  <a name="912386"> </a>5.5.28	 FEATURE/INCREMENT Examples
</h4>


<p>
  <a name="912387"> </a>To illustrate INCREMENT, the two feature lines:
</p>

<dl>  <dl>
     <dt> <a name="912388"> </a><CODE>FEATURE f1 demo 1.0 permanent 4 ....</CODE>
     <dt> <a name="912389"> </a><CODE>FEATURE f1 demo 2.0 permanent 5 ....</CODE>
  </dl>
</dl>
<p>
  <a name="912390"> </a>would only result in four licenses for v1.0 <em>or</em> five licenses for v2.0, depending on their order in the file, whereas:
</p>

<dl>  <dl>
     <dt> <a name="912391"> </a><CODE>INCREMENT f1 demo 1.0 permanent 4 ....</CODE>
     <dt> <a name="912392"> </a><CODE>INCREMENT f1 demo 2.0 permanent 5 ....</CODE>
  </dl>
</dl>
<p>
  <a name="912393"> </a>would result in four licenses for v1.0 <em>and</em> five licenses for v1+ being available, giving a total of nine licenses for "f1."
</p>


<p>
  <a name="912394"> </a>To illustrate counted vs. uncounted licenses, the following FEATURE line:
</p>

<dl>  <dl>
     <dt> <a name="912395"> </a><CODE>FEATURE f1 demo 1.0 1-jan-2001 uncounted HOSTID=DEMO \</CODE>
    <dl>
       <dt> <a name="918259"> </a><CODE>SIGN=123456789012</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="939165"> </a>This feature has unlimited usage on any hostid, requires no license servers (no SERVER or VENDOR lines) and is therefore a complete license file by itself. This FEATURE line also happens to be an expiring license and will not allow use of the FEATURE after 1-jan-2005.
</p>


<p>
  <a name="939166"> </a>In contrast the following FEATURE line requires a vendor daemon named "demo" (and SERVER and VENDOR lines as well):
</p>

<dl>  <dl>
     <dt> <a name="912398"> </a><CODE>FEATURE f1 demo 1.0 permanent 5 HOSTID=INTERNET=195.186.*.* \</CODE>
    <dl>
       <dt> <a name="912399"> </a><CODE>SIGN=123456789012</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="912400"> </a>and is limited to five users on any host with an Internet IP address matching 195.186.*.*, and it never expires. 
</p>


<h5>
  <a name="912401"> </a>See Also
</h5>

<ul>
  <li><a name="946046"> </a><a href="all.htm#940145">Section 5.13.2, "Special FLEXlm Hostids</a>"

  <li><a name="946050"> </a><a href="allApp.htm#941062">Section E.3.10, "ls_use_all_feature_lines</a>"

  <li><a name="946053"> </a><a href="all.htm#884841">Section 9.2.4, "ls_compare_vendor_on_increment and ls_compare_vendor_on_upgrade</a>"

  <li><a name="912413"> </a><a href="allApp.htm#887012">Section E.2.2, "LM_A_CRYPT_CASE_SENSITIVE</a>"

</ul>

<h3>
  <a name="912420"> </a>5.6	 UPGRADE Lines
</h3>

<dl>  <dl>
     <dt> <a name="912421"> </a><CODE>UPGRADE <code><em>feature</em></code> <code><em>vendor</em></code> <code><em>from_feat_version</em></code> <code><em>to_feat_version</em></code> \</CODE>
    <dl>
       <dt> <a name="918305"> </a><CODE><code><em>exp_date</em></code> <code><em>num_lic</em></code> [options ... ] SIGN=<code><em>sign </em></code></CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="912422"> </a>All the data is the same as for a FEATURE or INCREMENT line, with the addition of the <code><em>from_feat_version</em></code> field. An UPGRADE line removes up to the number of licenses specified from any old version (&gt;= <code><em>from_feat_version</em></code>) and creates a new version with that same number of licenses.
</p>


<p>
  <a name="912423"> </a>For example, the two lines:
</p>

<dl>  <dl>
     <dt> <a name="912424"> </a><CODE>INCREMENT f1 demo 1.0 1-jan-2005 5 SIGN=9BFAC03164ED ck=3</CODE>
     <dt> <a name="912425"> </a><CODE>UPGRADE f1 demo 1.0 2.0 1-jan-2005 2 SIGN=1B9A30316207 ck=23</CODE>
  </dl>
</dl>
<p>
  <a name="912426"> </a>would result in three licenses of v1.0 of "f1" and two licenses of v2.0 of "f1."
</p>


<p>
  <a name="912427"> </a>UPGRADE will operate on the closest preceding FEATURE or INCREMENT line with a version number that is &gt;= <code><em>from_feat_version</em></code>, and <br>&lt; <code><em>to_feat_version</em></code>.
</p>


<h3>
  <a name="912429"> </a>5.7	 PACKAGE Lines
</h3>


<p>
  <a name="912430"> </a>The purpose of the PACKAGE line is to support two different licensing needs:
</p>

<ol type="1">
  <li><a name="912431"> </a>To license a product suite
  <li><a name="912432"> </a>To provide a more efficient way of distributing a license file that has a large number of features, which largely share the same FEATURE line arguments
</ol>

<p>
  <a name="918431"> </a>A PACKAGE line, by itself, does not license anything--it requires a matching FEATURE/INCREMENT line to license the whole package. A PACKAGE line can be shipped with a product, independent of any licenses. Later, you can issue one or more corresponding FEATURE/INCREMENT lines that will enable the package. It may be more convenient for everyone to keep PACKAGE lines in a separate file, which is supported as of FLEX<em>lm</em> v6. The path to the package file should be specified in the application to support this transparently, via LM_A_LICENSE_DEFAULT.
</p>

<dl>  <dl>
     <dt> <a name="918435"> </a><CODE>PACKAGE <code><em>package</em></code> <code><em>vendor</em></code> [<code><em>pkg_version</em></code>] COMPONENTS=<code><em>pkg_list </em></code>\</CODE>
    <dl>
       <dt> <a name="918437"> </a><CODE>[OPTIONS=SUITE] [SUPERSEDE[="<code><em>p1</em></code> <code><em>p2</em></code> ..."] ISSUED=<code><em>date</em></code>] SIGN=<code><em>pkg_sign</em></code></CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="918449"> </a>where:
</p>


<p>
  <a name="918455"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="918462"> </a><code><em>package
<br></em></code></td>
    <td><a name="918464"> </a>Name of the package. The corresponding 
<br>FEATURE/INCREMENT line must have the same 
<br>name.
<br></td>
  </tr>
  <tr>
    <td><a name="918466"> </a><code><em>vendor
<br></em></code></td>
    <td><a name="918468"> </a>Name of the vendor daemon that supports this 
<br>package (<code><em>VENDOR_NAME</em></code> in <code>lm_code.h</code>).
<br></td>
  </tr>
  <tr>
    <td><a name="918470"> </a><code><em>pkg_version
<br></em></code></td>
    <td><a name="918472"> </a>Optional version of the package. If specified, the 
<br>corresponding FEATURE/INCREMENT line must 
<br>have the same version. 
<br></td>
  </tr>
  <tr>
    <td><a name="918474"> </a><code><em>pkg_sign
<br></em></code></td>
    <td><a name="918476"> </a>Signature generated by one of the license 
<br>generators: <code>makepkg</code>, <code>lmcrypt</code>, or the vendor's 
<br>customized license generator.
<br></td>
  </tr>
  <tr>
    <td><a name="918478"> </a><code><em>pkg_list
<br></em></code></td>
    <td><a name="918521"> </a>A space-separated list of components. The format 
<br>of each component is:
<br><a name="918547"> </a><code><em>feature</em></code><code>[:</code><code><em>version</em></code><code>[:</code><code><em>num_lic</em></code><code>]]
<br></code><a name="918562"> </a>The package must consist of at least one 
<br>component. <code><em>version</em></code> and <code><em>num_lic</em></code> are optional, 
<br>and if left out, their values come from the 
<br>corresponding FEATURE/INCREMENT line. 
<br><code><em>num_lic</em></code> is only legal if OPTIONS=SUITE is not 
<br>set--in this case the resulting number of licenses 
<br>will be the count on the COMPONENTS line 
<br>multiplied by the number of licenses in the 
<br>FEATURE/INCREMENT line. Examples:
<br><a name="918597"> </a>COMPONENTS="comp1 comp2 comp3 comp4"
<br><a name="918480"> </a>COMPONENTS="comp1:1.5 comp2 comp3:2.0:4"	 
<br></td>
  </tr>
  <tr>
    <td><a name="918482"> </a><code>OPTIONS=SUITE
<br></code></td>
    <td><a name="918650"> </a>This is what distinguishes a package suite from a 
<br>package used to facilitate distribution.
<br><a name="918651"> </a>With <code>OPTIONS=SUITE</code>, the package FEATURE is 
<br>checked out in addition to the component feature 
<br>being checked out.
<br></td>
  </tr>
  <tr>
    <td><a name="948732"> </a><code>SUPERSEDE 
<br>[="</code><code><em>p1 p2</em></code><code> ..."]
<br></code></td>
    <td><a name="948734"> </a>Optional field, but if used, use with ISSUED date. 
<br>Replaces all PACKAGE lines for the same package 
<br>name with ISSUED dates previous to <code><em>dd</em></code><code>-</code><code><em>mmm</em></code><code>-
<br></code><code><em>yyyy</em></code>. 
<br></td>
  </tr>
  <tr>
    <td><a name="949326"> </a><code>ISSUED=<br>
<br></code><code><em>dd-mmm-yyyy
<br></em></code></td>
    <td><a name="949328"> </a>Optional field, but if used, use with SUPERSEDE. 
<br>Replaces all PACKAGE lines for the same package 
<br>name with ISSUED dates previous to <code><em>date</em></code>.
<br></td>
  </tr>
</table>




<p>
  <a name="918459"> </a>
</p>


<h5>
  <a name="912457"> </a>Examples
</h5>

<dl>  <dl>
     <dt> <a name="912459"> </a><CODE>PACKAGE office demo 1.0 COMPONENTS="comp1 comp2" \</CODE>
    <dl>
       <dt> <a name="912460"> </a><CODE>OPTIONS=SUITE SIGN=123456789ABC</CODE>
    </dl>
     <dt> <a name="912461"> </a><CODE>FEATURE office demo 1.0 permanent 5 SIGN=987654321FED</CODE>
  </dl>
  <dl>
     <dt> <a name="912462"> </a>This is a typical suite example. The user will have two features: "comp1" and "comp2," which are each version 1.0, with five non-expiring licenses available. When "comp1" or "comp2" is checked out, "office" will also be checked out. The vendor will most likely want to turn on duplicate grouping (either through the FEATURE line or <font  face="Arial" size="2">lc_checkout()</font>) so that the same user can use "comp1" and "comp2" while using only one license of the "office" FEATURE.
  </dl>
  <dl>
     <dt> <a name="912464"> </a><CODE>PACKAGE office demo 1.0 \</CODE>
    <dl>
       <dt> <a name="912465"> </a><CODE>COMPONENTS="comp1 comp2 comp3 comp4 comp5" \</CODE>
       <dt> <a name="948942"> </a><CODE>SIGN=271FA0F72594</CODE>
    </dl>
     <dt> <a name="912466"> </a><CODE>INCREMENT office demo 1.0 permanent 1 HOSTID=12345678 \</CODE>
    <dl>
       <dt> <a name="918740"> </a><CODE>SIGN=1B3147ADBC94</CODE>
    </dl>
     <dt> <a name="948978"> </a><CODE>INCREMENT office demo 1.0 permanent 1 HOSTID=87654321 \</CODE>
    <dl>
       <dt> <a name="948979"> </a><CODE>SIGN=68B82E55A417</CODE>
    </dl>
  </dl>
  <dl>
     <dt> <a name="948980"> </a>This is a good way to distribute multiple node-locked, counted licenses. Rather than requiring five INCREMENT lines per machine, only one INCREMENT line is required per machine, and the features are indicated in the PACKAGE line.
  </dl>
  <dl>
     <dt> <a name="912470"> </a><CODE>PACKAGE office demo 1.0 COMPONENTS="c1:1.5:2 c2:3.0:4 c3" \</CODE>
    <dl>
       <dt> <a name="918769"> </a><CODE>SIGN=A30483555898</CODE>
    </dl>
     <dt> <a name="912471"> </a><CODE>FEATURE office demo 1.0 1-jan-2005 3 ISSUER=dist \</CODE>
    <dl>
       <dt> <a name="918775"> </a><CODE>SIGN=2C817A5100D8</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="912472"> </a>The component versions override the feature versions, and the number of licenses available for any component is the product of the three licenses for "office" and the number of licenses of that component. The result is equivalent to:
</p>

<dl>  <dl>
     <dt> <a name="912473"> </a><CODE>FEATURE c1 demo 1.5 1-jan-2005 6 ISSUER=dist SIGN=7649CFAF16DB </CODE>
     <dt> <a name="912474"> </a><CODE>FEATURE c2 demo 3.0 1-jan-2005 12 ISSUER=dist SIGN=63992D55345B </CODE>
     <dt> <a name="912475"> </a><CODE>FEATURE c3 demo 1.0 1-jan-2005 3 ISSUER=dist SIGN=0D037EACC547 </CODE>
  </dl>
</dl>
<h5>
  <a name="912476"> </a>See Also
</h5>

<ul>
  <li><a name="912480"> </a><a href="all.htm#883083">Section 4.15, "LM_A_LICENSE_DEFAULT</a>"

</ul>

<h3>
  <a name="912503"> </a>5.8	 Comment Lines
</h3>


<p>
  <a name="912505"> </a>Comment lines can begin with <code>#</code>. Currently, all lines not beginning with a license file keyword are comment lines. Therefore, license files can be sent as email messages.
</p>


<h3>
  <a name="912507"> </a>5.9	 Line Continuation
</h3>


<p>
  <a name="912508"> </a>Lines can be continued with a "<code>\</code>" character.
</p>


<h3>
  <a name="939862"> </a>5.10	 Order of Lines in the License File
</h3>


<p>
  <a name="939869"> </a>In v7+, licenses are automatically sorted internally so that many of the most common license order problems are avoided. The sort is as follows: 
</p>

<ol type="1">
  <li><a name="939870"> </a>License file. Automatic sorting does not occur across files in a license file list.
  <li><a name="939871"> </a>Feature name.
  <li><a name="939872"> </a>FEATURE before INCREMENT.
  <li><a name="939873"> </a>Uncounted before counted.
  <li><a name="939874"> </a>Version, lower versions before higher versions.
  <li><a name="939875"> </a>Issued date, in reverse order, newest first. The date is taken from ISSUED= or START=.
  <li><a name="947337"> </a>Original order is otherwise maintained.
</ol>

<p>
  <a name="939876"> </a>This order can be overridden by adding the <code>sort=</code><code><em>nnn</em></code> attribute to any or all FEATURE/INCREMENT lines. The default is 100. Lines less than 100 are sorted before all lines without this attribute, and lines greater than 100 appear after all unmarked lines. All lines with the same number are sorted as they appear in the file. Therefore, to turn off automatic ordering, add <code>sort=</code><code><em>nnn</em></code>, where <code><em>nnn</em></code> is the same on all lines. Automatic ordering does not affect the order of features returned by <font  face="Arial" size="2">lc_feat_list()</font>.
</p>


<h3>
  <a name="912510"> </a>5.11	 Example License File
</h3>


<p>
  <a name="912511"> </a>This example illustrates the license file for single vendor with two features, and a set of three server nodes, any two of which must be running for the system to function.
</p>

<dl>  <dl>
     <dt> <a name="912512"> </a><CODE>SERVER pat 17003456 27009</CODE>
     <dt> <a name="912513"> </a><CODE>SERVER lee 17004355 27009</CODE>
     <dt> <a name="912514"> </a><CODE>SERVER terry 17007ea8 27009</CODE>
     <dt> <a name="912515"> </a><CODE>VENDOR demo</CODE>
     <dt> <a name="912516"> </a><CODE>FEATURE f1 demo 1.0 1-jan-2005 10 SIGN=1AEEFC8F9003</CODE>
     <dt> <a name="912517"> </a><CODE>FEATURE f2 demo 1.0 1-jan-2005 10 SIGN=0A7E8C4F561F</CODE>
  </dl>
</dl>
<p>
  <a name="940474"> </a>See the <em>FLEXlm Programmers Guide</em> and <code>examples/licenses</code> for examples of different types of license files.
</p>


<h3>
  <a name="912575"> </a>5.12	 Decimal Format Licenses
</h3>


<p>
  <a name="912576"> </a>Licenses can be represented in decimal format, to make license delivery easier for customers without access to email. Decimal has the advantage that it's simpler to type in, and often the licenses are much shorter. There are notable exceptions, however, which are explained below.
</p>


<p>
  <a name="912577"> </a>To generate a decimal format license, use the <code>-decimal</code> argument for <code>lmcrypt</code> or <code>makekey</code>.
</p>


<p>
  <a name="912578"> </a>To convert an existing license to decimal, use <code>lmcrypt -decimal</code>, or
</p>

<dl>  <dl>
     <dt> <a name="912580"> </a><CODE>lminstall -i <code><em>infile</em></code> -o <code><em>outfile</em></code> -odecimal</CODE>
  </dl>
</dl>
<p>
  <a name="912581"> </a>If needed, decimal lines can be mixed with readable format lines in a license file.
</p>


<p>
  <a name="912582"> </a>End users will normally use the <code>lminstall</code> command to install decimal format licenses. Note that <code>lminstall</code> converts the decimal lines to readable format. <code>lminstall</code> does not, however, know where your application expects to find the license file. You will need to make the license file location clear to the user.
</p>


<h4>
  <a name="912583"> </a>5.12.1	 Decimal Format Limitations
</h4>


<p>
  <a name="912584"> </a>PACKAGE lines cannot be represented in decimal format. These can be shipped separately, shipped in the license file in readable format, or (preferably) pre-installed as part of the normal application installation. PACKAGE lines are not available in decimal format because they would be excessively long, because they consist mostly of component names.
</p>


<p>
  <a name="912585"> </a>FEATURESET lines also cannot be represented in decimal format.
</p>


<p>
  <a name="912586"> </a>Very long FEATURE lines will be extremely long in decimal format. If a license is very long in the normal format (say &gt; 100 characters), it could be up to three times longer in decimal format, defeating the purpose of the format. 
</p>


<p>
  <a name="912587"> </a>Feature names that include " - " cannot be represented in decimal format. These are characters unsupported by FLEX<em>lm</em>, although some companies have used them.
</p>


<h4>
  <a name="912588"> </a>5.12.2	 Example Decimal Licenses:
</h4>


<h5>
  <a name="912589"> </a>Counted License:
</h5>

<dl>  <dl>
     <dt> <a name="912590"> </a><CODE>SERVER this_host 12345678</CODE>
     <dt> <a name="919012"> </a><CODE>VENDOR demo</CODE>
     <dt> <a name="919013"> </a><CODE>FEATURE f0 demo 1.0 permanent 1 SIGN=A7F6DFD8C65E</CODE>
     <dt> <a name="919014"> </a><CODE>FEATURE f1 demo 1.0 permanent 1 SIGN=AA8BD581EE65</CODE>
  </dl>
</dl>
<p>
  <a name="912591"> </a>Decimal format:
</p>

<dl>  <dl>
     <dt> <a name="912592"> </a><CODE>demo-f0-16641-00780-63392-57302-22216-00830-23011-18641-4 </CODE>
     <dt> <a name="919030"> </a><CODE>demo-f1-16641-00780-35488-34267-28385-54</CODE>
  </dl>
</dl>
<p>
  <a name="912593"> </a>Note that the first decimal line includes the SERVER/VENDOR information, and the second (and any subsequent lines) are much shorter.
</p>


<h5>
  <a name="912594"> </a>Demo License:
</h5>

<dl>  <dl>
     <dt> <a name="912595"> </a><CODE>FEATURE f2 demo 1.0 1-jun-2001 uncounted HOSTID=DEMO \</CODE>
    <dl>
       <dt> <a name="919034"> </a><CODE>SIGN=6E06CC47D2AB</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="912596"> </a>Decimal format:
</p>

<dl>  <dl>
     <dt> <a name="912597"> </a><CODE>demo-f2-23169-24979-00024-12403-47718-23830-1</CODE>
  </dl>
</dl>
<h4>
  <a name="912598"> </a>5.12.3	 Format of a Decimal License
</h4>


<p>
  <a name="912599"> </a>Decimal format licenses have a fixed format which is easy to recognize:
</p>

<dl>  <dl>
     <dt> <a name="912600"> </a><CODE><code><em>vendor</em></code>-<code><em>feature</em></code>-#####-#####-[...]</CODE>

<p>
  <a name="919050"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="919066"> </a><code><em>vendor
<br></em></code></td>
    <td><a name="919068"> </a>Vendor daemon name.
<br></td>
  </tr>
  <tr>
    <td><a name="919070"> </a><code><em>feature
<br></em></code></td>
    <td><a name="919072"> </a>Feature name.
<br></td>
  </tr>
  <tr>
    <td><a name="919074"> </a><code>#####
<br></code></td>
    <td><a name="919076"> </a>Groups of five decimal numbers (0-9) 
<br>separated by a hyphen. The last group may be 
<br>less than five digits.
<br></td>
  </tr>
</table>




<p>
  <a name="919063"> </a>
</p>

  </dl>
</dl>
<p>
  <a name="912604"> </a>The line includes a checksum, which can detect all single-digit errors and most multi-digit errors in lines that are typed incorrectly.
</p>


<h4>
  <a name="912605"> </a>5.12.4	 Hints on Using the Decimal Format
</h4>


<p>
  <a name="912606"> </a>There are some "tricks" that are used internally to make decimal lines shorter. Knowledge of these can be useful when designing FEATURE lines.
</p>


<h5>
  <a name="912607"> </a>Text in Optional Attributes
</h5>


<p>
  <a name="912608"> </a>Text in the optional feature attributes are normally three times longer in the decimal format than in the "normal" format. For example: VENDOR_STRING="limit 3" would require about 21 characters in the decimal version. There's a trick to making this shorter: If the text portion is a decimal or hex number, then it's stored compressed in the decimal version, and the conversion is about 1:1 instead of 1:3.
</p>


<p>
  <a name="912609"> </a>For example: VENDOR_STRING=12345 consumes about five characters in the decimal format. VENDOR_STRING=abcd (valid hex characters) will also consume about five characters in the decimal format. Knowing this, you might choose to "encode" information in the VENDOR_STRING in a numeric format. This enhancement only applies to numbers &lt;= 0xffffffff. For example, VENDOR_STRING=12345678901234 will require about 14*3 = 42 characters in the decimal format.
</p>


<p>
  <a name="912610"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Mixed-case hex characters will not be stored efficiently. VENDOR_STRING=abcD will take about twelve decimal characters, instead of five.</FONT><HR WIDTH=75%>


<h5>
  <a name="912611"> </a>Feature Names
</h5>


<p>
  <a name="912612"> </a>Avoid underscore "_ " in feature names; it's hard to distinguish from a hyphen " - ." For example:
</p>

<dl>  <dl>
     <dt> <a name="912613"> </a><CODE>demo-prod_1a-10449-31786-63556-56877-09398-10373-137</CODE>
  </dl>
</dl>
<p>
  <a name="912614"> </a>This is hard to read, and if the user mixes up the " - " and " _ ", the license will be invalid. Since you also can't use " - " in a feature name, this means that feature names won't have any kind of separator. Therefore, in the example, we suggest simply "prod1a."
</p>


<h5>
  <a name="912615"> </a>ck=
</h5>


<p>
  <a name="912616"> </a>Leave this optional attribute off. The decimal format has its own built-in checksum. This attribute will only make the decimal format longer.
</p>


<h5>
  <a name="912617"> </a>Expiration Dates
</h5>


<p>
  <a name="912618"> </a>For non-expiring licenses, use "permanent" or "1-jan-0" as the expiration date. Some older format, but still valid, expiration dates are not supported in the decimal format. For example: "3-mar-0" is functionally identical to "permanent," but because the decimal format supports only "permanent" or "1-jan-0," "3-mar-0" is unsupported. Dates farther in the future require many decimals to represent. Therefore 1-jan-9999 takes about 14 characters while "permanent" requires about 1. 
</p>


<h5>
  <a name="912619"> </a>See Also
</h5>

<ul>
  <li><a name="912625"> </a><code>lminstall</code> in the <em>FLEXlm End Users Guide</em>

</ul>

<h3>
  <a name="939969"> </a>5.13	 Hostids for FLEX<em>lm</em>-Supported Machines
</h3>


<p>
  <a name="939973"> </a>FLEX<em>lm</em> uses different machine identifications for different machine architectures. For example, all Sun Microsystems machines have a unique integer hostid, whereas all DEC machines do not. For this reason, the ethernet address is used on some machine architectures as the "Hostid". An ethernet address is a six-byte quantity with each byte specified as two hex digits. Specify all 12 hex digits when using an ethernet address as a hostid. For example, if the ethernet address is 8:0:20:0:5:ac, specify "0800200005AC" as the hostid.
</p>


<p>
  <a name="939975"> </a>Integer hostids (used on Sun, SGI, HP, etc.) are normally hexadecimal numbers. However, a license file can take a decimal number if the hostid has a "#" prefix. Certain systems, notably HP <code>uname</code> and SGI, return decimal numbers by default, and this can make license file distribution easier, since you don't have to convert to hex. Note that whenever a FLEX<em>lm</em> utility prints such a hostid, it always prints a hexadecimal number.
</p>


<p>
  <a name="939979"> </a>The default hostid for Windows systems is the ethernet address of the system. FLEX<em>lm</em> also supports several other hostids as well as hardware keys available from GLOBEtrotter Software.
</p>


<p>
  <a name="939993"> </a>The program <code>lmhostid</code> will print the exact hostid that FLEX<em>lm</em> expects to use on any given machine. See the following table of methods to obtain the hostid that FLEX<em>lm</em> requires for each machine architecture.
</p>


<h4>
  <a name="940000"> </a>5.13.1	 Expected FLEX<em>lm</em> Hostids
</h4>


<p>
  <a name="940118"> </a>

<table border="3">
  <caption>
<p>
  <a name="940003"> </a>
</p>

</caption>
  <tr>
    <th><a name="940011"> </a><strong>Hardware 
Platform
</strong></th>
    <th><a name="940013"> </a><strong>Hostid
</strong></th>
    <th><a name="940015"> </a><strong>Type this command on 
the license server:
</strong></th>
    <th><a name="940017"> </a><strong> Example
</strong></th>
  </tr>
  <tr>
    <td><a name="940019"> </a>AIX 
<br>(RS/6000, 
<br>PPC)
<br></td>
    <td><a name="940021"> </a>32-bit 
<br>hostid
<br></td>
    <td><a name="940023"> </a><code>uname -m</code> (returns 
<br>000276513100), then 
<br>remove last two digits, 
<br>and use remaining last 
<br>eight digits
<br></td>
    <td><a name="940025"> </a>02765131
<br></td>
  </tr>
  <tr>
    <td><a name="940027"> </a>DEC Alpha
<br></td>
    <td><a name="940029"> </a>ethernet 
<br>address
<br></td>
    <td><a name="940031"> </a><code>netstat -i
<br></code></td>
    <td><a name="940033"> </a> 080020005532
<br></td>
  </tr>
  <tr>
    <td colspan=1 rowspan=2><a name="940035"> </a>HP
<br></td>
    <td><a name="940037"> </a>32-bit 
<br>hostid
<br></td>
    <td><a name="940039"> </a><code>uname -i </code>and convert 
<br>to hex, or prepend with 
<br>#
<br></td>
    <td><a name="940041"> </a>778DA450 or 
<br>#2005771344
<br></td>
  </tr>
  <tr>
    <td><a name="940045"> </a>ethernet 
<br>address 
<br></td>
    <td><a name="940047"> </a><code>lanscan </code>(station 
<br>address without leading 
<br>"0x")
<br></td>
    <td><a name="940049"> </a>0000F0050185
<br></td>
  </tr>
  <tr>
    <td><a name="940051"> </a>Linux
<br></td>
    <td><a name="940053"> </a>ethernet 
<br>address
<br></td>
    <td><a name="940055"> </a><code>/sbin/ifconfig 
<br>eth0 </code>and remove 
<br>colons from HWaddr 
<br>00:40:05:16:E5:25
<br></td>
    <td><a name="940057"> </a>00400516E525
<br></td>
  </tr>
  <tr>
    <td><a name="940059"> </a>SCO
<br></td>
    <td><a name="940061"> </a>Hostid 
<br>String
<br></td>
    <td><a name="940063"> </a><code>uname -x </code>(Serial is 
<br>SCO00354), then prefix 
<br>with "ID_STRING="
<br></td>
    <td><a name="940065"> </a>ID_STRING=SCO00354
<br></td>
  </tr>
  <tr>
    <td><a name="940067"> </a>SGI
<br></td>
    <td><a name="940069"> </a>32-bit 
<br>hostid
<br></td>
    <td><a name="940071"> </a><code>/etc/sysinfo -s</code>, 
<br>convert to hex, or prefix 
<br># 
<br></td>
    <td><a name="940073"> </a>69064C3C or 
<br>#1762020412
<br></td>
  </tr>
  <tr>
    <td><a name="940075"> </a>SUN
<br></td>
    <td><a name="940077"> </a>32-bit 
<br>hostid
<br></td>
    <td><a name="940079"> </a><code>hostid
<br></code></td>
    <td><a name="940081"> </a>170a3472
<br></td>
  </tr>
  <tr>
    <td colspan=1 rowspan=4><a name="940083"> </a>Windows
<br></td>
    <td><a name="940085"> </a>ethernet 
<br>address
<br></td>
    <td><a name="940087"> </a><code>lmutil lmhostid
<br></code></td>
    <td><a name="946661"> </a>00B0A9DF9A32
<br></td>
  </tr>
  <tr>
    <td><a name="940093"> </a>Disk serial 
<br>number
<br></td>
    <td><a name="940095"> </a>DIR C: (look for 
<br>"Volume Serial Number 
<br>is", and remove "-")
<br></td>
    <td><a name="940097"> </a>DISK_SERIAL_NUM=<br>
<br>3e2e17fd
<br></td>
  </tr>
  <tr>
    <td><a name="940101"> </a>Dongle--
<br>parallel port 
<br>hardware 
<br>key
<br></td>
    <td><a name="940103"> </a><code>lmhostid -flexid
<br></code></td>
    <td><a name="940105"> </a>FLEXID=7-b28520b9
<br></td>
  </tr>
  <tr>
    <td><a name="940109"> </a>Pentium 
<br>III+ CPU, 
<br>V7.0d+ 
<br>only. Use 
<br>BIOS Setup 
<br>to enable.
<br></td>
    <td><a name="940111"> </a><code>lmhostid -cpu<br>
<br>lmhostid -cpu96
<br></code><a name="940112"> </a>(The 32-bit version is 
<br>the last nine characters 
<br>from the full id.)
<br></td>
    <td><a name="940114"> </a>9077-5D77-0002-57C8-<br>
<br>95D2-1D3D (96-bit)
<br><a name="940115"> </a>
<br><a name="940116"> </a>
<br><a name="940117"> </a>95D2-1D3D (32-bit)
<br></td>
  </tr>
</table>




<p>
  <a name="940119"> </a>
</p>


<h5>
  <a name="940120"> </a>See Also
</h5>

<ul>
  <li><a name="940128"> </a><a href="all.htm#881671">Section 3.16, "lc_free_hostid()</a>"

  <li><a name="940132"> </a><a href="allApp.htm#938201">Section E.1.1, "l_new_hostid()</a>"

  <li><a name="940136"> </a><a href="all.htm#939969">Section 5.13, "Hostids for FLEXlm-Supported Machines</a>"

  <li><a name="940140"> </a><a href="all.htm#940304">Section 5.13.4, "Intel Pentium III+ Hostid (HOSTID_INTEL)</a>"

</ul>

<h4>
  <a name="940145"> </a>5.13.2	 Special FLEX<em>lm</em> Hostids
</h4>


<p>
  <a name="940149"> </a>FLEX<em>lm</em> contains a number of "special" hostid types which apply to all platforms. These hostid types can be used on either a SERVER line or a FEATURE line, wherever a hostid is required. These are: 
</p>


<p>
  <a name="940201"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="940153"> </a>ANY
<br></td>
    <td><a name="940155"> </a>Locks the software to any node (i.e., 
<br>does not lock anything).
<br></td>
  </tr>
  <tr>
    <td><a name="940158"> </a>DEMO
<br></td>
    <td><a name="940160"> </a>Similar to ANY, but only for use with 
<br>uncounted FEATURE lines.
<br></td>
  </tr>
  <tr>
    <td><a name="940162"> </a>DISK_SERIAL_NUM=<code><em>SN
<br></em></code></td>
    <td><a name="940164"> </a>Locks the software to a PC with C drive 
<br>serial number <code><em>SN</em></code>. (Windows only). Use 
<br>this serial number as a hostid with 
<br>caution. Large companies often purchase 
<br>in bulk PCs which have cloned disks and 
<br>therefore identical disk serial numbers. 
<br>Also, sophisticated users have access to 
<br>third-party tools which can alter disk 
<br>serial numbers. It is relatively safe to use 
<br>this as a hostid with home users or 
<br>unsophisticated users at small 
<br>companies.
<br></td>
  </tr>
  <tr>
    <td><a name="940166"> </a>DISPLAY=<code><em>display
<br></em></code></td>
    <td><a name="940168"> </a>Locks the software to display <code><em>display</em></code>.
<br></td>
  </tr>
  <tr>
    <td><a name="940171"> </a>FLEXID=<code><em>SN</em></code> 
<br></td>
    <td><a name="940173"> </a>Locks the software to a PC with a 
<br>hardware key (dongle) of serial number 
<br><code><em>SN</em></code>. (Windows only).
<br></td>
  </tr>
  <tr>
    <td><a name="940175"> </a>HOSTNAME=<code><em>host
<br></em></code></td>
    <td><a name="940177"> </a>Locks the software to computer host 
<br>name <code><em>host</em></code>.
<br></td>
  </tr>
  <tr>
    <td><a name="940180"> </a>ID=<code><em>n
<br></em></code></td>
    <td><a name="940182"> </a>Functionally equivalent to the "ANY" 
<br>hostid--it will run on any node. The 
<br>difference is that the license is unique 
<br>and can be used to identify the customer. 
<br>This hostid can be used to lock the 
<br>license server (on the SERVER line) or 
<br>the client (on the 
<br>FEATURE/INCREMENT line). The 
<br>number can have dashes included for 
<br>readability--the dashes are ignored.
<br><a name="940183"> </a>Examples:
<br><a name="940184"> </a>ID=12345678 is the same as
<br><a name="940185"> </a>ID=1234-5678 is the same as
<br><a name="940186"> </a>ID=1-2-3-4-5-6-7-8
<br></td>
  </tr>
  <tr>
    <td><a name="940189"> </a>ID_STRING=<code><em>string
<br></em></code></td>
    <td><a name="940192"> </a>Used on SCO systems for hostid.
<br></td>
  </tr>
  <tr>
    <td><a name="940194"> </a>INTERNET=<br>
<br><code><em>###.###.###.###
<br></em></code></td>
    <td><a name="940196"> </a>Locks the software to an Internet IP 
<br>address, or group of IP addresses. 
<br>Wildcards are allowed. For example, 
<br>198.156.*.* means any host with a 
<br>matching internet IP address. The main 
<br>use is to limit usage access by subnet, 
<br>implying geographic area. For this 
<br>purpose, it would be used on the 
<br>FEATURE/INCREMENT line, as a 
<br>hostid lock.
<br></td>
  </tr>
  <tr>
    <td><a name="940198"> </a>USER=<code><em>user
<br></em></code></td>
    <td><a name="940200"> </a>Locks the software to user name <code><em>user</em></code>.
<br></td>
  </tr>
</table>




<p>
  <a name="940202"> </a>
</p>


<h5>
  <a name="940203"> </a>Examples
</h5>

<dl>  <dl>
     <dt> <a name="949068"> </a><CODE>FEATURE f1 demo 1.0 1-jan-2005 uncounted HOSTID=HOSTNAME=globes </CODE>
    <dl>
       <dt> <a name="949069"> </a><CODE>SIGN=AB28E0011DA1</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="949070"> </a>or
</p>

<dl>  <dl>
     <dt> <a name="940207"> </a><CODE>FEATURE f1 demo 1.0 1-jan-2005 uncounted HOSTID=USER=joe \</CODE>
    <dl>
       <dt> <a name="940208"> </a><CODE>SIGN=EB78201163B0</CODE>
    </dl>
  </dl>
</dl>
<h5>
  <a name="940209"> </a><strong>See Also</strong>
</h5>

<ul>
  <li><a name="940213"> </a><a href="all.htm#939969">Section 5.13, "Hostids for FLEXlm-Supported Machines</a>"

  <li><a name="940217"> </a><a href="all.htm#912235">Section 5.5, "FEATURE or INCREMENT Lines</a>"

  <li><a name="940221"> </a><a href="all.htm#912184">Section 5.2, "SERVER Lines</a>"

</ul>

<h4>
  <a name="940228"> </a>5.13.3	 Vendor-Defined Hostid Types
</h4>


<p>
  <a name="940232"> </a>If you are a C programmer and experienced with FLEX<em>lm</em>, you can use the FLEXible API to define your own hostid type. If you would like to discuss whether or not vendor-defined hostids are feasible for your application, you can contact GLOBEtrotter technical support. 
</p>


<p>
  <a name="950344"> </a>In the FLEX<em>lm</em> kit, we provide a sample C source file, <code>examples\vendor_hostid\vendor_hostid.c</code>, in which a fixed vendor-defined hostid is set up. In this section, you can use this file to run through a procedure for setting up a vendor-defined hostid. In a real situation, you would not use a fixed vendor-defined hostid, but would define and call a function that returns the hostid that you want to use. 
</p>


<p>
  <a name="951177"> </a>A vendor-defined hostid can be used on a SERVER or FEATURE line of a license file.
</p>


<h5>
  <a name="950388"> </a>Editing Source Files
</h5>


<p>
  <a name="950428"> </a>You must define your hostid type (for this example, we are using <code>vendor_hostid.c</code>), then make sure that the vendor daemon, FLEX<em>lm</em> license generators, and your client application can recognize and use your hostid type. Only <code>lmcrypt</code> and <code>makekey</code> can generate licenses with vendor-defined hostids; on Windows, you cannot use <code>genlic</code>. 
</p>

<ol type="1">
  <li><a name="950392"> </a>Make a copy of your FLEX<em>lm</em> production kit. Follow these instructions using the files in the duplicate kit.
  <li><a name="951219"> </a>Copy <code>examples\vendor_hostid\vendor_hostid.c</code> to the <code>machind</code> directory.
  <li><a name="951220"> </a>View the file and find the <code>#define</code> statements. See <code>lmclient.h</code> for <code>HOSTID</code> and <code>LM_VENDOR_HOSTID</code> definitions.
<dl>    <dl>
       <dt> <a name="951221"> </a><CODE>#include "lmclient.h"</CODE>
       <dt> <a name="950444"> </a><CODE>#include "lm_attr.h"</CODE>
       <dt> <a name="950445"> </a><CODE>#include "string.h"</CODE>
       <dt> <a name="950446"> </a><CODE></CODE>
       <dt> <a name="950447"> </a><CODE>extern LM_HANDLE *lm_job; /* This must be the current job! */</CODE>
       <dt> <a name="950448"> </a><CODE></CODE>
       <dt> <a name="950449"> </a><CODE>/* This example returns only 1 hostid */</CODE>
       <dt> <a name="950450"> </a><CODE>#define VENDEF_ID_TYPE HOSTID_VENDOR+1  </CODE>
       <dt> <a name="950451"> </a><CODE>#define VENDEF_ID_LABEL "VDH"</CODE>
       <dt> <a name="950452"> </a><CODE>#define VENDEF_ID "12345678"</CODE>
       <dt> <a name="950453"> </a><CODE></CODE>
       <dt> <a name="950454"> </a><CODE></CODE>
       <dt> <a name="950455"> </a><CODE>/*</CODE>
       <dt> <a name="950456"> </a><CODE> * x_flexlm_gethostid() - Callback to get vendor-defined hostid.</CODE>
       <dt> <a name="950457"> </a><CODE> *(Sorry about all the windows types for this function...)</CODE>
       <dt> <a name="950458"> </a><CODE> */</CODE>
       <dt> <a name="950459"> </a><CODE> </CODE>
       <dt> <a name="950460"> </a><CODE>HOSTID *</CODE>
       <dt> <a name="950461"> </a><CODE>#ifdef PC</CODE>
       <dt> <a name="950462"> </a><CODE>LM_CALLBACK_TYPE</CODE>
       <dt> <a name="950463"> </a><CODE>#endif /* PC */</CODE>
       <dt> <a name="950464"> </a><CODE>/*</CODE>
       <dt> <a name="950465"> </a><CODE> * IMPORTANT NOTE:  This function MUST call l_new_hostid() for</CODE>
       <dt> <a name="950466"> </a><CODE> *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a hostid struct on each call.</CODE>
       <dt> <a name="950467"> </a><CODE> *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If more than one hostid of a type is</CODE>
       <dt> <a name="950468"> </a><CODE> *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found, then call l_new_hostid for each </CODE>
       <dt> <a name="950469"> </a><CODE> *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and make into a list using the `next' field.</CODE>
       <dt> <a name="950470"> </a><CODE> */</CODE>
       <dt> <a name="950471"> </a><CODE></CODE>
       <dt> <a name="950472"> </a><CODE>x_flexlm_gethostid(idtype)</CODE>
       <dt> <a name="950473"> </a><CODE>short idtype;</CODE>
       <dt> <a name="950474"> </a><CODE>{</CODE>
       <dt> <a name="950475"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HOSTID *h = l_new_hostid();</CODE>
       <dt> <a name="950477"> </a><CODE></CODE>
       <dt> <a name="950567"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(h, 0, sizeof(HOSTID));</CODE>
       <dt> <a name="950478"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (idtype == VENDEF_ID_TYPE)</CODE>
       <dt> <a name="950479"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
       <dt> <a name="950480"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h-&gt;type = VENDEF_ID_TYPE;</CODE>
       <dt> <a name="950482"> </a><CODE></CODE>
       <dt> <a name="950586"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strncpy(h-&gt;id.vendor, VENDEF_ID, MAX_HOSTID_LEN);</CODE>
       <dt> <a name="950483"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h-&gt;id.vendor[MAX_HOSTID_LEN] = 0;</CODE>
       <dt> <a name="950484"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(h);</CODE>
       <dt> <a name="950485"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
       <dt> <a name="950486"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return((HOSTID *) NULL);</CODE>
       <dt> <a name="950487"> </a><CODE>}</CODE>
       <dt> <a name="950489"> </a><CODE></CODE>
       <dt> <a name="950620"> </a><CODE></CODE>
       <dt> <a name="950491"> </a><CODE></CODE>
       <dt> <a name="950623"> </a><CODE>void </CODE>
       <dt> <a name="950492"> </a><CODE>x_flexlm_newid(id)</CODE>
       <dt> <a name="950493"> </a><CODE></CODE>
       <dt> <a name="950494"> </a><CODE>HOSTID *id;</CODE>
       <dt> <a name="950495"> </a><CODE></CODE>
       <dt> <a name="950496"> </a><CODE>{</CODE>
       <dt> <a name="950497"> </a><CODE>&nbsp;&nbsp;LM_VENDOR_HOSTID h;</CODE>
       <dt> <a name="950498"> </a><CODE></CODE>
       <dt> <a name="950499"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;h, 0, sizeof (h));</CODE>
       <dt> <a name="950500"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.label = VENDEF_ID_LABEL;</CODE>
       <dt> <a name="950501"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.hostid_num = VENDEF_ID_TYPE;</CODE>
       <dt> <a name="950502"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.case_sensitive = 0;</CODE>
       <dt> <a name="950503"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.get_vendor_id = x_flexlm_gethostid;</CODE>
       <dt> <a name="950504"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lc_set_attr(lm_job, LM_A_VENDOR_ID_DECLARE,</CODE>
       <dt> <a name="950631"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(LM_A_VAL_TYPE) &amp;h))</CODE>
       <dt> <a name="950635"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror(lm_job, "LM_A_VENDOR_ID_DECLARE FAILED");</CODE>
       <dt> <a name="950506"> </a><CODE>}</CODE>
       <dt> <a name="950438"> </a><CODE></CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="950421"> </a>The <code>VENDEF_ID</code> assignment would not be needed in a real situation in which you had a function that returned your vendor-defined hostid. Close <code>vendor_hostid.c</code>.
  </dl>
  <li><a name="950696"> </a>Open <code>machind\lsvendor.c</code> in a text editor. At the beginning of the vendor initialization routine section, add a line defining <font  face="Arial" size="2">x_flexlm_newid()</font> and modify the initial value of <font  face="Arial" size="2">ls_user_init1()</font> from 0 to x_flexlm_newid.
<dl>    <dl>
       <dt> <a name="950697"> </a><CODE>/* Vendor initialization routines */</CODE>
       <dt> <a name="950681"> </a><CODE></CODE>
       <dt> <a name="950682"> </a><CODE>void x_flexlm_newid();</CODE>
       <dt> <a name="950670"> </a><CODE>void (*ls_user_init1)() = x_flexlm_newid;</CODE>
    </dl>
</dl>  <li><a name="950710"> </a>Open <code>machind\lmcrypt.c</code> in a text editor. After the <font  face="Arial" size="2">lc_init()</font> call, add the following line:
<dl>    <dl>
       <dt> <a name="950717"> </a><CODE>x_flexlm_newid();</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="950724"> </a>That section of the code should resemble:
    <dl>
       <dt> <a name="950733"> </a><CODE>if (lc_init((LM_HANDLE *)0, VENDOR_NAME, &amp;site_code, &amp;lm_job))</CODE>
       <dt> <a name="950734"> </a><CODE>{</CODE>
       <dt> <a name="950735"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror(lm_job, "lc_init failed");</CODE>
       <dt> <a name="950736"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(-1);</CODE>
       <dt> <a name="950737"> </a><CODE>}</CODE>
       <dt> <a name="950738"> </a><CODE></CODE>
       <dt> <a name="950728"> </a><CODE>x_flexlm_newid();</CODE>
    </dl>
  </dl>
  <li><a name="950753"> </a>Open <code>machind\makekey.c</code> in a text editor. After the <font  face="Arial" size="2">lc_init()</font> call, add the following line:
<dl>    <dl>
       <dt> <a name="950754"> </a><CODE>x_flexlm_newid();</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="950755"> </a>That section of the code should resemble:
    <dl>
       <dt> <a name="950772"> </a><CODE>if (lc_init((LM_HANDLE *)0, </CODE>
       <dt> <a name="950773"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VENDOR_NAME, &amp;site_code, (LM_HANDLE **) &amp;lm_job) )</CODE>
       <dt> <a name="950774"> </a><CODE>{</CODE>
       <dt> <a name="950775"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror(lm_job, "lc_init failed");</CODE>
       <dt> <a name="950776"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);</CODE>
       <dt> <a name="950777"> </a><CODE>}</CODE>
       <dt> <a name="950748"> </a><CODE></CODE>
       <dt> <a name="950816"> </a><CODE>x_flexlm_newid();</CODE>
    </dl>
  </dl>
  <li><a name="950817"> </a>Open your client application source file in a text editor. In this example, we are using <code>machind\lmflex.c</code>.
  <ul>
    <li><a name="950824"> </a>Make the <code>lm_job</code> variable global by moving it before <font  face="Arial" size="2">main()</font>.
    <dl>
       <dt> <a name="950841"> </a><CODE>VENDORCODE code;</CODE>
       <dt> <a name="950842"> </a><CODE>LM_HANDLE *lm_job;</CODE>
       <dt> <a name="950843"> </a><CODE></CODE>
       <dt> <a name="950844"> </a><CODE>void</CODE>
       <dt> <a name="950836"> </a><CODE>main()</CODE>
    </dl>
    <li><a name="950835"> </a>After the <font  face="Arial" size="2">lc_new_job()</font> call, add the following line:
    <dl>
       <dt> <a name="950883"> </a><CODE>x_flexlm_newid(); </CODE>
    </dl>
  </ul>
  <dl>
     <dt> <a name="950871"> </a>That section should resemble:
    <dl>
       <dt> <a name="950853"> </a><CODE>&nbsp;&nbsp;&nbsp;if (lc_new_job(0, lc_new_job_arg2, &amp;code, &amp;lm_job))</CODE>
       <dt> <a name="950854"> </a><CODE>&nbsp;&nbsp;&nbsp;{</CODE>
       <dt> <a name="950855"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_perror(lm_job, "lc_new_job failed");</CODE>
       <dt> <a name="950856"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(lc_get_errno(lm_job));</CODE>
       <dt> <a name="950857"> </a><CODE>&nbsp;&nbsp;&nbsp;}</CODE>
       <dt> <a name="950848"> </a><CODE>x_flexlm_newid(); </CODE>
    </dl>
  </dl>
  <li><a name="950886"> </a>Open <code><em>platform</em></code><code>\makefile</code> in a text editor. This example uses a Windows makefile.
  <ul>
    <li><a name="950899"> </a>Add your client application to the list of EXECS. For this example, add <code>lmflex.exe</code>.
    <li><a name="950916"> </a>After the <code>$(DAEMON)</code> section, add a section to build <code>vendor_hostid.obj</code>. For example:
    <dl>
       <dt> <a name="950925"> </a><CODE>vendor_hostid.obj&nbsp;:&nbsp;&nbsp;&nbsp;$(SRCDIR)/vendor_hostid.c</CODE>
       <dt> <a name="950949"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(CC) $(CFLAGS) -I../h $(SRCDIR)\vendor_hostid.c  </CODE>
    </dl>
    <li><a name="950950"> </a>Add <code>vendor_hostid.obj</code> to the link line for <code>$(DAEMON)</code>, <code>makekey</code>, <code>lmcrypt</code>, and <code>lmflex</code>. For example, for <code>lmflex.exe</code>:
    <dl>
       <dt> <a name="950983"> </a><CODE>lmflex.exe:&nbsp;&nbsp;&nbsp;$(SRCDIR)/lmflex.c  $(LMNEW_OBJ) \</CODE>
       <dt> <a name="950984"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(CLIENTLIB) lmstrip.exe</CODE>
       <dt> <a name="950985"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(CC) $(CFLAGS) $(SRCDIR)/lmflex.c</CODE>
       <dt> <a name="950986"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(LD) /out:lmflex.exe lmflex.obj vendor_hostid.obj \</CODE>
       <dt> <a name="950991"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(LMNEW_OBJ) $(CLIENTLIB) $(XTRALIB) </CODE>
       <dt> <a name="950987"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if exist lmflex.obj del lmflex.obj</CODE>
    </dl>
  </ul>
  <li><a name="950995"> </a>Rebuild your duplicate FLEX<em>lm</em> kit.
</ol>

<h5>
  <a name="951002"> </a>Test the Vendor-Defined Hostid
</h5>


<p>
  <a name="951035"> </a>You will use the vendor daemon, license generator, and client application you just built to test a vendor-defined hostid.
</p>

<ol type="1">
  <li><a name="951006"> </a>Create a license file that contains a VENDOR line with the vendor daemon you just built. Change the hostid on the SERVER line to:
  <dl>
     <dt> <a name="951018"> </a><code>VDH=12345678</code>
  </dl>
  <li><a name="951031"> </a>Run this license file through the newly built <code>lmcrypt</code>.
  <li><a name="951045"> </a>Start your license server pointing to this license file.
  <li><a name="951047"> </a>Run <code>lmflex</code>. You should be able to check out "f1."
  <li><a name="951053"> </a>Exit <code>lmflex</code> and stop the license server.
</ol>

<h5>
  <a name="951057"> </a>Additional Steps for Production Use of a Vendor-Defined Hostid Type
</h5>


<p>
  <a name="951061"> </a>To implement a real vendor-defined hostid type, you must write a function that can find the hostid that you want to use, then use that function's return value instead of the fixed value <code>VENDEF_ID</code> in <font  face="Arial" size="2">strncpy()</font> in <code>vendor_hostid.c</code>:
</p>

<dl><dl>    <dl>
       <dt> <a name="951070"> </a><CODE>if (idtype == VENDEF_ID_TYPE)</CODE>
       <dt> <a name="951071"> </a><CODE>{</CODE>
       <dt> <a name="951072"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h-&gt;type = VENDEF_ID_TYPE;</CODE>
       <dt> <a name="951073"> </a><CODE></CODE>
       <dt> <a name="951074"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strncpy(h-&gt;id.vendor, VENDEF_ID, MAX_HOSTID_LEN);</CODE>
       <dt> <a name="951075"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h-&gt;id.vendor[MAX_HOSTID_LEN] = 0;</CODE>
       <dt> <a name="951076"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(h);</CODE>
       <dt> <a name="951065"> </a><CODE>}</CODE>
    </dl>
</dl></dl>
<h4>
  <a name="940304"> </a>5.13.4	 Intel Pentium III+ Hostid (HOSTID_INTEL)
</h4>


<h5>
  <a name="940305"> </a>Requirements: 
</h5>

<ul>
  <li><a name="940309"> </a>FLEX<em>lm</em> v7.0d+

  <li><a name="940310"> </a>Windows

  <li><a name="940311"> </a>CPU hostid must be enabled


<p>
  <a name="947349"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 In May 2000, Intel announced their intention to discontinue support for CPUID.</FONT><HR WIDTH=75%>

</ul>

<h5>
  <a name="940312"> </a>Enabling the CPU Hostid
</h5>


<p>
  <a name="940313"> </a>On most systems, this is enabled in the BIOS Setup, which you usually enter by pressing the DEL key when the system is first booting up. If this is unavailable, it likely means that the system is not a Pentium III or higher.
</p>


<h5>
  <a name="940314"> </a>Hostid Length
</h5>


<p>
  <a name="940315"> </a>The true CPUID is a 96-bit value, in the format 
</p>

<dl>  <dl>
     <dt> <a name="940316"> </a><CODE>####-####-####-####-####-####</CODE>
  </dl>
</dl>
<p>
  <a name="940317"> </a>where the <code>X</code>'s are uppercase hex characters. According to Intel, all 96-bits (24 hex characters) are required to achieve a "nearly" unique hostid. It is likely, however, that using the last 16 or 8 hex characters are very nearly unique. Therefore, we recommend that unless absolute uniqueness is required, the 32-bit format should normally be used so that the license file is shorter and more readable. The 64-bit version is a compromise between the two.
</p>


<p>
  <a name="940318"> </a>The required length is determined by what's put in the license file. So if you want to use 96-bit CPUID, then that's what should go in the license.
</p>


<h5>
  <a name="940319"> </a>Converting from 96-Bit to 32-Bit
</h5>


<p>
  <a name="940320"> </a>The 32-bit hostid is simply the last 9 characters from the 96-bit version. Similarly, the 64-bit is the last 19 characters:
</p>


<p>
  <a name="940338"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="940323"> </a><strong>Length:
<br></strong></td>
    <td><a name="940325"> </a><strong>Example:
<br></strong></td>
  </tr>
  <tr>
    <td><a name="940327"> </a>96-bit
<br></td>
    <td><a name="940329"> </a>1B34-A0E3-8AFA-6199-9C93-2B2C
<br></td>
  </tr>
  <tr>
    <td><a name="940331"> </a>64-bit
<br></td>
    <td><a name="940333"> </a>8AFA-6199-9C93-2B2C
<br></td>
  </tr>
  <tr>
    <td><a name="940335"> </a>32-bit
<br></td>
    <td><a name="940337"> </a>9C93-2B2C
<br></td>
  </tr>
</table>




<p>
  <a name="940339"> </a>
</p>


<h5>
  <a name="940340"> </a>lmtools and lmhostid
</h5>


<p>
  <a name="940341"> </a><code>lmhostid</code> takes the following arguments:
</p>


<p>
  <a name="940359"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="940344"> </a><code>-cpu
<br></code></td>
    <td><a name="940346"> </a>32-bit hostid
<br></td>
  </tr>
  <tr>
    <td><a name="940348"> </a><code>-cpu32
<br></code></td>
    <td><a name="940350"> </a>32-bit hostid
<br></td>
  </tr>
  <tr>
    <td><a name="940352"> </a><code>-cpu64
<br></code></td>
    <td><a name="940354"> </a>64-bit hostid
<br></td>
  </tr>
  <tr>
    <td><a name="940356"> </a><code>-cpu96
<br></code></td>
    <td><a name="940358"> </a>96-bit hostid
<br></td>
  </tr>
</table>




<h5>
  <a name="940361"> </a>Security Issues
</h5>


<p>
  <a name="940362"> </a>Where available, the CPUID is the preferred hostid, because it is likely to be the most secure hostid. We have taken extra precautions in the applications and vendor daemons to make this hostid extra secure.
</p>


<p>
  <a name="940363"> </a>We do not believe that the CPUID length is important to security. We have every reason to believe that a duplicate 32-bit or 64-bit hostid will be so rare as to be insignificant, although only time will tell.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="912099"> </a>Chapter 6 <br>License Models
</h2>
<hr>


<h3>
  <a name="883461"> </a>6.1	 Demo Licensing
</h3>


<p>
  <a name="883462"> </a>There are many popular methods of handling demo licensing; this section discusses the most popular. However, many companies have unique needs, which may not be covered in this section. Call your FLEX<em>lm</em> salesperson for a description of the additional types of licensing models that FLEX<em>lm</em> supports.
</p>


<h4>
  <a name="883463"> </a>6.1.1	 Limited Time, Uncounted Demos
</h4>


<p>
  <a name="883464"> </a>This is the most popular method. Advantages include:
</p>

<ul>
  <li><a name="883465"> </a>No special coding is required in the application

  <li><a name="883466"> </a>No license server is required

  <li><a name="883467"> </a>License installation is easy

  <li><a name="883468"> </a>License files are easy to distribute, since no end-user information is required.

</ul>

<p>
  <a name="883469"> </a>The license file should look like:
</p>

<dl>  <dl>
     <dt> <a name="883470"> </a><CODE>FEATURE f1 corp 1.0 1-jan-2001 uncounted HOSTID=DEMO \</CODE>
    <dl>
       <dt> <a name="919263"> </a><CODE>SIGN=AB0CC0C16807</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="919278"> </a>This indicates the expiration date and the fact that it's a demo license (node-locked to HOSTID=DEMO). The product is fully usable until January 1, 2001. FEATURE lines like this can be pre-printed with different expiration dates, and given to salespeople and distributors. For example, you may distribute the following file (the examples assume a vendor daemon named "corp" to avoid confusion):
</p>

<dl>  <dl>
     <dt> <a name="883472"> </a><CODE>FEATURE f1 corp 1.0 1-jan-2001 uncounted HOSTID=DEMO SIGN=AB1CC0916A06 </CODE>
     <dt> <a name="919270"> </a><CODE>FEATURE f1 corp 1.0 1-feb-2001 uncounted HOSTID=DEMO SIGN=ABDCC0116A06 </CODE>
     <dt> <a name="919271"> </a><CODE>FEATURE f1 corp 1.0 1-mar-2001 uncounted HOSTID=DEMO SIGN=BBDCA0D151ED </CODE>
     <dt> <a name="919273"> </a><CODE>FEATURE f1 corp 1.0 1-apr-2001 uncoutned HOSTID=DEMO SIGN=BBDCB0E155F1 </CODE>
     <dt> <a name="919274"> </a><CODE>[...]</CODE>
  </dl>
</dl>
<p>
  <a name="883473"> </a>If the current date is February 1, 2001, then the salesperson would give an evaluator the third line, which expires in a month, March 1, 2001. The evaluator could simply save the FEATURE line in <code>license.dat</code> where the product was installed, and then the product will run for one month.
</p>


<p>
  <a name="883475"> </a>A PACKAGE line can be used to make this even easier for multiple features. If a company ships features A through F, the company can initialize the <code>license.dat</code> file with:
</p>

<dl>  <dl>
     <dt> <a name="883476"> </a><CODE>PACKAGE all corp 1.0 COMPONENTS="A B C D E F" SIGN=B0A0F011B491</CODE>
  </dl>
</dl>
<p>
  <a name="883477"> </a>Then appending a single demo FEATURE line can enable all these features:
</p>

<dl>  <dl>
     <dt> <a name="883478"> </a><CODE>FEATURE all corp 1.0 1-jan-2001 uncounted HOSTID=DEMO \</CODE>
    <dl>
       <dt> <a name="919300"> </a><CODE>SIGN=AB1CC0916A06</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="883479"> </a>The FEATURE line must appear after the PACKAGE line to work correctly. 
</p>


<h4>
  <a name="883481"> </a>6.1.2	 Limited Functionality Demos
</h4>


<p>
  <a name="883485"> </a>FLEX<em>lm</em> does do some security checks to prevent users from setting system dates back. Though date-setback detection can be circumvented, most "honest users" (customers who would pay for licenses that cannot be stolen) find that working with incorrect system dates is annoying and too public a form of theft. For companies that are more concerned with security, there are several things that can be done to make date setback less feasible:
</p>


<h5>
  <a name="883486"> </a>Prominently Display Expiration Date
</h5>


<p>
  <a name="883487"> </a>After a successful checkout, call:
</p>

<dl>  <dl>
     <dt> <a name="883488"> </a><CODE>config = lc_auth_data()</CODE>
  </dl>
</dl>
<p>
  <a name="883489"> </a>to get an authenticated copy of the <code>CONFIG</code> struct that authorized the checkout. Put the expiration date (<code>CONFIG-&gt;date</code>) in a prominent place in the GUI so that the date-setback detection is more public.
</p>


<h5>
  <a name="883490"> </a>Provide an Insistent Reminder
</h5>


<p>
  <a name="883491"> </a>If it is an expiring eval version, periodically do something annoying--perhaps a popup that appears every few minutes which encourages the user to purchase the product.
</p>


<h5>
  <a name="883492"> </a>Disable Some Functionality
</h5>


<p>
  <a name="883493"> </a>A classic example is a word processing program that alters saved files so that, when printed, the word "EVALUATION" is printed in large letters across every page. This allows evaluators full functionality, without reasonable utility. 
</p>


<p>
  <a name="883494"> </a>The application needs to detect that the HOSTID is DEMO for this type of evaluation, and <em></em><font  face="Arial" size="2">lc_auth_data()</font> is the correct function to use for this (not <font  face="Arial" size="2">lc_get_config()</font> or <font  face="Arial" size="2">lc_next_conf()</font>):
</p>

<dl>  <dl>
     <dt> <a name="883496"> </a><CODE>CONFIG *conf;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* outline of C source */</CODE>
     <dt> <a name="919359"> </a><CODE>LM_HANDLE *job;</CODE>
     <dt> <a name="919360"> </a><CODE></CODE>
     <dt> <a name="919361"> </a><CODE>lc_new_job(...&amp;job);</CODE>
     <dt> <a name="919362"> </a><CODE>rc = lc_checkout(job, feature ... );</CODE>
     <dt> <a name="919363"> </a><CODE>if (rc) return rc; /* error handling */</CODE>
     <dt> <a name="919364"> </a><CODE>conf = lc_auth_data(job, feature);</CODE>
     <dt> <a name="919365"> </a><CODE>if (conf-&gt;idptr &amp;&amp; conf-&gt;idptr-&gt;type == HOSTID_DEMO)</CODE>
     <dt> <a name="919366"> </a><CODE>/* it's a demo license, disable some functionality... */</CODE>
  </dl>
</dl>
<h5>
  <a name="883497"> </a>See Also
</h5>

<ul>
  <li><a name="883501"> </a><a href="all.htm#912235">Section 5.5, "FEATURE or INCREMENT Lines</a>"

  <li><a name="883505"> </a><a href="all.htm#912429">Section 5.7, "PACKAGE Lines</a>"

  <li><a name="883509"> </a><a href="all.htm#881056">Section 3.3, "lc_auth_data()</a>"

  <li><a name="883513"> </a><a href="all.htm#882894">Section 4.2, "LM_A_CHECK_BADDATE</a>"

  <li><a name="883517"> </a><a href="all.htm#884799">Section 9.2.2, "ls_a_check_baddate</a>"

</ul>

<h3>
  <a name="883521"> </a>6.2	 Lenient Licensing: Report Log and OVERDRAFT
</h3>


<p>
  <a name="940479"> </a>More and more companies prefer licensing that does not deny usage, but bills customers for their usage. 
</p>


<h4>
  <a name="883522"> </a>6.2.1	 FLEX<em>lm</em> Report Log File
</h4>


<p>
  <a name="883523"> </a>A FLEX<em>lm</em> report log file (which is enabled with <code>lmswitchr</code> and/or an end-user options file REPORTLOG entry) provides a relatively secure method of tracking end-user usage. See the <em>FLEXlm End Users Guide</em> for more information about starting and managing a report log file. The report log file can be used for billing customers for their usage. A common method for doing this is to provide a FEATURE line with an OVERDRAFT. OVERDRAFT usage is logged to the REPORTLOG file, which is then read by FLEX<em>bill</em>, from which an invoice can be generated. FLEX<em>bill</em> is a separate product available from GLOBEtrotter Software.
</p>


<h5>
  <a name="883533"> </a>Advantages
</h5>


<p>
  <a name="883534"> </a>The advantages of this system include:
</p>

<ul>
  <li><a name="883535"> </a>The end user is not denied usage during peak usage periods (within limits).

  <li><a name="883536"> </a>The vendor can gain additional revenue over traditional floating usage schemes.

</ul>

<p>
  <a name="883537"> </a>A customer can limit costs resulting from OVERDRAFT usage by including a MAX_OVERDRAFT line in the options file.
</p>


<h5>
  <a name="883539"> </a>Limitations
</h5>


<p>
  <a name="883540"> </a>The report log file, while ASCII (so it can be easily emailed), is not human-readable. In addition, any modifications to the file are detected by SAM<em>report</em>. However, this does not mean that no tampering is possible. There are three conditions that must be considered:
</p>

<ul>
  <li><a name="899472"> </a>First, the customer may simply lose a file (either by accident or on purpose). Files are "ended" when a license server stops and starts or when an <code>lmreread</code> is performed. These sections can be lost without detecting a file modification, although the fact that a time period is missing <em>can</em> be detected. 

  <li><a name="883545"> </a>Second, a policy is needed for missing reporting periods. One example policy is: "More than <code><em>x</em></code> hours per month of missing license usage entries terminates the licensing contract."

  <li><a name="883546"> </a>Finally, a similar policy will be needed for files that have been altered.

</ul>

<h4>
  <a name="883547"> </a>6.2.2	 OVERDRAFT Detection
</h4>


<p>
  <a name="919465"> </a>Applications may want to inform users when they're in an OVERDRAFT state. This can be done with <font  face="Arial" size="2">lc_auth_data()</font> and <font  face="Arial" size="2">lc_get_attr(</font><code>... LM_A_VD_FEATURE_INFO...</code><font  face="Arial" size="2">)</font>. <font  face="Arial" size="2">lc_auth_data()</font> gives the <code>CONFIG</code> struct for the license that has been used for the checkout call, and LM_A_VD_FEATURE_INFO returns that actual OVERDRAFT state in the server.
</p>

<dl>  <dl>
     <dt> <a name="919466"> </a><CODE>CONFIG *conf;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* outline of C source */</CODE>
     <dt> <a name="919469"> </a><CODE>LM_HANDLE *job;</CODE>
     <dt> <a name="919470"> </a><CODE>LM_VD_FEATURE_INFO fi;</CODE>
     <dt> <a name="919471"> </a><CODE></CODE>
     <dt> <a name="919472"> </a><CODE>if (rc = lc_new_job(...&amp;job)) return rc; /* error */</CODE>
     <dt> <a name="919473"> </a><CODE>if (rc = lc_checkout(job, feature ... )) return rc; /* error */</CODE>
     <dt> <a name="919474"> </a><CODE>if (!(fi.conf = = lc_auth_data(job, feature))) /* report error */;</CODE>
     <dt> <a name="919478"> </a><CODE>else</CODE>
     <dt> <a name="919479"> </a><CODE>{</CODE>
     <dt> <a name="919480"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rc = lc_get_attr(job, LM_A_VD_FEATURE_INFO, (short *)&amp;fi))</CODE>
     <dt> <a name="919484"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* report this error */;</CODE>
     <dt> <a name="919485"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fc.lic_in_use &gt; fi.lic_avail - fi.overdraft)</CODE>
     <dt> <a name="919486"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("%s Number of overdraft uses: %d\n", feature,</CODE>
     <dt> <a name="919487"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi.lic_in_use - (fi.lic_avail - fi.overdraft));</CODE>
     <dt> <a name="883550"> </a><CODE>}</CODE>
  </dl>
</dl>
<h5>
  <a name="883551"> </a>See Also
</h5>

<ul>
  <li><a name="883555"> </a><a href="all.htm#912235">Section 5.5, "FEATURE or INCREMENT Lines</a>"

  <li><a name="883558"> </a><a href="all.htm#883377">Section 4.29, "LM_A_VD_GENERIC_INFO, LM_A_VD_FEATURE_INFO</a>"

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="890494"> </a>Chapter 7 <br>Distributing and Locating the License File
</h2>
<hr>


<h3>
  <a name="940494"> </a>7.1	 Emailing Licenses
</h3>


<p>
  <a name="940495"> </a>Emailers can and do alter license files. We attempt to accommodate most emailer alterations, but not all are accommodated.
</p>


<h4>
  <a name="940496"> </a>7.1.1	 Newline Additions
</h4>


<p>
  <a name="940497"> </a>Emailers often insert newlines into text, such as a license file. With v7+, this will not cause a problem. However, because of this enhancement, with v7+ it is now important that comments that appear between license file lines are prefixed with "#." Comments appearing before or after all lines do not require this (except the first line after the last FEATURE or INCREMENT line). Therefore, emails can be saved with email headers intact, and this is a good way to recommend saving a license file.
</p>


<h4>
  <a name="940498"> </a>7.1.2	 Adding ".txt" to the License File Name
</h4>


<p>
  <a name="940499"> </a>When saving a text file, either in the emailer, or with Notepad on Windows, it's common that a <code>.txt</code> ending is appended, often with no notice or warning to the user.
</p>


<p>
  <a name="940543"> </a>Version 7+ FLEX<em>lm</em> ignores this suffix. That is, if a file called <code>demo.lic</code> is in the license path, and <code>demo.lic.txt</code> is found, it will be used. If both <code>demo.lic</code> and <code>demo.lic.txt</code> exist, both are used.
</p>


<h4>
  <a name="940544"> </a>7.1.3	 Other Transformations
</h4>


<h5>
  <a name="940545"> </a>Quotes
</h5>


<p>
  <a name="940506"> </a>ASCII quotation marks are sometimes substituted with other special characters. v7+ handles this correctly.
</p>


<h5>
  <a name="940507"> </a>Word Format, Rich Text, etc.
</h5>


<p>
  <a name="940508"> </a>If the license is not saved as ASCII text, but turned into Word, Rich Text Format, or any other similar encoding, FLEX<em>lm</em> will not recognize the license file, and should be avoided.
</p>


<h3>
  <a name="884026"> </a>7.2	 Locating the License File
</h3>


<p>
  <a name="940514"> </a>The rules that FLEX<em>lm</em> client applications use for finding the license file are:
</p>

<ol type="1">
  <li><a name="919573"> </a>If either <code>LM_LICENSE_FILE</code> or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> (where <code><em>VENDOR</em></code> is the vendor name) environment variables is set, these are used instead of the default location. Note that environment variables can also be set in the registry (Windows) or in <code>$HOME/.flexlmrc</code> (UNIX). If set in both locations, both are used.
  <li><a name="884033"> </a>If both <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> and <code>LM_LICENSE_FILE</code> are set, both are used instead of the default location, with <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> used first. 
  <li><a name="884034"> </a>If application sets <font  face="Arial" size="2">lc_set_attr(</font><code>..., LM_A_DISABLE_ENV...</code><font  face="Arial" size="2">)</font>, then environment variables are ignored. Not recommended except in license file lists.
  <li><a name="884035"> </a>The license location(s) can be set in the application with             LM_A_LICENSE_FILE or LM_A_LICENSE_FILE_PTR or             LM_A_LICENSE_DEFAULT. If any of these are set, the default location is ignored. LM_A_LICENSE_DEFAULT is normally recommended, because it automatically recognizes the environment variables plus the indicated license path(s). LM_A_LICENSE_FILE and LM_A_LICENSE_FILE_PTR will set the path if the environment variable is either not set or is disabled. 
  <li><a name="884036"> </a>In the FLEXible API, the license file location cannot be changed once the license file is read. The license file is not read until one of the following functions is called: <font  face="Arial" size="2">lc_checkout()</font>, <font  face="Arial" size="2">lc_get_config()</font>, <font  face="Arial" size="2">lc_next_conf()</font>, <font  face="Arial" size="2">lc_userlist()</font>. The only way to effectively change the license file once it has been read, is to start a new job with <font  face="Arial" size="2">lc_new_job()</font>. That new job will read the new or modified license when required to.
  <li><a name="919647"> </a>Calling any of <font  face="Arial" size="2">lc_set_attr(</font><code>..., LM_A_LICENSE_*, ...</code><font  face="Arial" size="2">)</font> more than once overrides the previous setting. For example, 
<dl>    <dl>
       <dt> <a name="919648"> </a><CODE>lc_set_attr(..., LM_A_LICENSE_DEFAULT, (LM_A_VAL_TYPE)<code><em>lic_path1</em></code>);</CODE>
       <dt> <a name="919649"> </a><CODE>lc_set_attr(..., LM_A_LICENSE_DEFAULT, (LM_A_VAL_TYPE)<code><em>lic_path2</em></code>);</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="884039"> </a>Only <code><em>lic_path2</em></code> is used.
    <dl>
       <dt> <a name="884040"> </a><CODE>lc_set_attr(..., LM_A_LICENSE_FILE, (LM_A_VAL_TYPE)<code><em>lic_path1</em></code>);</CODE>
       <dt> <a name="919699"> </a><CODE>lc_set_attr(..., LM_A_LICENSE_DEFAULT, (LM_A_VAL_TYPE)<code><em>lic_path2</em></code>);</CODE>
    </dl>
     <dt> <a name="884041"> </a>Again, only <code><em>lic_path2</em></code> is used.
  </dl>
  <li><a name="884042"> </a>For the Simple and Trivial APIs, the rules are the same, with the rule that the license path argument to the checkout call behaves like LM_A_LICENSE_DEFAULT.
  <li><a name="884046"> </a>The <code>-c</code> option will override the setting of <code>LM_LICENSE_FILE</code> for all FLEX<em>lm</em> utilities such as: <code>lmgrd</code>, <code>lmdown</code>, <code>lmstat</code>, etc.
</ol>

<h3>
  <a name="884050"> </a>7.3	 License Specification
</h3>


<p>
  <a name="884051"> </a>Wherever a license path can be specified, it can consist of:
</p>

<ul>
  <li><a name="884052"> </a>A single file.

  <li><a name="884053"> </a>A list of files, separated by a colon on UNIX and a semi-colon on Windows.

  <li><a name="909362"> </a>A directory, where <code><em>dir</em></code><code>/*.lic</code> are used in alphabetical order, as if specified like a license file list. On Windows, case doesn't matter and <code>*.LIC</code> files are also recognized. On UNIX, case does matter and <code>*.LIC</code> files are not recognized.

  <li><a name="884056"> </a><code>@</code><code><em>host</em></code>, where <code><em>host</em></code> is the host name of the license server, when the SERVER has no port number, or the port number is between 27000 and 27009 (introduced in v6--unsupported in older versions).

  <dl>
     <dt> <a name="919756"> </a><code>@localhost</code> will always work if the server is running on the same system as the client.
  </dl>
  <li><a name="884058"> </a><code><em>port</em></code><code>@</code><code><em>host</em></code>, where <code><em>port</em></code> is the port number and <code><em>host</em></code> comes from the SERVER line.

  <li><a name="884061"> </a>The actual license file text, with <code>START_LICENSE\n</code> as a prefix, and <code>\nEND_LICENSE</code> as suffix, where the embedded newlines are required.

</ul>

<h4>
  <a name="884063"> </a>7.3.1	 Using License File List for Convenience and Redundancy
</h4>


<p>
  <a name="884064"> </a>Client programs can process a series of license files, for example, by setting <code>LM_LICENSE_FILE</code> to a path, as in:
</p>

<dl>  <dl>
     <dt> <a name="884065"> </a><CODE>setenv LM_LICENSE_FILE <code><em>file1</em></code>:<code><em>file2</em></code>:..:<code><em>dir1</em></code>:..:<code><em>filen</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="884066"> </a>Client programs will then try using <code><em>file1</em></code>; if it fails, <code><em>file2</em></code> will be tried, etc. Directories are automatically expanded to use all files matching <code>*.lic</code> in that directory as part of the list. On UNIX, the license files are separated by colons; on Windows, the license files are separated by semi-colons.
</p>


<p>
  <a name="884067"> </a>Aside from being convenient, this is an important method of redundancy, and has many advantages over the more formal three-server redundancy. License file list redundancy can also be used in combination with three-server redundant systems.
</p>


<p>
  <a name="884069"> </a>A non-redundant server could be specified as <code>@</code><code><em>host</em></code> or <code><em>port</em></code><code>@</code><code><em>host</em></code>, and each server of a set of three redundant servers should be specified as <code><em>port</em></code><code>@</code><code><em>host</em></code> (not just <code>@</code><code><em>host</em></code>). 
</p>


<p>
  <a name="949873"> </a>For example, if you have a single server node named "serverhost," and you are running FLEX<em>lm</em> on port 27000, you could specify your license file as:
</p>

<dl>  <dl>
     <dt> <a name="884076"> </a><CODE>@serverhost</CODE>
  </dl>
</dl>
<p>
  <a name="884077"> </a>or 
</p>

<dl>  <dl>
     <dt> <a name="884078"> </a><CODE>27000@serverhost</CODE>
  </dl>
</dl>
<p>
  <a name="884079"> </a>You could have a license file path which looked like the following:
</p>

<dl>  <dl>
     <dt> <a name="884080"> </a><CODE>@serverhost:/usr/local/license.dat:/myprod/licensedir:27000@shost2</CODE>
  </dl>
</dl>
<p>
  <a name="884081"> </a>If in the license file list there is a set of three redundant servers, 1700@host1, 1700@host2, and 1700@host3, the path might look like: 
</p>

<dl>  <dl>
     <dt> <a name="884082"> </a><CODE>@serverhost:1700@host1:1700@host2:1700@host3:27000@shost2</CODE>

<p>
  <a name="919946"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Unless <code>@</code><code><em>host</em></code>, <code><em>port</em></code><code>@</code><code><em>host</em></code>, or USE_SERVER are used (so the client doesn't read the FEATURE lines), both the client and server need to be reading the <em>same</em> license file, because the client passes the signature from the FEATURE line to the vendor daemon. </FONT><HR WIDTH=75%>

  </dl>
</dl>
<h5>
  <a name="884086"> </a>See Also
</h5>

<ul>
  <li><a name="884090"> </a><a href="all.htm#882086">Section&nbsp;3.29, "lc_set_attr()"</a>

  <li><a name="884094"> </a><a href="all.htm#885200">Chapter&nbsp;10, "Debugging Hints</a>"

</ul>

<h4>
  <a name="939939"> </a>7.3.2	 License in a Buffer
</h4>


<p>
  <a name="939940"> </a>The license file does not need to be located on disk--it can be specified in the program itself. Any place a license path can be set can be a license file instead, as in this example:
</p>

<dl>  <dl>
     <dt> <a name="939941"> </a><CODE>lc_set_attr(job, LM_A_LICENSE_DEFAULT, (LM_A_VAL_TYPE)</CODE>
    <dl>
       <dt> <a name="939942"> </a><CODE>"START_LICENSE\n\</CODE>
       <dt> <a name="939943"> </a><CODE>FEATURE f1 demo 1.0 permanent \</CODE>
       <dt> <a name="939944"> </a><CODE>uncounted HOSTID=ANY \</CODE>
       <dt> <a name="939945"> </a><CODE>VENDOR_STRING="Acme Inc" SIGN=50A35101C0F3\n\</CODE>
       <dt> <a name="939946"> </a><CODE>END_LICENSE");</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="939947"> </a>Note that the license begins with <code>START_LICENSE\n</code> and ends with <code>\nEND_LICENSE</code>. The embedded newlines are required. A license like this can be specified in place of a license path wherever a license path is valid. This can also be a license file list; as in the following example:
</p>

<dl>  <dl>
     <dt> <a name="939948"> </a><CODE>lc_set_attr(job, LM_A_LICENSE_DEFAULT,(LM_A_VAL_TYPE)</CODE>
    <dl>
       <dt> <a name="939949"> </a><CODE>"path/to/license.dat:\</CODE>
       <dt> <a name="939950"> </a><CODE>START_LICENSE\n\</CODE>
       <dt> <a name="939951"> </a><CODE>FEATURE f1 demo 1.0 permanent \</CODE>
       <dt> <a name="939952"> </a><CODE>uncounted HOSTID=ANY \</CODE>
       <dt> <a name="939953"> </a><CODE>VENDOR_STRING="Acme Inc" SIGN=50A35101C0F3\n\</CODE>
       <dt> <a name="939954"> </a><CODE>END_LICENSE"</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="939955"> </a>In this example, <code>path/to/license.dat</code> is first in the list, followed by the license in the string.
</p>


<p>
  <a name="939956"> </a>License in a buffer is particularly useful when selling libraries, and end-user royalties are not required. Since all end users for a particular ISV will have the same license file, it's convenient to store it in a character buffer in the program, rather than in a license file, which would require the ISV to distribute an extra file that might get misplaced.
</p>


<p>
  <a name="939957"> </a>For example, a library may be used to read a particular format file. If the file included the name of the company that generated the data, a license could guarantee that only files generated by this company can be read by the library, by matching the name in the VENDOR_STRING="..." field, (in conjunction with using <font  face="Arial" size="2">lc_auth_data()</font>, or LM_A_CHECKOUTFILTER).
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="898894"> </a>Chapter 8 <br>The License Manager Daemon
</h2>
<hr>


<p>
  <a name="884539"> </a>The purpose of the license manager daemon, <code>lmgrd</code>, is to:
</p>

<ul>
  <li><a name="884540"> </a>Start and maintain all the vendor daemons listed in the VENDOR lines of the license file 

  <li><a name="884541"> </a>Refer application checkout (or other) requests to the correct vendor daemon

</ul>

<p>
  <a name="884545"> </a><code>lmgrd</code> is a standard component of FLEX<em>lm</em> that neither requires nor allows for vendor customization. The license manager daemon does allow the license file location and the server-to-server connection timeout interval to be set by the end user. These options are set by command-line arguments when starting <code>lmgrd</code>. 
</p>


<h3>
  <a name="909394"> </a>8.1	 Starting lmgrd on UNIX
</h3>


<p>
  <a name="909395"> </a>The command-line syntax for <code>lmgrd</code> is:
</p>

<dl>  <dl>
     <dt> <a name="945185"> </a><CODE>lmgrd [-c <code><em>license_file_list</em></code>] [-l <code><em>debug_log_path</em></code>]</CODE>
    <dl>
       <dt> <a name="945186"> </a><CODE>[-2 -p] [-nfs_log] [-x lmdown] |[-x lmremove] [-v] [-z]</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="903661"> </a>where:
</p>


<p>
  <a name="903701"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903664"> </a><code>-c </code><code><em>license_file_list
<br></em></code></td>
    <td><a name="903666"> </a>Use the specified license file(s). If a 
<br>directory is specified, all matching 
<br><code>*.lic</code> files are used. The list is colon-
<br>separated on UNIX and separated by 
<br>semi-colons on Windows. If redundant 
<br>servers, must be a single license file. 
<br>SERVER line hostids for all files must 
<br>apply to the same host, but the hostids 
<br>need not be identical.
<br></td>
  </tr>
  <tr>
    <td><a name="903668"> </a><code>-l </code><code><em>debug_log_path
<br></em></code></td>
    <td><a name="903670"> </a>Write debugging information to file 
<br><code><em>debug_log</em></code>. This option uses the letter 
<br><code>l</code>, not the numeral 1. The default 
<br>output location is stdout. See the 
<br><em>FLEXlm End Users Guide</em> for 
<br>descriptions of the messages in the 
<br>debug log file.
<br></td>
  </tr>
  <tr>
    <td><a name="903676"> </a><code>-2 -p
<br></code></td>
    <td><a name="903678"> </a>Restricts usage of <code>lmdown</code>, <code>lmreread</code>, 
<br>and <code>lmremove</code> to a FLEX<em>lm</em> 
<br>administrator who is by default root. If 
<br>there a UNIX group called "lmadmin," 
<br>then use is restricted to only members 
<br>of that group. If root is not a member 
<br>of this group, then root does not have 
<br>permission to use any of the above 
<br>utilities. If <code>-2 -p</code> is used when 
<br>starting <code>lmgrd</code>, no user on Windows 
<br>can shut down the license server with 
<br><code>lmdown</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="951264"> </a><code>-nfs_log
<br></code></td>
    <td><a name="951266"> </a>We do not recommend writing a debug 
<br>log to an NFS-mounted or PC 
<br>network-mounted disk. If an 
<br>administrator chooses to write to a 
<br>mounted disk and the speed of the 
<br>license server is too slow, this flag can 
<br>be used to cache debug info before it 
<br>is written out (when approximately 
<br>1kb of data is reached). 
<br></td>
  </tr>
  <tr>
    <td><a name="903686"> </a><code>-x lmdown
<br></code></td>
    <td><a name="903688"> </a>Disallow the <code>lmdown</code> command (no 
<br>user can run <code>lmdown</code>). If <code>lmdown</code> is 
<br>disabled, you will need to stop <code>lmgrd</code> 
<br>via <code>kill </code><code><em>pid</em></code> (UNIX) or stop the 
<br><code>lmgrd</code> and vendor daemon processes 
<br>through the Task Manager or NT 
<br>Service (Windows). On UNIX, be sure 
<br>the <code>kill</code> command does not have a <code>-9</code> 
<br>argument. 
<br></td>
  </tr>
  <tr>
    <td><a name="903690"> </a><code>-x lmremove
<br></code></td>
    <td><a name="903692"> </a>Disallow the <code>lmremove</code> command (no 
<br>user can run <code>lmremove</code>). 
<br></td>
  </tr>
  <tr>
    <td><a name="903780"> </a><code>-v
<br></code></td>
    <td><a name="903782"> </a>Prints <code>lmgrd</code> version number and 
<br>copyright and exits.
<br></td>
  </tr>
  <tr>
    <td><a name="903694"> </a><code>-z
<br></code></td>
    <td><a name="903696"> </a>Run in foreground. The default 
<br>behavior is to run in the background. 
<br>If <code>-l </code><code><em>debug_log_path</em></code> is present, 
<br>then no windows are used, but if no <code>-
<br>l</code> argument specified, separate 
<br>windows are used for <code>lmgrd</code> and each 
<br>vendor daemon.
<br></td>
  </tr>
</table>




<p>
  <a name="884584"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The license file path name can also be specified by setting the environment variable <code><em></em></code><code>LM_LICENSE_FILE</code> to the file's path name. The <code>-c</code> path specification will override the setting of <code>LM_LICENSE_FILE</code>.</FONT><HR WIDTH=75%>


<h3>
  <a name="884626"> </a>8.2	 Starting lmgrd on Windows 
</h3>


<p>
  <a name="884630"> </a><code>lmgrd</code> can be started as an application from the Windows NT console. For example:
</p>

<dl>  <dl>
     <dt> <a name="884631"> </a><CODE>D:\flexlm&gt; lmgrd -c <code><em>vendor</em></code>.lic</CODE>
  </dl>
</dl>
<p>
  <a name="884635"> </a>The problem with running a server this way is that it occupies a window on the screen, and may be difficult to start and stop. On the NT, and on Windows 95, <code>lmgrd</code> can be installed as a service to allow it to be started and stopped through a user interface and run in the background. 
</p>


<p>
  <a name="924200"> </a>To get <code>lmgrd</code> to run as a service, you need to "install" it. Two methods are available, LMTOOLS or the utility program, <code>installs.exe</code> (located in the <code>i86_n3</code> directory). Using LMTOOLS to install <code>lmgrd</code> as a service is the recommended technique (see the <em>FLEXlm Programmers Guide</em>). If you prefer to do a manual installation of <code>lmgrd</code> as a service, see <a href="all.htm#940604">Section 12.10, "Manually Installing lmgrd as a Service</a>."
</p>


<h3>
  <a name="884697"> </a>8.3	 License Server Configuration
</h3>


<p>
  <a name="941469"> </a>FLEX<em>lm</em> supports:
</p>

<ul>
  <li><a name="941470"> </a>Single license server nodes

  <li><a name="941471"> </a>Redundancy via a license file list

  <li><a name="941472"> </a>Three-server redundancy

</ul>

<p>
  <a name="941473"> </a>If all the end user's data is on a single file server, then there is no need for redundant servers, and GLOBEtrotter Software recommends the use of a single server node for the FLEX<em>lm</em> daemons. If the end user's data is split among two or more server nodes and work is still possible when one of these nodes goes down or off the network, then multiple server nodes can be employed. 
</p>


<p>
  <a name="941480"> </a>In all cases, an effort should be made to select stable systems as server nodes; in other words, do not pick systems that are frequently rebooted or shut down for one reason or another. Multiple server nodes can be any supported server nodes--it is not required that they be the same architecture or operating system.
</p>


<p>
  <a name="941484"> </a>FLEX<em>lm</em> supports two methods of redundancy: redundancy via a license file list in the <code>LM_LICENSE_FILE</code> environment variable and a set of three redundant license servers.
</p>


<p>
  <a name="941456"> </a>See Chapter 10, "License Servers," in the <em>FLEXlm Programmers Guide</em> for recommendations about configuring license server machines.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="884743"> </a>Chapter 9 <br>Vendor Daemon
</h2>
<hr>


<p>
  <a name="884746"> </a>The FLEX<em>lm</em> installation program on UNIX builds a vendor daemon (either a <code>demo</code> vendor daemon or your own, depending on your instructions). A <code>demo</code> vendor daemon is provided in your Windows installation, but you have to rebuild your Windows FLEX<em>lm</em> SDK to build your own vendor daemon, <code><em>vendor</em></code> or <code><em>vendor.</em></code><code>exe</code>. Your vendor daemon can be customized via variables in <code>machind/lsvendor.c</code>, but changes to this file are normally neither suggested nor required. 
</p>


<h3>
  <a name="941166"> </a>9.1	 Configuring Your Vendor Daemon
</h3>


<p>
  <a name="884748"> </a>To configure your vendor daemon:
</p>

<ol type="1">
  <li><a name="940685"> </a>Edit <code>lm_code.h</code> to change the VENDOR_NAME field to your vendor daemon name.
  <li><a name="940689"> </a>Customize <code>lsvendor.c</code>, if necessary (not normally needed).
  <li><a name="940699"> </a>Build the FLEX<em>lm</em> SDK using <code>make</code> (UNIX) or <code>nmake</code> (Windows). 
</ol>

<h3>
  <a name="884779"> </a>9.2	 Vendor Variables
</h3>


<p>
  <a name="884780"> </a>If you need to customize your vendor daemon, you can edit the vendor variables in <code>lsvendor.c</code><code><em>.</em></code> Usually, this file should be left as is. Most of the variables in this file appear for historic and compatibility reasons and should not be used except where required for compatibility.
</p>


<h4>
  <a name="884791"> </a>9.2.1	 ls_a_behavior_ver
</h4>

<dl>  <dl>
     <dt> <a name="884792"> </a><CODE>(char *) ls_a_behavior_ver = 0; /* like LM_A_BEHAVIOR_VER */</CODE>
  </dl>
</dl>
<p>
  <a name="940807"> </a>This can be set to LM_BEHAVIOR_V<em>x</em>, where <em>x</em> is 2, 3, 4, 5, 5_1, 6, 7, or 7_1. The default (0) is LM_BEHAVIOR_CURRENT, which is V7_1 in v7.1 and v7.2.
</p>


<h5>
  <a name="884793"> </a>See Also
</h5>

<ul>
  <li><a name="884797"> </a><a href="all.htm#882881">Section 4.1, "LM_A_BEHAVIOR_VER</a>"

</ul>

<h4>
  <a name="884799"> </a>9.2.2	 ls_a_check_baddate
</h4>

<dl>  <dl>
     <dt> <a name="884800"> </a><CODE>(int) ls_a_check_baddate = 0; /* like LM_A_CHECK_BADDATE */</CODE>
  </dl>
</dl>
<p>
  <a name="940815"> </a>If set to 1, and the license that would authorize a checkout is expiring, a check is made to see if the system date has been set back. If the failure is due to detection of system date tampering, the checkout error will be LM_BADSYSDATE.
</p>


<h5>
  <a name="884801"> </a>See Also
</h5>

<ul>
  <li><a name="884805"> </a><a href="all.htm#882894">Section 4.2, "LM_A_CHECK_BADDATE</a>"

  <li><a name="884809"> </a><a href="all.htm#883481">Section 6.1.2, "Limited Functionality Demos</a>"

</ul>

<h4>
  <a name="884810"> </a>9.2.3	 ls_a_license_case_sensitive
</h4>

<dl>  <dl>
     <dt> <a name="884811"> </a><CODE>(int) ls_a_license_case_sensitive = 0; </CODE>
    <dl>
       <dt> <a name="940949"> </a><CODE>/* like LM_A_LICENSE_CASE_SENSITIVE */</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="940825"> </a>If set to 1, licenses are case-sensitive. Default is 0, not case-sensitive.
</p>


<h5>
  <a name="884812"> </a>See Also
</h5>

<ul>
  <li><a name="884816"> </a><a href="all.htm#883071">Section 4.14, "LM_A_LICENSE_CASE_SENSITIVE</a>"

</ul>

<h4>
  <a name="884841"> </a>9.2.4	 ls_compare_vendor_on_increment and ls_compare_vendor_on_upgrade
</h4>

<dl>  <dl>
     <dt> <a name="884842"> </a><CODE>(int) ls_compare_vendor_on_increment = 0; /*p Compare vendor-defined */</CODE>
     <dt> <a name="940896"> </a><CODE>(int) ls_compare_vendor_on_upgrade = 0; /* Compare vendor-def fields */</CODE>
  </dl>
</dl>
<p>
  <a name="884843"> </a>If VENDOR_STRING is used in your license files, then these two variables may need to be modified. If one is set, set both.
</p>


<p>
  <a name="940916"> </a>INCREMENT lines are combined if the following is true:
</p>

<ul>
  <li><a name="884844"> </a>The feature names match

  <li><a name="884845"> </a>The feature versions match

  <li><a name="884846"> </a>Any node-lock hostid, if present, matches

  <li><a name="884847"> </a>USER_BASED, HOST_BASED, and CAPACITY matches

  <li><a name="884848"> </a>Optionally, the vendor-defined strings match

</ul>

<p>
  <a name="884849"> </a>ls_compare_vendor_on_increment gives you control over whether an INCREMENT line will require the vendor string to match in order to pool its licenses. If set to a non-zero value, then the vendor string must match; if 0, then no comparison is done on the vendor string.
</p>


<p>
  <a name="940911"> </a>ls_compare_vendor_on_upgrade gives you control over whether an UPGRADE line will require the vendor string to match in order to upgrade another license. If set to a non-zero value, then the vendor string must match; if 0, then no comparison is done on the vendor string.
</p>


<h5>
  <a name="884850"> </a>See Also
</h5>

<ul>
  <li><a name="884854"> </a><a href="all.htm#912371">Section 5.5.22, "VENDOR_STRING</a>"

  <li><a name="940905"> </a><a href="all.htm#912420">Section 5.6, "UPGRADE Lines</a>"

</ul>

<h4>
  <a name="884886"> </a>9.2.5	 ls_daemon_periodic
</h4>

<dl>  <dl>
     <dt> <a name="884887"> </a><CODE>(void) (*ls_daemon_periodic)() = 0; </CODE>
    <dl>
       <dt> <a name="903885"> </a><CODE>/* Vendor-defined periodic call in daemon */</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="884888"> </a>If you set the function pointer ls_daemon_periodic in <code>lsvendor.c</code> to one of your functions, this function will be called approximately once per minute in the vendor daemon's main processing loop. You must ensure that the <code>.o</code> file for this routine is linked into your vendor daemon.
</p>


<h4>
  <a name="941154"> </a>9.2.6	 ls_incallback
</h4>

<dl>  <dl>
     <dt> <a name="941155"> </a><CODE>(int) (*ls_incallback)() = 0;</CODE>
  </dl>
</dl>
<p>
  <a name="941157"> </a>To install a vendor-defined checkin callback routine, initialize ls_incallback with a pointer to your routine. The checkin callback is called with no parameters, and the return value is unused. The checkin callback routine is called after the checkin is performed.
</p>


<p>
  <a name="941158"> </a>To obtain the parameters of the current checkin call, use the <font  face="Arial" size="2">ls_get_attr()</font> call described in <a href="all.htm#884953">Section 9.2.10, "ls_outfilter</a>."
</p>


<h4>
  <a name="884922"> </a>9.2.7	 ls_infilter
</h4>

<dl>  <dl>
     <dt> <a name="884923"> </a><CODE>extern LM_HANDLE * lm_job;</CODE>
     <dt> <a name="941034"> </a><CODE>(int) (*ls_infilter)() = 0;</CODE>
  </dl>
</dl>
<p>
  <a name="884925"> </a>To install a vendor-defined checkin filtering routine, initialize ls_infilter with a pointer to your routine. The checkin filter is called with no parameters. If it returns 0, the current checkin is aborted; a return of 1 allows the current checkin to continue. If the filter aborts the operation (returns 0), then it should set the error code, via <font  face="Arial" size="2">lc_set_errno(</font><code>lm_job</code>, <code><em>errno</em></code><font  face="Arial" size="2">)</font>, appropriately. 
</p>


<p>
  <a name="884926"> </a>To obtain the parameters of the current checkin call, use the <font  face="Arial" size="2">ls_get_attr()</font> call described in <a href="all.htm#884953">Section 9.2.10, "ls_outfilter</a>."
</p>


<h4>
  <a name="884940"> </a>9.2.8	 ls_min_lmremove
</h4>

<dl>  <dl>
     <dt> <a name="884941"> </a><CODE>(int) ls_min_lmremove = 120; /* Minimum amount of time (seconds) that a...</CODE>
  </dl>
</dl>
<p>
  <a name="884942"> </a>The <code>lmremove</code> utility could be used to bypass the license count for a feature if an end user were to run <code>lmremove</code> on each user as soon as he had checked out a license. ls_min_lmremove makes the <code>lmremove</code> utility ineffective for a certain period of time after a user connects to the daemon (120 seconds by default). 
</p>


<h4>
  <a name="884944"> </a>9.2.9	 ls_minimum_user_timeout
</h4>

<dl>  <dl>
     <dt> <a name="884945"> </a><CODE>(int) ls_minimum_user_timeout = 900; </CODE>
    <dl>
       <dt> <a name="903895"> </a><CODE>/* Minimum user inactivity timeout (seconds)</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="884946"> </a>This is the minimum value (in seconds) that an end user can set the feature's TIMEOUT value. An attempt to set a timeout less than ls_minimum_timeout will result in the minimum value being set. If ls_minimum_user_timeout is set to 0, then the user TIMEOUT option is disabled.
</p>


<h4>
  <a name="884953"> </a>9.2.10	 ls_outfilter
</h4>

<dl>  <dl>
     <dt> <a name="884954"> </a><CODE>(int) (*ls_outfilter)() = 0;</CODE>

<p>
  <a name="941259"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Please contact GLOBEtrotter technical support before using ls_outfilter. Callbacks in this area are rarely needed, and we're happy to provide assistance when they are.</FONT><HR WIDTH=75%>

  </dl>
</dl>
<p>
  <a name="884956"> </a>To install a vendor-defined checkout filtering routine, initialize ls_outfilter with a pointer to your routine. The checkout filter is called with no parameters. If it returns 0, your routine has either checked out the feature, or rejected the checkout request. If it returns 1, then the normal server checkout occurs
</p>


<p>
  <a name="884957"> </a>If 0 is returned and the checkout fails, set the error code appropriately with <font  face="Arial" size="2">lc_set_errno()</font>.
</p>


<p>
  <a name="941177"> </a>To obtain the parameters of the current checkout call, use the <font  face="Arial" size="2">ls_get_attr()</font> call. This is only for use in the ls_outfilter callback.
</p>

<dl>  <dl>
     <dt> <a name="941179"> </a><CODE>ls_get_attr(<code><em>attr</em></code>, &amp;<code><em>value</em></code>)</CODE>
  </dl>
</dl>
<p>
  <a name="941180"> </a>where:
</p>


<p>
  <a name="941191"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="941183"> </a><code><em>attr
<br></em></code></td>
    <td><a name="941186"> </a>An attribute specified in <code><em></em></code><code>ls_attr.h</code><code><em>.
<br></em></code></td>
  </tr>
  <tr>
    <td><a name="941188"> </a><code>(char *) </code><code><em>value
<br></em></code></td>
    <td><a name="941190"> </a>Value of the attribute.
<br></td>
  </tr>
</table>




<p>
  <a name="941193"> </a><font  face="Arial" size="2">ls_get_attr()</font> operates in the same manner as <font  face="Arial" size="2">lc_get_attr()</font>. <font  face="Arial" size="2">ls_get_attr()</font> allows you to retrieve the values of the feature name, user, host, display, etc. for use in your filtering function.
</p>


<p>
  <a name="941194"> </a>The <font  face="Arial" size="2">ls_checkout()</font> vendor daemon routine is only for use in ls_outfilter callbacks:
</p>

<dl>  <dl>
     <dt> <a name="941195"> </a><CODE>ls_checkout(<code><em>feature</em></code>, <code><em>num_lic</em></code>, <code><em>wait</em></code>, <code><em>who</em></code>, <code><em>version</em></code>, <code><em>server</em></code>,</CODE>
    <dl>
       <dt> <a name="941196"> </a><CODE><code><em>dup_sel</em></code>, <code><em>linger</em></code>, <code><em>sign</em></code>, 0,0);</CODE>
    </dl>
  </dl>
</dl>
<h5>
  <a name="941197"> </a>Parameters
</h5>


<p>
  <a name="941235"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="941200"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="941202"> </a>Feature desired.
<br></td>
  </tr>
  <tr>
    <td><a name="941204"> </a><code>(char *) </code><code><em>num_lic
<br></em></code></td>
    <td><a name="941206"> </a>Number of licenses.
<br></td>
  </tr>
  <tr>
    <td><a name="941208"> </a><code>(char *) </code><code><em>wait
<br></em></code></td>
    <td><a name="941210"> </a>"Wait until available" flag if (<code>*wait == 
<br>'1'</code>), the request will be queued if a 
<br>license is not available.
<br></td>
  </tr>
  <tr>
    <td><a name="941212"> </a><code>(CLIENT_DATA *) </code><code><em>who
<br></em></code></td>
    <td><a name="941214"> </a>The user.
<br></td>
  </tr>
  <tr>
    <td><a name="941216"> </a><code>(char *) </code><code><em>version
<br></em></code></td>
    <td><a name="941218"> </a>Version number of feature.
<br></td>
  </tr>
  <tr>
    <td><a name="941220"> </a><code>(SERVERNUM) </code><code><em>server
<br></em></code></td>
    <td><a name="941222"> </a>Server requesting checkout.
<br></td>
  </tr>
  <tr>
    <td><a name="941224"> </a><code>(char *) </code><code><em>dup_sel
<br></em></code></td>
    <td><a name="941226"> </a>Duplicate license selection criteria.
<br></td>
  </tr>
  <tr>
    <td><a name="941228"> </a><code>(char *) </code><code><em>linger
<br></em></code></td>
    <td><a name="941230"> </a>How long the license is to linger.
<br></td>
  </tr>
  <tr>
    <td><a name="941232"> </a><code>(char *) </code><code><em>sign
<br></em></code></td>
    <td><a name="941234"> </a>Signature from FEATURE line.
<br></td>
  </tr>
</table>




<p>
  <a name="941236"> </a>
</p>


<h5>
  <a name="941237"> </a>Return
</h5>


<p>
  <a name="941238"> </a>0 -&gt; checkout not available, &gt; 0 -&gt; checkout done, &lt; 0 -&gt; request queued.
</p>


<p>
  <a name="941239"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 <font  face="Arial" size="2">ls_get_attr()</font> can be used to retrieve all the parameters that <font  face="Arial" size="2">ls_checkout()</font> requires.</FONT><HR WIDTH=75%>


<h4>
  <a name="941170"> </a>9.2.11	 ls_show_vendor_def
</h4>

<dl>  <dl>
     <dt> <a name="884965"> </a><CODE>(int) ls_show_vendor_def = 0; /* If non-zero, the vendor daemon will send...</CODE>
  </dl>
</dl>
<p>
  <a name="884966"> </a>Your client can send a vendor-defined checkout string to the daemon on each checkout request. If ls_show_vendor_def is non-zero, this data will appear in <font  face="Arial" size="2">lc_userlist()</font> calls, and hence, in <code>lmstat</code> output. If you use this vendor-defined checkout data and wish for your users to be able to view it with <code>lmstat</code>, then set ls_show_vendor_def to 1.
</p>


<h4>
  <a name="884999"> </a>9.2.12	 ls_user_init1
</h4>

<dl>  <dl>
     <dt> <a name="885000"> </a><CODE>(void) (*ls_user_init1)() = 0;</CODE>
  </dl>
</dl>
<p>
  <a name="885001"> </a>To install an initialization routine that runs before normal vendor daemon initialization, initialize ls_user_init1 with a pointer to your routine and make sure an object file with this function is linked with your vendor daemon.
</p>


<h4>
  <a name="885003"> </a>9.2.13	 ls_user_init2
</h4>

<dl>  <dl>
     <dt> <a name="885004"> </a><CODE>(void) (*ls_user_init2)() = 0;</CODE>
  </dl>
</dl>
<p>
  <a name="885005"> </a>To install an initialization routine that runs after normal vendor daemon initialization, initialize ls_user_init2 with a pointer to your routine and make sure an object file with this function is linked with your vendor daemon.
</p>


<h4>
  <a name="947371"> </a>9.2.14	 ls_user_init3
</h4>

<dl>  <dl>
     <dt> <a name="947378"> </a><CODE>(void) (*ls_user_init3)() = 0;</CODE>
  </dl>
</dl>
<p>
  <a name="947382"> </a>To install an initialization routine that runs after the license file is read and after each <code>lmreread</code>, initialize ls_user_init3 with a pointer to your routine and make sure an object file with this function is linked with your vendor daemon.
</p>


<h4>
  <a name="941131"> </a>9.2.15	 ls_user_lockfile
</h4>

<dl>  <dl>
     <dt> <a name="941132"> </a><CODE>(char *) user_lockfile = (char *)NULL;</CODE>
  </dl>
</dl>
<p>
  <a name="941133"> </a>The vendor daemons use a lock file to prevent multiple copies from running on a license server host. The lock file names are (where <code><em>vendor</em></code> is the vendor daemon name, as on the VENDOR line in the license file):
</p>


<p>
  <a name="941143"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="941136"> </a>UNIX
<br></td>
    <td><a name="941138"> </a><code>/usr/tmp/lock</code><code><em>vendor</em></code>. On some newer systems, 
<br>including DEC Alpha, the location is 
<br><code>/usr/tmp/.flexlm/.lock</code><code><em>vendor</em></code>.
<br></td>
  </tr>
  <tr>
    <td><a name="941140"> </a>Windows
<br></td>
    <td><a name="941142"> </a><code>C:\flexlm\</code><code><em>vendor
<br></em></code></td>
  </tr>
</table>




<p>
  <a name="941145"> </a>If ls_user_lockfile is NULL, or points to a null string, the default lock file will be used.
</p>


<p>
  <a name="941146"> </a>The date on the lock file is updated every six hours to make it less likely that cron jobs will remove it.
</p>


<p>
  <a name="941147"> </a>If you wish to change the location of the lock file, set ls_user_lockfile to the new location. Be sure to use a full path name for this file (i.e., on UNIX, the path name should start with <code>/</code>); otherwise, multiple vendor daemons could be run from different directories.
</p>


<h4>
  <a name="885007"> </a>9.2.16	 ls_vendor_msg
</h4>

<dl>  <dl>
     <dt> <a name="885008"> </a><CODE>(char *) (*ls_vendor_msg)() = 0;</CODE>
  </dl>
</dl>
<p>
  <a name="885009"> </a>To add support for sending messages from your client code to the daemon (with <font  face="Arial" size="2">lc_vsend()</font>), initialize <font  face="Arial" size="2">ls_vendor_msg()</font> with a pointer to your routine which will process the message and create the reply for the client. <font  face="Arial" size="2">ls_vendor_msg()</font> is called with a single parameter--the character string sent by the client. It should create a reply message and return a pointer to it. The message string will be unused the next time that <font  face="Arial" size="2">ls_vendor_msg()</font> is called, so the use of a single static <code>char</code> array in <font  face="Arial" size="2">ls_vendor_msg()</font> is appropriate. Make sure an object file with this routine is linked with your vendor daemon.
</p>


<h5>
  <a name="885011"> </a>See Also
</h5>

<ul>
  <li><a name="885015"> </a><a href="all.htm#882180">Section 3.33, "lc_vsend()</a>"

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="885200"> </a>Chapter 10 <br>Debugging Hints
</h2>
<hr>


<h3>
  <a name="885202"> </a>10.1	 Debugging Your Application Code
</h3>


<p>
  <a name="885206"> </a>There are several issues to be aware of when debugging your FLEX<em>lm</em> integrated application. Some of these are described in this chapter.
</p>

<ul>
  <li><a name="885207"> </a>If you are experiencing problems on only one platform (or if you run on only a single platform), please check the appropriate platform-specific notes in <a href="all.htm#885457">Chapter&nbsp;11, "UNIX Platform-Specific Notes,"</a> or <a href="all.htm#885653">Chapter&nbsp;12, "Windows Platform-Specific Notes</a>."

  <li><a name="885221"> </a>On UNIX, the <em></em><font  face="Arial" size="2">sleep(3)</font>, <font  face="Arial" size="2">pclose(3)</font>, and <font  face="Arial" size="2">system(3)</font> calls often do not work with FLEX<em>lm</em>'s default use of SIGALRM. If you must use these calls, disable FLEX<em>lm</em> timers with LM_A_CHECK_INTERVAL set to -1 with <font  face="Arial" size="2">lc_set_attr()</font> and call <font  face="Arial" size="2">lc_timer()</font> periodically.

  <li><a name="885234"> </a>On UNIX, FLEX<em>lm</em> installs a handler for SIGPIPE and SIGALRM. If your application uses FLEX<em>lm</em> timers and forks/execs another process, these signals must be restored to the default before the fork/exec, and then re-restored in the parent process. See <font  face="Arial" size="2">signal(3)</font> for details. If you fail to do this, the child process will fail with a segmentation violation, since the signal handler will not exist in the child process. This is due to the fact that the child inherits the signal handler setting of the timer, but it does not inherit the signal handler code.

  <li><a name="885241"> </a>On UNIX, FLEX<em>lm</em>, by default, uses SIGALRM to check the health of the connection. This cannot be tolerated by certain applications (for example, applications that use XView or FORTRAN). These applications should set the LM_A_CHECK_INTERVAL and LM_A_RETRY_INTERVAL attributes to -1 with <font  face="Arial" size="2">lc_set_attr()</font>. After checking out a license, the application must periodically call <font  face="Arial" size="2">lc_timer()</font> to keep checking the health of the connection.

  <li><a name="885242"> </a>If the daemon log file is missing, be sure that you are using Bourne shell syntax in the startup file. In particular, do not use <code>csh</code>-style redirection <code>&gt;&amp;</code> in one of the <code>rc</code> startup files.

</ul>

<p>
  <a name="885246"> </a>If the FLEX<em>lm</em> timers are used to perform checking and/or reconnection, non-reentrant routines can possibly be called in the C run-time library. We have verified that the routines called by the timers are free of malloc/free reentrancy problems, since these are detectable by Purify, but there may be other, especially I/O or system routines which are not reentrant, but called by FLEX<em>lm</em>. The only way to be certain to avoid this problem would be to disable the FLEX<em>lm</em> timers and call <font  face="Arial" size="2">lc_timer()</font> directly.
</p>


<h5>
  <a name="885253"> </a>See Also
</h5>

<ul>
  <li><a name="885257"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

</ul>

<h3>
  <a name="885258"> </a>10.2	 Solving Problems In The Field
</h3>


<p>
  <a name="885259"> </a>The most important thing is to use <font  face="Arial" size="2">lc_errstring()</font>, <font  face="Arial" size="2">lp_errstring()</font>, or <font  face="Arial" size="2">ERRSTRING()</font> to present the correct error message to your user for diagnosis. Here are two common problems that occur in the field:
</p>


<p>
  <a name="885260"> </a>"License server does not support this feature"
</p>

<dl>  <dl>
     <dt> <a name="885261"> </a>This indicates that the client and servers are reading two different copies of the license file. This can be remedied by inserting a USE_SERVER line after the SERVER line in the license file (v5 or later).
  </dl>
</dl>
<p>
  <a name="885262"> </a>"Encryption code in license file is inconsistent"
</p>

<dl>  <dl>
     <dt> <a name="885266"> </a>FLEX<em>lm</em> will report the (LM_BADCODE, -8) error when:
  </dl>
  <ul>
    <li><a name="885269"> </a>The license file has been mis-typed when entered or changed since it was created.
    <li><a name="885270"> </a>The encryption seeds in your application, vendor daemon, and license generation program differ.
  </ul>
  <dl>
     <dt> <a name="885274"> </a>If you are beginning to integrate your application with FLEX<em>lm</em>, this error is usually the result of not building all the software components with the same encryption seeds. Check <code>lmcrypt.c</code>, <code>makekey.c</code>, <code>lsvendor.c</code>, and your application code carefully to ensure that they are all built with the same encryption seeds. If this is the case, you simply need to make sure that your application, <code>lmcrypt</code>, <code>makekey</code>, and your vendor daemon have all been rebuilt since the last time that you changed <code>lm_code.h</code>, and that there is only one <code>lm_code.h</code> file.
  </dl>
</dl>
<p>
  <a name="885275"> </a>If your customer has this error, use the <code>lmcksum</code> command to locate the line that was mis-typed.
</p>


<h3>
  <a name="885284"> </a>10.3	 Multiple Vendors Using FLEX<em>lm</em> at a Single End-User Site
</h3>


<p>
  <a name="885288"> </a>In the case where multiple software vendors install FLEX<em>lm</em>-based products at a single end user site, the potential for license file location conflicts arises. This section summarizes strategies that allow for a minimum of end user inconvenience.
</p>


<p>
  <a name="885289"> </a>There are basically two cases involved at an end user site when more than one software vendor installs products.
</p>


<h5>
  <a name="885290"> </a>Case 1: All Products Use the Same License Server Node(s)
</h5>


<p>
  <a name="885292"> </a>In this case, there are three possible solutions:
</p>

<ul>
  <li><a name="899649"> </a>The end user can keep both license files separate, running one <code>lmgrd</code> with a license file list containing both files. There are compatibility issues that may arise with this method if some vendor daemons and/or applications are older than v6.

  <li><a name="899650"> </a>The end user can keep the license files separate, running two <code>lmgrd</code>s, one for each license file. There are no drawbacks to this approach, because the <code>lmgrd</code> processes require few system resources.

  <dl>
     <dt> <a name="899651"> </a>When using two separate license files, make sure the port numbers are different, or leave them blank for FLEX<em>lm</em> to automatically find an open port.
  </dl>
  <li><a name="885299"> </a>You can combine license files by taking the set of SERVER lines from any one license file, and add all the other lines (VENDOR, FEATURE, INCREMENT, PACKAGE, and UPGRADE lines) from all the license files. The combined license file can be located in the default location (<code>/usr/local/flexlm/licenses/license.dat</code> on UNIX platforms and <code>C:\flexlm\license.dat</code> on Windows) or in any convenient location (with the end user using the <code>LM_LICENSE_FILE</code> environment variable), or multiple copies can be located at fixed locations as required by the various software vendors. The user should leave a symbolic link to the original license file in the locations where each software package expects to find its license file.

</ul>

<p>
  <a name="885310"> </a>In practice, sites that have experienced system administrators often prefer to combine license files. However, sites with relatively inexperienced users and no system administrator usually do better leaving the files separate.
</p>


<h5>
  <a name="885311"> </a>See Also
</h5>

<ul>
  <li><a name="885319"> </a><a href="all.htm#890494">Chapter&nbsp;7, "Distributing and Locating the License File</a>"

</ul>

<h5>
  <a name="885320"> </a>Case 2: Products Use Different License Server Node(s)
</h5>


<p>
  <a name="885322"> </a>In this case, separate license files will be required, one for each distinct set of license servers. The license files can then be installed in convenient locations, and the user's <code>LM_LICENSE_FILE</code> environment variable would be set as follows.
</p>

<dl>  <dl>
     <dt> <a name="885324"> </a><CODE>setenv LM_LICENSE_FILE <code><em>lic_path1</em></code>:<code><em>lic_path2</em></code>:....:<code><em>lic_pathn</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="885334"> </a>When products from different vendors use different versions of FLEX<em>lm</em>, always use the latest versions of <code>lmgrd</code> and the <code>lmutil</code> utilities.
</p>


<p>
  <a name="885338"> </a>The latest version of <code>lmgrd</code> will always support any FLEX<em>lm</em> license. The end user has to find out which <code>lmgrd</code> at their site is the latest version. This can be done using <code>lmgrd -v</code> to get the version. If an earlier version of <code>lmgrd</code> is used than the vendor daemon, then various errors may occur, especially "Vendor daemon can't talk to <code>lmgrd</code> (invalid returned data from license server)."
</p>


<h3>
  <a name="885342"> </a>10.4	 FLEX<em>lm</em> Version Compatibility
</h3>


<p>
  <a name="945320"> </a>When an end user has licensed products that incorporate various versions of FLEX<em>lm</em>, care must be taken to insure that the correct versions of <code>lmgrd</code> and the FLEX<em>lm</em> utilities are used. The most recent (highest version number) <code>lmgrd</code> and utilities should be used. The version of <code>lmgrd</code> must be greater than or equal to the version of the vendor daemon and the version of the vendor daemon must be greater than or equal to the version of client application that incorporates FLEX<em>lm</em>. 
</p>


<p>
  <a name="885353"> </a>To determine the version of any FLEX<em>lm</em>-based product, use the following command:
</p>

<dl>  <dl>
     <dt> <a name="885354"> </a><CODE>lmver <code><em>program_name</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="885355"> </a>On UNIX systems, you can also use:
</p>

<dl>  <dl>
     <dt> <a name="885356"> </a><CODE>strings <code><em>program_name</em></code> | grep Copy</CODE>
  </dl>
</dl>
<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="885457"> </a>Chapter 11 <br>UNIX Platform-Specific Notes
</h2>
<hr>


<h3>
  <a name="885472"> </a>11.1	 Hewlett Packard
</h3>


<p>
  <a name="885474"> </a>The <code>/dev/lan0</code> device must be readable to obtain an ethernet hostid. The <code>uname -i</code> hostid is preferable for this reason, and because ethernet is not always present.
</p>


<p>
  <a name="885475"> </a>In v2.4, <code>/dev/lan0</code> must have read and write permissions for everyone. Ethernet and FDDI are known to be supported devices, although earlier versions of HP-UX had a bug with FDDI as hostid.
</p>


<h3>
  <a name="885477"> </a>11.2	 IBM
</h3>


<p>
  <a name="885479"> </a>On RS/6000, <code>lmgrd</code> cannot be started in <code>/etc/rc</code> because on that OS the TCP/IP networking is started after <code>/etc/rc</code> is run. IBM has recommended that this be performed in the <code>/etc/inittab</code> file. Add a line like the following to <code>/etc/inittab</code> after the lines which start networking:
</p>

<dl>  <dl>
     <dt> <a name="885481"> </a><CODE>rclocal:2:wait:/etc/rc.local &gt; /dev/console 2&gt;&amp;1</CODE>
  </dl>
</dl>
<p>
  <a name="885482"> </a>IBM changed the system call that returns the node id (<code>uname</code>) several times; most recently, in AIX 3.1, the low-order decimal digit of the machine serial number was left off. The AIX 3003 version has a corrected system call which returns the entire serial number. This means that the hostid of your customer's RS/6000 system <em>can change</em> when they upgrade OS revisions. We know of no workaround other than to re-issue licenses.
</p>


<p>
  <a name="885485"> </a>We believe that this condition stabilized in AIX&nbsp;v3.1.
</p>


<h3>
  <a name="943248"> </a>11.3	 Linux
</h3>


<p>
  <a name="943256"> </a>If you are having difficulties building the FLEX<em>lm</em> SDK on your Linux platform, make sure that you have installed the correct platform-specific FLEX<em>lm</em> file (we provide three):
</p>


<p>
  <a name="943494"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="943501"> </a>Intel Linux Redhat v6; Caldera v2.3+
<br></td>
    <td><a name="943613"> </a><code>i86_r6.tar
<br></code></td>
  </tr>
  <tr>
    <td><a name="943505"> </a>Intel Linux Glibc 2.3; Redhat v5.x:
<br></td>
    <td><a name="943507"> </a><code>i86_g2.tar
<br></code></td>
  </tr>
  <tr>
    <td><a name="943509"> </a>Intel Linux Libc 1.x:
<br><ul>
<br>  <li><a name="943532"> </a>Caldera v1.x and v2.0-2.2
<br>
<br>  <li><a name="943540"> </a>Redhat v4.x
<br>
<br></ul>
<br></td>
    <td><a name="943511"> </a><code>i86_l1.tar
<br></code></td>
  </tr>
</table>




<p>
  <a name="943498"> </a>
</p>


<p>
  <a name="943283"> </a>GLOBEtrotter has seen the following three types of problems with the Linux platform:
</p>

<ul>
  <li><a name="943288"> </a>Incompatible executables

  <dl>
     <dt> <a name="943289"> </a>Executables built and linked on Redhat v4 are not fully forward compatible with Redhat 5 or 6. They may start to run but may later crash with indecipherable causes. 
  </dl>
  <li><a name="943292"> </a>Incompatible object files

  <dl>
     <dt> <a name="943293"> </a>Object files (<code>*.o</code>) created on Redhat v4 or v5 and moved to a Redhat v6 system will not link correctly on Redhat v6. If all the object files are fully linked on Redhat v5, the v5 executable will run fine on Redhat v6. 
  </dl>
  <li><a name="943297"> </a>Unexplained problems

  <dl>
     <dt> <a name="943298"> </a>We have customers that have reportedly not been able to build or run the FLEX<em>lm</em> kit for Redhat v6 despite <code>uname -a</code> indicating that these customers are using the same Redhat v6 that GLOBEtrotter uses to build FLEX<em>lm</em>. In these rare cases, we have not been able to resolve the situation and are not aware of what causes the problem. 
  </dl>
</ul>

<h3>
  <a name="943251"> </a>11.4	 SGI
</h3>


<p>
  <a name="885494"> </a>SGI has a variety of CPUs, operating systems, and compiler switches that are mutually incompatible. To explain, it's useful to first understand the different CPUs, operating systems, and switches:
</p>


<h5>
  <a name="885495"> </a>Operating Systems
</h5>


<p>
  <a name="922179"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="922190"> </a>IRIX 6
<br></td>
    <td><a name="922192"> </a>64-bit OS, supports 64- and 32-bit applications.
<br></td>
  </tr>
</table>




<p>
  <a name="922183"> </a>
</p>


<h5>
  <a name="922205"> </a>MIPS Chips
</h5>


<p>
  <a name="922218"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="922225"> </a>MIPS1
<br></td>
    <td><a name="922227"> </a>First MIPS chip. The chip itself is no longer supported 
<br>by SGI, but it's possible to generate binaries that run 
<br>on this chip. R1000 systems(?).
<br></td>
  </tr>
  <tr>
    <td><a name="922229"> </a>MIPS3
<br></td>
    <td><a name="922231"> </a>Not much is known about MIPS2, and it's not relevant 
<br>anyway.
<br></td>
  </tr>
  <tr>
    <td><a name="922233"> </a>MIPS3
<br></td>
    <td><a name="922235"> </a>32- and 64-bit binaries. R4000 and R6000 systems.
<br></td>
  </tr>
  <tr>
    <td><a name="922237"> </a>MIPS4
<br></td>
    <td><a name="922239"> </a>Improved 64-bit support. R8000 and R10000 systems.
<br></td>
  </tr>
</table>




<p>
  <a name="922222"> </a>
</p>


<h5>
  <a name="885503"> </a>Compiler Switches on IRIX 6
</h5>


<p>
  <a name="922281"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="922288"> </a><code>-o32
<br></code></td>
    <td><a name="922290"> </a>It is the "old 32-bit object" format.
<br></td>
  </tr>
  <tr>
    <td><a name="922292"> </a><code>-n32
<br></code></td>
    <td><a name="922294"> </a>Native to IRIX 6, it is the "new" 32-bit format.
<br></td>
  </tr>
  <tr>
    <td><a name="922296"> </a><code>-64
<br></code></td>
    <td><a name="922298"> </a>Native to IRIX 6; 64-bit.
<br></td>
  </tr>
</table>




<p>
  <a name="922285"> </a>
</p>


<h5>
  <a name="885507"> </a>Other Compiler Switches
</h5>


<p>
  <a name="922325"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="922332"> </a><code>-xgot
<br></code></td>
    <td><a name="922334"> </a>If your application exceeds 64,000 global variables, 
<br>you must compile and link with objects that have this 
<br>flag. if you need this, use the libraries with the <code>_xgot</code> 
<br>suffix.
<br></td>
  </tr>
</table>




<p>
  <a name="885509"> </a>We provide two SGI directories:
</p>


<p>
  <a name="922352"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="922363"> </a><code>sgi32_u6
<br></code></td>
    <td><a name="922365"> </a>32-bit IRIX-6. <code>liblmgr.a</code> (<code>-n32</code>) or 
<br><code>liblmgr_o32.a</code> (<code>-o32</code>). MIPS3 libraries run on 
<br>MIPS4 systems. Requires FLEX<em>lm</em> sgi vendor key.
<br></td>
  </tr>
  <tr>
    <td><a name="922367"> </a><code>sgi64_u6
<br></code></td>
    <td><a name="922369"> </a>64-bit (<code>-64</code>) IRIX-6. <code>liblmgr.a</code>. MIPS3 libraries run 
<br>on MIPS4 systems. Requires FLEX<em>lm</em> sgi64 vendor 
<br>key. 
<br></td>
  </tr>
</table>




<p>
  <a name="922356"> </a>
</p>


<h5>
  <a name="885525"> </a>FLEX<em>lm</em> Vendor Keys for SGI
</h5>


<p>
  <a name="922441"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="922448"> </a>sgi
<br></td>
    <td><a name="922450"> </a>All SGI 32-bit applications, including <code>sgi32_u6</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="922452"> </a>sgi64
<br></td>
    <td><a name="922454"> </a>All SGI 64-bit applications, including <code>sgi64_u6</code>.
<br></td>
  </tr>
</table>




<p>
  <a name="922445"> </a>
</p>


<h5>
  <a name="885529"> </a>SGI "Origin" systems
</h5>


<p>
  <a name="885530"> </a>These "modular" systems can have more than one hostid. <code>lmhostid</code> will report all the hostids for these systems. <em>A license should be generated for only one of these hostids.</em>
</p>


<h3>
  <a name="885532"> </a>11.5	 SCO
</h3>


<p>
  <a name="885533"> </a>Part of the <code>install_flexlm.ftp</code> install scripts may fail on SCO systems. It is not difficult to install without the scripts. Edit the <code>machind/lm_code.h</code> file to put in the correct <code>VENDOR_KEY</code>s (obtained from GLOBEtrotter Software) and <code>ENCRYPTION_SEED</code>s (32-bit numbers you make up that make license files unique) and <code>VENDOR_NAME</code>. Then, if it's not an evaluation copy, in the <code>sco_u3</code> directory, edit the makefile from <code>DAEMON = demo</code>, replacing <code>demo</code> with your vendor daemon name. Then type <code>make</code> in the <code>sco_u3</code> directory.
</p>


<p>
  <a name="885537"> </a>UDP communications are not supported because of an apparent flaw in the SCO OS.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="885653"> </a>Chapter 12 <br>Windows Platform-Specific Notes
</h2>
<hr>


<p>
  <a name="893493"> </a>FLEX<em>lm</em> supports the Windows platforms using two sets of 32-bit libraries (<code>lmgr.lib</code> and <code>lmgr327b.dll</code>). The 32-bit libraries supports clients and servers on Windows NT 3.5, 3.51, 4.0 and Windows 95/98/2000.
</p>


<h3>
  <a name="885666"> </a>12.1	 Supported C Compilers
</h3>


<p>
  <a name="885674"> </a>The FLEX<em>lm</em> client library on Windows NT is implemented as a static library or a DLL. The DLL can interface with almost any compiler, but is less secure. However, to build your vendor daemon on a Windows system, FLEX<em>lm</em> supports only the Microsoft Visual C++ compiler 5.0 or greater.
</p>


<p>
  <a name="885687"> </a>In order for FLEX<em>lm</em> API include files to compile properly on Windows platforms, two compile-time flags must be defined: <code>PC</code>, and <code>_WINDOWS</code>. On Windows NT systems, (32-bit) an additional compile time flag, <code>WINNT</code>, must be defined. This flag will be used to include proper macro definitions in <code>lmclient.h</code> for FLEX<em>lm</em> on Windows systems. 
</p>


<h3>
  <a name="924568"> </a>12.2	 Using Languages Other Than C
</h3>


<p>
  <a name="924569"> </a>There is a FLEX<em>lm</em> API that is designed for non-C languages such as Visual Basic to eliminate the usage of pointers. It is documented in the <code>examples/vb/vb4.0/Visual_Basic.doc</code>.
</p>


<h3>
  <a name="923696"> </a>12.3	 Linking to your Program
</h3>


<p>
  <a name="923700"> </a>FLEX<em>lm</em> can be linked into your application in three ways:
</p>

<ul>
  <li><a name="923704"> </a>Linking statically with a FLEX<em>lm</em> library that was built with the static C Runtime Library (recommended)

  <dl>
     <dt> <a name="923708"> </a>The static FLEX<em>lm</em> library is compiled with Microsoft Visual C++ 5.0, 32-bit, with multi-threading enabled, static C Runtime Library (/MT). The static library is named <code>lmgr.lib</code>. 
  </dl>
  <li><a name="923712"> </a>Linking statically with a FLEX<em>lm</em> library that uses the C Runtime Library as a DLL.

  <dl>
     <dt> <a name="923716"> </a>GLOBEtrotter Software also provides a library compiled with /MD, multi-threaded, using the C Runtime Library as a DLL, called <code>lmgr_md.lib</code>.
  </dl>
  <li><a name="923720"> </a>Linking dynamically with the FLEX<em>lm</em> DLL (less secure)

  <dl>
     <dt> <a name="923721"> </a>The DLL version is called <code>lmgr327b.dll</code> with its associated import library <code>lmgr327b.lib</code>. The <code>lmgr327b.dll</code> library is built using the multi-threaded statically linked C Runtime Library. Use the FLEXible API for enhanced DLL security. 
     <dt> <a name="923725"> </a>If it is necessary to use the FLEX<em>lm</em> DLL, please send email to support@globes.com, to get suggested enhancements to improve the security of your application. 
  </dl>
</ul>

<p>
  <a name="923729"> </a>If your application is a DLL and the FLEX<em>lm</em> library is linked into this DLL, then you need to set one special attribute to allow the Windows context to be properly set. See <a href="all.htm#882913">Section 4.32, "LM_A_WINDOWS_MODULE_HANDLE</a>."
</p>


<h3>
  <a name="885723"> </a>12.4	 FLEX<em>lm</em> Callback Routines
</h3>


<p>
  <a name="885727"> </a>The FLEX<em>lm</em> API supports application callbacks on various events such as lost of license and hostid acquisition. Like all Windows SDK standard callback routines, FLEX<em>lm</em> application callback routines need special attention depending upon the environment that you are using. The following code segments from the sample program demonstrates how this should be done:
</p>

<dl>  <dl>
     <dt> <a name="885735"> </a><CODE>void LM_CALLBACK_TYPE Quit(char * <code><em>feature</em></code>)</CODE>
  </dl>
</dl>
<h3>
  <a name="885739"> </a>12.5	 FLEX<em>lm</em> exit() Callback
</h3>


<p>
  <a name="885743"> </a>The default operation of FLEX<em>lm</em> when the connection to the server is lost is to try five times and then exit the program.
</p>


<h3>
  <a name="923672"> </a>12.6	 Hardware Hostids (Dongles)
</h3>


<p>
  <a name="923673"> </a>The software for the various hardware based hostid's are stored in the <code>FLEXID7</code> and <code>FLEXID8</code> directories. Consult those locations for more details.
</p>


<p>
  <a name="923674"> </a>A hostid that contains FLEXID indicates a dongle hostid. It has the form <code>FLEXID=</code><code><em>n</em></code><code>-</code><code><em>xxxxxxxx</em></code>, where <code><em>n</em></code> indicates which dongle type is being used.
</p>


<h5>
  <a name="923675"> </a>FLEXID=7-...
</h5>


<p>
  <a name="923676"> </a>In 16-bit modes, you will need to use <code>SUPERPRO.DLL</code> (4.032 bytes, dated 5-8-1995).
</p>


<p>
  <a name="923677"> </a>For operating under Windows NT, you will need to install a set of NT drivers, <code>SENTTEMP.HLP</code>, and <code>SENTTEMP.SYS</code><code><em>.</em></code>
</p>


<h5>
  <a name="923678"> </a>FLEXID=8-...
</h5>


<p>
  <a name="923679"> </a>For use in 32-bit mode on Windows 95, <code>VSAUTHD.386</code> must be installed.
</p>


<p>
  <a name="923680"> </a>For use on NT in 32-bit mode, the <code>DS1410D.SYS</code> driver must be installed.
</p>


<h3>
  <a name="924077"> </a>12.7	 FLEX<em>lm</em> TCP/IP Network Problem
</h3>


<p>
  <a name="924078"> </a>The Microsoft TCP <font  face="Arial" size="2">connect()</font> behavior has an important bug for which there is no fix. The Microsoft TCP implementation does not allow the programmer any effective control over the duration of a connect call, timeouts, retry attempts, etc.
</p>


<p>
  <a name="924079"> </a>The Microsoft TCP connect behavior causes needless delays under the following condition: when clients attempt to talk to a license server, and the server node is running, but <code>lmgrd</code> is not, there is a 1.5 second delay on Windows, and this delay does not occur on other operating systems.
</p>


<p>
  <a name="924083"> </a>In FLEX<em>lm</em>, this is most notable when using the environment variable <code>LM_LICENSE_FILE</code> set to <code>@</code><code><em>host</em></code>, and <code><em>host</em></code> is up, but <code>lmgrd</code> is not running. This causes a delay up to 15 seconds, 1.5 seconds for the attempted connect to each of the ten default ports, 27000-27009.
</p>


<h3>
  <a name="885859"> </a>12.8	 Environment Variables (32-Bit Platforms)
</h3>


<p>
  <a name="885860"> </a>When running Windows applications, it is sometimes difficult to set environment variables. On NT, because each user can have his own environment, it is sometimes confusing as to which variables are set. You can now either set environment variables in the traditional way, i.e., the <code>set</code> command in <code>autoexec.bat</code>, the Control Panel<img src="graphics/arrwrite.gif">System<img src="graphics/arrwrite.gif">Environment (NT), or by using the registry. The priority is set to favor normal environment variables over registry entries. To set an environment variable using the registry, make an entry in <code>HKEY_LOCAL_MACHINE</code><img src="graphics/arrwrite.gif"><code>SOFTWARE</code><img src="graphics/arrwrite.gif"><code>FLEXlm License Manager</code> as a String Value. Any FLEX<em>lm</em> application will then see this in its environment. This will be especially useful for setting the license file (if not using the default) using <code>LM_LICENSE_FILE</code>, or other parameters when the server is running as an NT Service.
</p>


<p>
  <a name="923683"> </a>When combining license files as a license file list in <code>LM_LICENSE_FILE</code>, use " ; " instead of " : ," e.g., <code>file1;file2</code>.
</p>


<h5>
  <a name="923633"> </a>See Also
</h5>

<ul>
  <li><a name="923637"> </a><a href="all.htm#882115">Section 3.30, "lc_set_registry()</a>"

</ul>

<h3>
  <a name="925845"> </a>12.9	 Server Environment Variables
</h3>


<p>
  <a name="925849"> </a>Many aspects of FLEX<em>lm</em> can be controlled using environment variables. These are mentioned in the Reference Manual. There are limitations to them depending on the platform. You can set these environment variables before entering Windows 95/98 in the <code>autoexec.bat</code> files. 
</p>


<p>
  <a name="925850"> </a>We have allowed an alternate way of setting environment variables, registry entries. When FLEX<em>lm</em> looks for a environment variable, it first looks to the program's environment variables. If it does not find it, it then looks into the registry in HKEY_LOCAL_MACHINE<img src="graphics/arrwrite.gif">SOFTWARE<img src="graphics/arrwrite.gif">FLEXlm License Manager<img src="graphics/arrwrite.gif"><code><em>env_var</em></code> where <code><em>env_var</em></code> is the environment variable.
</p>


<p>
  <a name="925854"> </a>If it finds it, it uses that value as the value of the environment variable.
</p>


<p>
  <a name="925858"> </a>In this version of FLEX<em>lm</em>, a new function was added to simplify this procedure. The function is <font  face="Arial" size="2">lc_set_registry()</font> (see <a href="all.htm#882115">Section 3.30, "lc_set_registry()</a>."
</p>


<p>
  <a name="925862"> </a>This function allows you to write into the registry (assuming your program has the appropriate security attributes). If you do not, the error returned is -68, LM_NOADMINGROUP.
</p>


<p>
  <a name="925863"> </a>The Server software (<code>lmgrd.exe</code> and your vendor daemon) can also use registry values when they are started as a SERVICE on a NT system. The values they use are in a sub-key in the above FLEX<em>lm</em> License Manager key. The following code snippet taken from <code>installs.c</code> shows how to create registry entries for the server programs.
</p>

<dl>  <dl>
     <dt> <a name="925867"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// next write registry entries</CODE>
     <dt> <a name="925868"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Update the registry</CODE>
     <dt> <a name="925869"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Try creating/opening the registry key</CODE>
     <dt> <a name="925870"> </a><CODE>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, </CODE>
     <dt> <a name="925871"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"SOFTWARE", </CODE>
     <dt> <a name="925872"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0, </CODE>
     <dt> <a name="925873"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KEY_WRITE,</CODE>
     <dt> <a name="925874"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;hcpl) == ERROR_SUCCESS)</CODE>
     <dt> <a name="925875"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="925876"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HKEY happ;</CODE>
     <dt> <a name="925877"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DWORD dwDisp;</CODE>
     <dt> <a name="925878"> </a><CODE>char new_name[120];</CODE>
     <dt> <a name="925879"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(new_name,"FLEXlm License Manager\\%s", Service_Name);</CODE>
     <dt> <a name="925880"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (RegCreateKeyEx(hcpl,</CODE>
     <dt> <a name="925881"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_name,</CODE>
     <dt> <a name="925882"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,</CODE>
     <dt> <a name="925883"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"",</CODE>
     <dt> <a name="925884"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG_OPTION_NON_VOLATILE,</CODE>
     <dt> <a name="925885"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KEY_WRITE,</CODE>
     <dt> <a name="925886"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,</CODE>
     <dt> <a name="925887"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;happ,</CODE>
     <dt> <a name="925888"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;dwDisp) == ERROR_SUCCESS)</CODE>
     <dt> <a name="925889"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="925890"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegSetValueEx(happ,</CODE>
     <dt> <a name="925891"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Lmgrd",</CODE>
     <dt> <a name="925892"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,</CODE>
     <dt> <a name="925893"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG_SZ,</CODE>
     <dt> <a name="925894"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Lmgrd_Path,</CODE>
     <dt> <a name="925895"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strlen(Lmgrd_Path));</CODE>
     <dt> <a name="925897"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegSetValueEx(happ,</CODE>
     <dt> <a name="925898"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"LMGRD_LOG_FILE",</CODE>
     <dt> <a name="925899"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,</CODE>
     <dt> <a name="925900"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG_SZ,</CODE>
     <dt> <a name="925901"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log_File_Path,</CODE>
     <dt> <a name="925902"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strlen(Log_File_Path));</CODE>
     <dt> <a name="925903"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegSetValueEx(happ,</CODE>
     <dt> <a name="925904"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"License",</CODE>
     <dt> <a name="925905"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,</CODE>
     <dt> <a name="925906"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG_SZ,</CODE>
     <dt> <a name="925907"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;License_Path,</CODE>
     <dt> <a name="925908"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strlen(License_Path));</CODE>
     <dt> <a name="925909"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegSetValueEx(happ,</CODE>
     <dt> <a name="925910"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Service",</CODE>
     <dt> <a name="925911"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,</CODE>
     <dt> <a name="925912"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG_SZ,</CODE>
     <dt> <a name="925913"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Service_Name,</CODE>
     <dt> <a name="925914"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strlen(Service_Name));</CODE>
     <dt> <a name="925916"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Finished with keys</CODE>
     <dt> <a name="925917"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegCloseKey(happ);</CODE>
     <dt> <a name="925919"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="925920"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegCloseKey(hcpl);</CODE>
  </dl>
</dl>
<h3>
  <a name="940604"> </a>12.10	 Manually Installing lmgrd as a Service
</h3>


<p>
  <a name="940622"> </a>To install <code>lmgrd</code> as a service manually (rather than using the supplied LMTOOLS), use the <code>installs.exe</code> command provided by FLEX<em>lm</em>. For example:
</p>

<dl>  <dl>
     <dt> <a name="940626"> </a><CODE>D:\flexlm&gt; installs d:\flexlm\lmgrd.exe</CODE>
  </dl>
</dl>
<p>
  <a name="940627"> </a>Note that the full path name to <code>lmgrd.exe</code> must follow the <code>installs</code> command. You must also make sure that the full path name including drive letter for your vendor daemon is specified correctly in your license file.
</p>


<p>
  <a name="940628"> </a>After <code>installs.exe</code> is run successfully, <code>lmgrd</code> is installed as a Windows NT service and will be started automatically each time your system is booted. To start <code>lmgrd</code> right after running <code>installs.exe</code> without rebooting your system, you may use the Service icon from the Windows NT Control Panel. Look for the FLEX<em>lm</em> licensing service from the dialog after you double-click the Service icon.
</p>


<p>
  <a name="940629"> </a>To remove <code>lmgrd</code> from the registered service list, simple type <code>installs remove</code>. If you wish to customize the <code>installs</code> program, the source code is included in the <code>machind</code> directory.
</p>


<p>
  <a name="940630"> </a>When <code>lmgrd.exe</code> is installed as a service on your system, you may use the following procedure to set the license file path for <code>lmgrd</code> by updating the system registry:
</p>

<ol type="1">
  <li><a name="940631"> </a>Install <code>lmgrd.exe</code> as a service as described previously.
  <li><a name="940632"> </a>Run Registry Editor, <code>system32\regedt32.exe</code>.
  <li><a name="940633"> </a>Select HKEY_LOCAL_MACHINE:SYSTEM:
  <dl>
     <dt> <a name="940634"> </a>CurrentControlSet:Control:Session Manager:Environment
  </dl>
  <li><a name="940635"> </a>From the menu bar, select Edit and then Add Value.
  <li><a name="940636"> </a>When the Add Value dialog box is displayed, enter <code>LM_LICENSE_FILE</code> as Value Name, and select REG_SZ as Data Type. Click OK.
  <li><a name="940637"> </a>At this point, the String Editor dialog box should appear. Enter the full path to the license file that you wish to select. Click OK.
  <li><a name="940638"> </a>Exit the Registry Editor.
  <li><a name="940639"> </a>Shut down your system and restart. <code>lmgrd.exe</code> should now be using the selected license file. To verify this, you can view <code>lmgrd.log</code> in the <code>system32</code> directory.
</ol>

<p>
  <a name="913041"> </a>
</p>
</blockquote>

<hr>

<table width="280" align="right" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td align=left><em>FLEXlm Reference Manual</em>
  </tr>
    <td align=left><em>December 2000</em></td>
</table>

<table border="0" align="left" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
</body>
</html>
