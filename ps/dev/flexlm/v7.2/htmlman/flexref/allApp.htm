<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="TEMPLATEBASE" content="Users Guide Template">
<meta name="LASTUPDATED" content="12/22/00 14:03:26">
<title>FLEXlm Reference Manual Appendixes</title>
</head>

<body link="#0066CC" vlink="#800080" text="#000000" alink="#FF0000" bgcolor="#FFFFFF"
background="graphics/backgrnd.gif">

<blockquote>
<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="886162"> </a>Appendix A  <br>Industry-Standard Licensing APIs
</h2>
<hr>


<p>
  <a name="886173"> </a>FLEX<em>lm</em> offers the most widely used licensing API available--the FLEX<em>lm</em> API, which is used by over 1500 software vendors worldwide. However, there has been much effort expended in the search for a "standard" licensing API. 
</p>


<p>
  <a name="886177"> </a>FLEX<em>lm</em> offers the ISV the choice of six standard APIs:
</p>

<ul>
  <li><a name="886181"> </a>FLEX<em>lm</em> Trivial API

  <li><a name="886185"> </a>FLEX<em>lm</em> Simple API

  <li><a name="886189"> </a>FLEX<em>lm</em> FLEXible API

  <li><a name="947403"> </a>FLEX<em>lm</em> Java API

  <li><a name="947410"> </a>FLEX<em>lm</em> Visual Basic API

  <li><a name="886193"> </a>LSAPI (a proposed standard)

</ul>

<p>
  <a name="886197"> </a>FLEX<em>lm</em> is the only licensing system available which supports all six APIs.
</p>


<h3>
  <a name="886224"> </a>A.1	 The FLEX<em>lm</em> Trivial and Simple APIs
</h3>


<p>
  <a name="886225"> </a>These APIs are suitable for most applications, and are robust and easy to implement. See the <em>FLEXlm Programmers Guide</em> for complete information on these two APIs. 
</p>


<h3>
  <a name="915774"> </a>A.2	 The FLEX<em>lm</em> FLEXible API
</h3>


<p>
  <a name="915778"> </a>The FLEXible API has evolved since 1988, with the input of most of the major software vendors in the UNIX software industry. The goal of the FLEXible API is to give you your choice of licensing models in an easy to implement, robust package. The FLEXible API is documented in <a href="all.htm#892247">Chapter&nbsp;3, "FLEXible API</a>."
</p>


<h3>
  <a name="886284"> </a>A.3	 LSAPI v1.1
</h3>


<p>
  <a name="886285"> </a>The LSAPI interface, a licensing API first proposed in May, 1992, was designed by a consortium of software vendors with participation from several licensing system vendors. The main "claim to fame" of this interface is that it attempts to provide a solution whereby the end-user can choose the license server product from the licensing system vendor of their own choice. While the LSAPI seems to be a simple API, it hides the fact that your code will increase in complexity in order to solve the problem of the replaceable license server, (since both the license server and the licensing system library are, in theory, replaceable by the end user, any security <em>must </em>be built into your code, <em>independent </em>of the license server). The complexity is exposed to you in the "challenge mechanism," which is a standard authentication technique known as "handshaking."
</p>


<p>
  <a name="886286"> </a><HR WIDTH=75%><FONT COLOR=RED>Caution:	 If you are considering using LSAPI in your product, you should read U.S. patent #5,375,206 issued to HP, and understand its implications.</FONT><HR WIDTH=75%>


<p>
  <a name="886290"> </a>LSAPI has several significant drawbacks compared to the FLEX<em>lm</em> APIs. In addition, GLOBEtrotter believes that the stated goal of license server independence cannot be met by the current version of the LSAPI spec (see last point below). Some of the drawbacks of LSAPI compared to the native FLEX<em>lm</em> APIs are:
</p>

<ul>
  <li><a name="886294"> </a>Unreasonable error reporting (only a total of 14 error codes.)

  <li><a name="886295"> </a>No ability for the vendor to support license queueing.

  <li><a name="886296"> </a>No vendor-specific checkout filtering.

  <li><a name="886298"> </a>New hostid types are not definable by the software vendor.

  <li><a name="886299"> </a>No provision to pass messages between the client and license server.

  <li><a name="886300"> </a>No way to get license status without doing I/O to the license server.

  <li><a name="886301"> </a>No way to support a node-locked license without a license server.

  <li><a name="886302"> </a>No way to retrieve information about the licensing policy.

  <li><a name="886303"> </a>No way to ship a vendor-neutral license. This means that, in order to accomplish the stated goal of allowing your end-user to select the licensing system from the vendor of their choice, you would have to provide licenses in the format required by <em>each and every</em> license system which your customer might want to choose. In practice, what this means is that you would need to build and test with every possible licensing system.


<p>
  <a name="886307"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 You cannot mix LSAPI calls with the native FLEX<em>lm</em> API calls.</FONT><HR WIDTH=75%>

</ul>

<h4>
  <a name="886308"> </a>A.3.1	 Data Types for All Calls
</h4>


<p>
  <a name="926571"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="926578"> </a><code>(LS_ULONG)
<br></code></td>
    <td><a name="926580"> </a><code>(unsigned long)</code>
<br></td>
  </tr>
  <tr>
    <td><a name="926582"> </a><code>(LS_STATUS_CODE)
<br></code></td>
    <td><a name="926584"> </a><code>(unsigned long) </code>
<br></td>
  </tr>
  <tr>
    <td><a name="926586"> </a><code>(LS_STR)
<br></code></td>
    <td><a name="926588"> </a><code>(char) </code>
<br></td>
  </tr>
  <tr>
    <td><a name="926590"> </a><code>(LS_CHALLENGE)
<br></code></td>
    <td><a name="926592"> </a><code>(structure) </code>
<br></td>
  </tr>
  <tr>
    <td><a name="926594"> </a><code>(LS_CHALLENGE_FLEXLM)
<br></code></td>
    <td><a name="926596"> </a><code>(structure) </code>
<br></td>
  </tr>
  <tr>
    <td><a name="926615"> </a><code>(LS_HANDLE)
<br></code></td>
    <td><a name="926617"> </a>(unsigned long) 
<br></td>
  </tr>
  <tr>
    <td><a name="926611"> </a><code>(LS_VOID)
<br></code></td>
    <td><a name="926613"> </a>(void) 
<br></td>
  </tr>
</table>




<p>
  <a name="926575"> </a>
</p>


<h3>
  <a name="886316"> </a>A.4	 LSAPI General Calls
</h3>


<p>
  <a name="926688"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="926695"> </a><code>(LS_STATUS_CODE) 
<br>LSEnumProviders((LS_ULONG) </code><code><em>Index</em></code><code>, 
<br>(LS_STR) *</code><code><em>Buffer</em></code><code>)
<br></code></td>
    <td><a name="926697"> </a>List providers of 
<br>licensing service.
<br></td>
  </tr>
  <tr>
    <td><a name="926699"> </a><code>(LS_STATUS_CODE) 
<br>LSGetMessage((LS_HANDLE) </code><code><em>Handle</em></code> 
<br><code>(LS_STATUS_CODE) </code><code><em>Value</em></code>,<code> (LS_STR)</code> 
<br>*<code><em>Buffer</em></code>,<code> (LS_ULONG) </code><code><em>BufferSize</em></code>)
<br></td>
    <td><a name="926701"> </a>Get message text 
<br>from licensing 
<br>system.
<br></td>
  </tr>
  <tr>
    <td><a name="926703"> </a><code>(LS_STATUS_CODE) LSQuery((LS_HANDLE) 
<br></code><code><em>Handle</em></code>,<code> (LS_ULONG) </code><code><em>Information</em></code>, 
<br><code>(LS_VOID) </code>*<code><em>InfoBuffer</em></code>,<code> (LS_ULONG)</code> 
<br><code><em>BufferSize</em></code>,<code> (LS_ULONG)</code> 
<br>*<code><em>ActualBufferSize</em></code>)
<br></td>
    <td><a name="926705"> </a>Query license 
<br>information.
<br></td>
  </tr>
  <tr>
    <td><a name="926707"> </a><code>(LS_STATUS_CODE) 
<br>LSRelease((LS_HANDLE) </code><code><em>Handle</em></code><code>, 
<br>(LS_ULONG) </code><code><em>TotUnitsConsumed</em></code><code>, 
<br>(LS_STR) *</code><code><em>LogComment</em></code><code>)
<br></code></td>
    <td><a name="926709"> </a>Release license.
<br></td>
  </tr>
  <tr>
    <td><a name="926832"> </a><code>(LS_STATUS_CODE) 
<br>LSUpdate((LS_HANDLE) </code><code><em>Handle</em></code><code>, 
<br>(LS_ULONG) </code><code><em>TotUnitsConsumed</em></code><code>, 
<br>(LS_ULONG) </code><code><em>TotUnitsReserved</em></code><code>, 
<br>(LS_STR) *</code><code><em>LogComment</em></code><code>, (LS_CHALLENGE) 
<br>*</code><code><em>lpChallenge</em></code><code>, (LS_ULONG) 
<br>*</code><code><em>TotUnitsGranted</em></code><code>)
<br></code></td>
    <td><a name="926830"> </a>Update license 
<br>status.
<br></td>
  </tr>
  <tr>
    <td><a name="926754"> </a><code>(LS_STATUS_CODE) LSRequest((LS_STR) 
<br>*</code><code><em>LicenseSystem</em></code><code>, (LS_STR) 
<br>*</code><code><em>PublisherName</em></code><code>, (LS_STR) 
<br>*</code><code><em>ProductName</em></code><code>, (LS_STR) *</code><code><em>Version</em></code><code>, 
<br>(LS_ULONG) </code><code><em>TotUnitsReserved</em></code><code>, 
<br>(LS_STR) *</code><code><em>LogComment</em></code><code>, (LS_CHALLENGE) 
<br>*</code><code><em>Challenge</em></code><code>, (LS_ULONG) 
<br>*</code><code><em>TotUnitsGranted</em></code><code>, (LS_HANDLE) 
<br>*</code><code><em>Handle</em></code><code>)
<br></code></td>
    <td><a name="926713"> </a>Request license.
<br></td>
  </tr>
</table>




<p>
  <a name="926692"> </a>
</p>


<p>
  <a name="886337"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The challenge in your first <font  face="Arial" size="2">LSRequest()</font> call must be of type <code>LS_CHALLENGE_FLEXLM</code>, which is a FLEX<em>lm</em> vendor-specific challenge mechanism. Challenge should be setup as in the following code example before calling <font  face="Arial" size="2">LSRequest()</font>:</FONT><HR WIDTH=75%>

<dl>  <dl>
     <dt> <a name="886341"> </a><CODE>LS_CHALLENGE_FLEXLM *Challenge;</CODE>
     <dt> <a name="886342"> </a><CODE>LM_CODE(vendor_code, ENCRYPTION_SEED1, ENCRYPTION_SEED2, VENDOR_KEY1,</CODE>
    <dl>
       <dt> <a name="886343"> </a><CODE>VENDOR_KEY2, VENDOR_KEY3, VENDOR_KEY4, VENDOR_KEY5);</CODE>
    </dl>
     <dt> <a name="886344"> </a><CODE>...</CODE>
     <dt> <a name="886345"> </a><CODE>Challenge-&gt;Protocol = LS_FLEXLM_PROTOCOL;</CODE>
     <dt> <a name="886346"> </a><CODE>strcpy( Challenge-&gt;ChallengeData.VendorName, VENDOR_NAME);</CODE>
     <dt> <a name="886347"> </a><CODE>Challenge-&gt;ChallengeData.VendorCode = vendor_code;</CODE>
     <dt> <a name="886348"> </a><CODE>Challenge-&gt;Size = sizeof(*Challenge);</CODE>
     <dt> <a name="886349"> </a><CODE>...</CODE>
     <dt> <a name="886350"> </a><CODE>LSRequest( ...., (LS_CHALLENGE *)Challenge, ...);</CODE>
  </dl>
  </dl>

<p>
  <a name="886358"> </a>For more details on the LSAPI interface, see the "License Service Application Programming Interface, API Specification v1.1," or contact Microsoft via e-mail at lsapi@microsoft.com, or Dave Berry, Microsoft Developer Relations, 1 Microsoft Way, 4/2, Redmond, WA 98052-6399.
</p>


<p>
  <a name="886362"> </a>Remember, you cannot mix LSAPI and native FLEX<em>lm</em> calls in a single application. The license servers can support a mix of applications which use either native FLEX<em>lm</em> or LSAPI, but a single executable must use either native FLEX<em>lm</em> or LSAPI.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="921276"> </a>Appendix B  <br>UDP Communications 
</h2>
<hr>


<p>
  <a name="921280"> </a>FLEX<em>lm</em> supports the UDP connectionless transport, in addition to the default TCP connection-based transport. The use of UDP is normally not recommended.
</p>


<p>
  <a name="921282"> </a>TCP, the default, is recommended for the following reasons:
</p>

<ul>
  <li><a name="921283"> </a>With TCP, the server knows immediately when the client exits. It is therefore not essential that the client call <font  face="Arial" size="2">CHECKIN()</font>.

  <li><a name="921284"> </a>In our tests, TCP and UDP behave identically with regards to speed.

  <li><a name="921285"> </a>The only drawback to TCP is that the vendor daemon process requires a file descriptor per client. On modern OSs, a single process can handle 1000 or more file descriptors by default, and this number can usually be increased with a kernel parameter. Therefore this is not usually a drawback of any consequence.

</ul>

<h3>
  <a name="921287"> </a>B.1	 How to Select UDP Connections
</h3>


<p>
  <a name="921288"> </a>UDP can be selected by the application or by the end user, in the following ways:
</p>

<ul>
  <li><a name="921289"> </a>The application can call:

<dl>    <dl>
       <dt> <a name="921291"> </a><CODE>lc_set_attr(LM_A_COMM_TRANSPORT, LM_UDP);</CODE>
    </dl>
</dl>  <li><a name="921292"> </a>The end user can set the comm transport with the <code>FLEXLM_COMM_TRANSPORT</code> environment variable:

<dl>    <dl>
       <dt> <a name="921294"> </a><CODE>setenv FLEXLM_COMM_TRANSPORT UDP</CODE>
    </dl>
</dl></ul>
<p>
  <a name="921301"> </a>The application can prevent the user from setting the TRANSPORT mode via: 
</p>

<dl><dl>    <dl>
       <dt> <a name="921303"> </a><CODE>lc_set_attr(LM_A_ALLOW_SET_TRANSPORT, 0);</CODE>
    </dl>
</dl></dl>
<p>
  <a name="921304"> </a>The environment variable setting is disabled with this call.
</p>


<p>
  <a name="921308"> </a>FLEX<em>lm</em> defaults to TCP, and all the above options can be set to TCP. The order of precedence is (higher number takes precedence over lower number):
</p>

<ol type="1">
  <li><a name="921309"> </a>Default TCP
  <li><a name="921313"> </a>Environment variable specified -- <code><em></em></code><code>FLEXLM_COMM_TRANSPORT</code>
  <li><a name="921315"> </a>LM_A_ALLOW_SET_TRANSPORT == false. Environment variable is disabled.
  <li><a name="921317"> </a>Set in application -- <code><em></em></code>LM_A_COMM_TRANSPORT
  <li><a name="921318"> </a>Vendor daemon is pre-v3.0 -- TCP only.
</ol>

<h3>
  <a name="921320"> </a>B.2	 UDP Behavioral Differences
</h3>

<ul>
  <li><a name="921321"> </a>Servers that use UDP clients require a small, fixed number of sockets. This can be preferable on systems with limited resources and a large number of clients (500 or more). In addition, they never need to spawn additional vendor daemons, as TCP servers do when they use up the maximum number of file descriptors.

  <li><a name="921322"> </a>When a UDP client exits without doing a checkin, the server does not become immediately aware of this, but will time the license out. Therefore, applications should always call <font  face="Arial" size="2">lc_checkin()</font> before exiting. The default for a timeout is 45 minutes, but can be set in the application via:

<dl>    <dl>
       <dt> <a name="921323"> </a><CODE>lc_set_attr(LM_A_UDP_TIMEOUT, (LM_A_VAL_TYPE)<code><em>num_sec</em></code>);</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="921324"> </a>Therefore, a UDP client which does not, or is unable to, call <font  face="Arial" size="2">lc_checkin()</font>, will have a license checked out for 45 minutes (by default) after the program exits. This behavior will also be affected by LM_A_CHECK_INTERVAL. In particular, for UDP clients, LM_A_CHECK_INTERVAL must never be longer than LM_A_UDP_TIMEOUT, or the client will be timed out for no good reason. This is not normally fatal, but a client could lose a license to someone else in trying to retrieve it after being timed out.
     <dt> <a name="921326"> </a>Applications that call <font  face="Arial" size="2">lc_timer()</font> directly must ensure that they call it often enough to prevent being timed out.
  </dl>
  <li><a name="921327"> </a>When a client has to reconnect to a server (which can happen for numerous reasons), the reconnection process requires ten seconds for the client to timeout the read from a server which is down. With TCP, this recognition is instantaneous. The result is that a server's failure will cause a client using UDP to hang for a minimum of ten seconds, while with a TCP client, this recognition is transparent.

</ul>

<p>
  <a name="921331"> </a>In GLOBEtrotter Software's testing environment, we have found no discernible performance advantage in checking out licenses or getting status information via either TCP or UDP. 
</p>


<p>
  <a name="921332"> </a>Based on our test results, we find TCP to be a far superior mode of communication, and should be used wherever possible.
</p>


<h5>
  <a name="921333"> </a>See Also
</h5>

<ul>
  <li><a name="921337"> </a><a href="all.htm#882086">Section 3.29, "lc_set_attr()</a>"

  <li><a name="921341"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

  <li><a name="921349"> </a><a href="all.htm#882913">Section 4.3, "LM_A_CHECK_INTERVAL</a>"

  <li><a name="921353"> </a><a href="all.htm#940145">Section 5.13.2, "Special FLEXlm Hostids</a>"

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="921484"> </a>Appendix C  <br>FLEX<em>lm</em> Limits
</h2>
<hr>


<p>
  <a name="921488"> </a>Any limitations such as string lengths are listed here. Items that are unlimited are also listed for clarification.
</p>


<h3>
  <a name="921490"> </a>C.1	 License File Limits
</h3>


<p>
  <a name="921494"> </a>The limits on names for the major parameters employed in the FLEX<em>lm</em> license file are:
</p>


<p>
  <a name="927055"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="927062"> </a>Host name length
<br></td>
    <td><a name="927064"> </a>32 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927066"> </a>FEATURE name length
<br></td>
    <td><a name="927068"> </a>30 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927070"> </a>FEATURE/INCREMENT/<br>
<br>UPGRADE/PACKAGE line length 
<br></td>
    <td><a name="927072"> </a>2048 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927074"> </a>VENDOR name length
<br></td>
    <td><a name="927076"> </a>10 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927078"> </a>Version
<br></td>
    <td><a name="927080"> </a>10 characters, in floating point 
<br>format, e.g., <code>123.4567</code>, or 
<br><code>2.10
<br></code></td>
  </tr>
  <tr>
    <td><a name="927082"> </a>Latest expiration date
<br></td>
    <td><a name="927084"> </a>31-dec-9999 (but we 
<br>recommend using "permanent" 
<br>instead)
<br></td>
  </tr>
  <tr>
    <td><a name="927086"> </a>Number of users
<br></td>
    <td><a name="927088"> </a>32-bit integer
<br></td>
  </tr>
  <tr>
    <td><a name="927094"> </a>Number of FEATURE/INCREMENT/<br>
<br>UPGRADE lines
<br></td>
    <td><a name="927096"> </a>Unlimited 
<br></td>
  </tr>
  <tr>
    <td><a name="927098"> </a>Number of VENDORs
<br></td>
    <td><a name="927100"> </a>Unlimited
<br></td>
  </tr>
  <tr>
    <td><a name="927210"> </a>Number of SERVERs
<br></td>
    <td><a name="927212"> </a>3 (Redundant server licenses 
<br>are limited to 3 servers)
<br></td>
  </tr>
  <tr>
    <td><a name="927206"> </a>OVERDRAFT
<br></td>
    <td><a name="927208"> </a>32-bit integer
<br></td>
  </tr>
  <tr>
    <td><a name="927294"> </a>HOST_BASED=<code><em>n
<br></em></code></td>
    <td><a name="927296"> </a>32-bit integer
<br></td>
  </tr>
  <tr>
    <td><a name="927202"> </a>USER_BASED=<code><em>n
<br></em></code></td>
    <td><a name="927204"> </a>32-bit integer
<br></td>
  </tr>
  <tr>
    <td><a name="927198"> </a>MINIMUM=<code><em>n
<br></em></code></td>
    <td><a name="927200"> </a>32-bit integer
<br></td>
  </tr>
  <tr>
    <td><a name="927194"> </a>Other optional FEATURE attributes
<br></td>
    <td><a name="927196"> </a>Limited only by the total 
<br>length of the FEATURE line.
<br></td>
  </tr>
</table>




<p>
  <a name="927059"> </a>
</p>


<h3>
  <a name="921520"> </a>C.2	 Decimal Format License Limits
</h3>


<p>
  <a name="927308"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="927315"> </a>Max readable length that can be 
<br>converted to decimal
<br></td>
    <td><a name="927317"> </a>Approximately 100 characters. 
<br>Because ASCII text becomes 
<br>much larger in decimal format, 
<br>a FEATURE line of 100 
<br>characters is unreadable and 
<br>more prone to data entry errors 
<br>in decimal format.
<br></td>
  </tr>
  <tr>
    <td><a name="927319"> </a>Types of licenses that can be 
<br>converted to decimal
<br></td>
    <td><a name="927321"> </a>Everything but PACKAGE 
<br>and FEATURESET lines.
<br></td>
  </tr>
  <tr>
    <td><a name="927323"> </a>Types of FEATURE names that can be 
<br>converted to decimal
<br></td>
    <td><a name="927325"> </a>Only officially supported 
<br>FEATURE names. In 
<br>particular, " - " (hyphen) 
<br>cannot be converted.
<br></td>
  </tr>
</table>




<p>
  <a name="927312"> </a>
</p>


<h3>
  <a name="921525"> </a>C.3	 End-User Options File Limits
</h3>


<p>
  <a name="921526"> </a>The line length limit is the same as the FEATURE line length (2048 characters). There are no other string size limitations on anything in this file. Note that GROUPs can be made arbitrarily large by listing the GROUP more than once--FLEX<em>lm</em> concatenates such entries.
</p>


<h3>
  <a name="921531"> </a>C.4	 lc_set_attr() limits
</h3>


<p>
  <a name="927364"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="927371"> </a>LM_A_DISPLAY_OVERRIDE
<br></td>
    <td><a name="927373"> </a>32 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927375"> </a>LM_A_HOSTNAME_OVERRIDE
<br></td>
    <td><a name="927377"> </a>64 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927379"> </a>LM_A_USERNAME
<br></td>
    <td><a name="927381"> </a>20 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927383"> </a>LM_A_CHECKOUT_DATA
<br></td>
    <td><a name="927385"> </a>32 characters
<br></td>
  </tr>
  <tr>
    <td><a name="927387"> </a>LM_A_CHECK_INTERVAL
<br></td>
    <td><a name="927389"> </a>&gt;20 seconds
<br></td>
  </tr>
</table>




<p>
  <a name="927368"> </a>
</p>


<h3>
  <a name="921542"> </a>C.5	 Other API Limits
</h3>


<p>
  <a name="927437"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="927444"> </a>Vendor-defined hostid length
<br></td>
    <td><a name="927446"> </a>40 -- including the <code><em>NAME</em></code> 
<br>prefix.
<br></td>
  </tr>
  <tr>
    <td><a name="927452"> </a>Number of licenses in one 
<br><font  face="Arial" size="2">lc_checkout()</font> request
<br></td>
    <td><a name="927454"> </a>9999
<br></td>
  </tr>
  <tr>
    <td><a name="927456"> </a>Long error message length
<br></td>
    <td><a name="927458"> </a>1024 characters (length of 
<br>string returned from 
<br><font  face="Arial" size="2">lc_errstring()</font>)
<br></td>
  </tr>
</table>




<p>
  <a name="927441"> </a>
</p>


<h3>
  <a name="921550"> </a>C.6	 Vendor Daemon Limits
</h3>


<h5>
  <a name="921551"> </a>Number of Clients Per Vendor Daemon
</h5>


<p>
  <a name="921552"> </a>When using TCP, a single vendor daemon can support as many clients as the system limit for file descriptors and sockets, which varies from around 250 on sunos4 (the only known system with a limit this low) to 4000 on OSF/1 (SCO comes with a configurable default of around 8). 
</p>


<p>
  <a name="921553"> </a>In practice, we encourage end-users to put servers on systems configured with enough file descriptors per process to support the number of end users connecting to the vendor daemon, which may require reconfiguring the kernel to increase the number of file descriptors per process.
</p>


<p>
  <a name="921554"> </a>Nearly all systems can handle 250 clients per vendor daemon without performance problems, and large systems can easily support over a thousand.
</p>


<p>
  <a name="921555"> </a>When using UDP, there is no limit to the number of clients. Note that multiple daemons can be run on a single network, making the number of even TCP clients effectively unlimited.
</p>


<h5>
  <a name="921556"> </a>Number of Vendor Daemons Per Node
</h5>


<p>
  <a name="921557"> </a>A <em>particular</em> vendor daemon can only be run once per node. This is a security mechanism to prevent extra licenses from being granted. 
</p>


<p>
  <a name="921558"> </a>There is no limit to the number of <em>different</em> vendor daemons that can be run per node.
</p>


<h3>
  <a name="921560"> </a>C.7	 lmgrd Limits
</h3>


<p>
  <a name="927527"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="927534"> </a><code>lmgrd</code> processes per node
<br></td>
    <td><a name="927536"> </a>Unlimited
<br></td>
  </tr>
  <tr>
    <td><a name="927538"> </a>Default port number range
<br></td>
    <td><a name="927540"> </a>27000-27009
<br></td>
  </tr>
  <tr>
    <td><a name="927542"> </a>License files per <code>lmgrd</code> process
<br></td>
    <td><a name="927544"> </a>Unlimited
<br></td>
  </tr>
</table>




<p>
  <a name="927531"> </a>
</p>


<h3>
  <a name="921567"> </a>C.8	 Subnet, Domain, Wide-Area Network Limits
</h3>


<p>
  <a name="921574"> </a>FLEX<em>lm</em> has no limitations regarding subnets (because FLEX<em>lm</em> does not use <em>broadcast</em> messages).
</p>


<p>
  <a name="921575"> </a>If the host name in the license file is fully qualified (<code>name.domain.suf</code>) or is an IP address (<code><em>###.###.###.###</em></code>), then there are no limitations with regard to Internet domains.
</p>


<p>
  <a name="921576"> </a>There are no other limitations regarding wide-area networks.
</p>


<h3>
  <a name="921578"> </a>C.9	 LM_LICENSE_FILE, <em>VENDOR</em>_LICENSE_FILE
</h3>


<p>
  <a name="927616"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="927623"> </a>Number of licenses in path
<br></td>
    <td><a name="927625"> </a>Unlimited
<br></td>
  </tr>
</table>




<p>
  <a name="927620"> </a>
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="886468"> </a>Appendix D  <br>FLEX<em>lm</em> Status Return Values
</h2>
<hr>


<h3>
  <a name="886472"> </a>D.1	 Error Number Table
</h3>


<p>
  <a name="945758"> </a>These are all the possible errors returned from <font  face="Arial" size="2">lc_</font><em>xxx</em><font  face="Arial" size="2">()</font> functions:
</p>


<p>
  <a name="928678"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="930032"> </a><strong>Error Number:
<br></strong></td>
    <td><a name="930034"> </a><strong>Symbolic Name and Description:
<br></strong></td>
  </tr>
  <tr>
    <td><a name="930036"> </a><code>-1<br>
<br>LM_NOCONFFILE
<br></code></td>
    <td><a name="930039"> </a>"cannot find license file"
<br><a name="930043"> </a>The license file cannot be opened. 
<br></td>
  </tr>
  <tr>
    <td><a name="930045"> </a><code>-2<br>
<br>LM_BADFILE
<br></code></td>
    <td><a name="930048"> </a>"invalid license file syntax"
<br><a name="930049"> </a>Feature name is &gt; 
<br>MAX_FEATURE_LEN, or daemon 
<br>name is &gt; MAX_DAEMON_LEN, or
<br><a name="930050"> </a>server name is &gt; 
<br>MAX_SERVER_NAME, or
<br><a name="930051"> </a>a feature specifies no hostid and # of 
<br>licenses is &lt;= 0.
<br></td>
  </tr>
  <tr>
    <td><a name="930053"> </a><code>-3<br>
<br>LM_NOSERVER
<br></code></td>
    <td><a name="930056"> </a>"cannot connect to a license 
<br>server"
<br><a name="930057"> </a>The daemon name specified in the 
<br>license file FEATURE line does not 
<br>match the vendor daemon name.
<br></td>
  </tr>
  <tr>
    <td><a name="930059"> </a><code>-4<br>
<br>LM_MAXUSERS
<br></code></td>
    <td><a name="930062"> </a>"licensed number of users already 
<br>reached"
<br><a name="930063"> </a>The licensed number of users has been 
<br>reached.
<br></td>
  </tr>
  <tr>
    <td><a name="930065"> </a><code>-5<br>
<br>LM_NOFEATURE
<br></code></td>
    <td><a name="930068"> </a>"no such feature exists"
<br><a name="930069"> </a>The feature could not be found in the 
<br>license file.
<br></td>
  </tr>
  <tr>
    <td><a name="930071"> </a><code>-6<br>
<br>LM_NOSERVICE
<br></code></td>
    <td><a name="930074"> </a>"no TCP "license" service exists"
<br><a name="930075"> </a>This happens if a SERVER line does not 
<br>specify a TCP port number, and the TCP 
<br>license service does not exist in 
<br><code>/etc/services</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="930077"> </a><code>-7<br>
<br>LM_NOSOCKET
<br></code></td>
    <td><a name="930080"> </a>"no socket connection to license 
<br>manager server"
<br><a name="930081"> </a><font  face="Arial" size="2">lc_disconn()</font> was called after the process 
<br>had been disconnected from the socket. 
<br>This error can also occur if an internal 
<br>error happens within <font  face="Arial" size="2">l_sndmsg()</font> or 
<br><font  face="Arial" size="2">l_rcvmsg()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="930083"> </a><code>-8<br>
<br>LM_BADCODE
<br></code></td>
    <td><a name="930086"> </a>"encryption code in license file 
<br>is inconsistent"
<br><a name="930087"> </a>The code in a license file line does not 
<br>match the other data in the license file. 
<br>This is usually the result of not building 
<br>all the software components with the 
<br>same encryption seeds. Check 
<br><code>makekey.c</code>, <code>lsvendor.c</code>, and your 
<br>application code carefully to insure that 
<br>they are all built with the same 
<br>encryption seeds.
<br></td>
  </tr>
  <tr>
    <td><a name="930089"> </a><code>-9<br>
<br>LM_NOTTHISHOST
<br></code></td>
    <td><a name="930092"> </a>"invalid host"
<br><a name="930093"> </a>The hostid specified in the license file 
<br>does not match the node on which the 
<br>software is running.
<br></td>
  </tr>
  <tr>
    <td><a name="930095"> </a><code>-10<br>
<br>LM_LONGGONE
<br></code></td>
    <td><a name="930098"> </a>"feature has expired"
<br><a name="930099"> </a>The feature has expired, i.e., today's 
<br>date is after the expiration date in the 
<br>license file.
<br></td>
  </tr>
  <tr>
    <td><a name="930101"> </a><code>-11<br>
<br>LM_BADDATE
<br></code></td>
    <td><a name="930104"> </a>"invalid date format in license 
<br>file"
<br><a name="930105"> </a>The start or expiration date in the license 
<br>file is invalid.
<br></td>
  </tr>
  <tr>
    <td><a name="930107"> </a><code>-12<br>
<br>LM_BADCOMM
<br></code></td>
    <td><a name="930110"> </a>"invalid returned data from 
<br>license server"
<br><a name="930111"> </a>The port number returned from <code>lmgrd</code> is 
<br>invalid.
<br><a name="930112"> </a>An attempted connection to a vendor 
<br>daemon did not result in a correct 
<br>acknowledgment from the daemon.
<br><a name="930113"> </a>The daemon did not send back a 
<br>message within the timeout interval.
<br><a name="930114"> </a>A message from the daemon had an 
<br>invalid checksum.
<br><a name="930115"> </a>An <font  face="Arial" size="2">lc_userlist()</font> request did not receive 
<br>the correct data.
<br></td>
  </tr>
  <tr>
    <td><a name="930117"> </a><code>-13<br>
<br>LM_NO_SERVER_IN_FILE
<br></code></td>
    <td><a name="930120"> </a>"no SERVER lines in license file"
<br><a name="930121"> </a>There is no SERVER line in the license 
<br>file. All non-zero license count features 
<br>need at least one SERVER line.
<br></td>
  </tr>
  <tr>
    <td><a name="930123"> </a><code>-14<br>
<br>LM_BADHOST
<br></code></td>
    <td><a name="930126"> </a>"cannot find SERVER hostname in 
<br>network database"
<br><a name="930127"> </a>The <font  face="Arial" size="2">gethostbyname()</font> system call failed 
<br>for the SERVER name in the license file.
<br></td>
  </tr>
  <tr>
    <td><a name="930129"> </a><code>-15<br>
<br>LM_CANTCONNECT
<br></code></td>
    <td><a name="930132"> </a>"cannot connect to license server"
<br><a name="930133"> </a>The <font  face="Arial" size="2">connect()</font> system call failed, while 
<br>attempting to connect to the daemon. 
<br><a name="930134"> </a>The attempt to connect to the vendor 
<br>daemon on all SERVER nodes was 
<br>unsuccessful.
<br><a name="930135"> </a><font  face="Arial" size="2">lc_status()</font> returns 
<br>LM_CANTCONNECT if the feature had 
<br>been checked out but the program is in 
<br>the process of reconnecting. 
<br><a name="930136"> </a>If reconnection fails, the final status 
<br>return is LM_CANTCONNECT.
<br></td>
  </tr>
  <tr>
    <td><a name="930139"> </a><code>-16<br>
<br>LM_CANTREAD
<br></code></td>
    <td><a name="930141"> </a>"cannot read data from license 
<br>server"
<br><a name="930142"> </a>The process cannot read data from the 
<br>daemon within the timeout interval.
<br><a name="930143"> </a>The connection was reset by the daemon 
<br>(usually because the daemon exited) 
<br>before the process attempted to read 
<br>data.
<br></td>
  </tr>
  <tr>
    <td><a name="930145"> </a><code>-17<br>
<br>LM_CANTWRITE
<br></code></td>
    <td><a name="930177"> </a>"cannot write data to license 
<br>server"
<br><a name="930147"> </a>The process could not write data to the 
<br>daemon after the connection was 
<br>established.
<br></td>
  </tr>
  <tr>
    <td><a name="930149"> </a><code>-18<br>
<br>LM_NOSERVSUPP
<br></code></td>
    <td><a name="930213"> </a>"license server does not support 
<br>this feature"
<br><a name="930151"> </a>The feature has expired (on the server), 
<br>or has not yet started, or the version is 
<br>greater than the highest supported 
<br>version.
<br></td>
  </tr>
  <tr>
    <td><a name="930153"> </a><code>-19<br>
<br>LM_SELECTERR
<br></code></td>
    <td><a name="930234"> </a>"error in select system call"
<br><a name="930155"> </a>The <font  face="Arial" size="2">select()</font> system call failed.
<br></td>
  </tr>
  <tr>
    <td><a name="930157"> </a><code>-20<br>
<br>LM_SERVBUSY
<br></code></td>
    <td><a name="930258"> </a>"license server busy (no 
<br>majority)",
<br><a name="930159"> </a>The license server is busy establishing a 
<br>quorum of server nodes so that licensing 
<br>can start. This error is very rare, and 
<br>checkout should be retried if this occurs.
<br></td>
  </tr>
  <tr>
    <td><a name="930310"> </a><code>-21<br>
<br>LM_OLDVER
<br></code></td>
    <td><a name="930319"> </a>"license file does not support 
<br>this version"
<br><a name="930312"> </a>The version requested is greater than the 
<br>highest version supported in the license 
<br>file FEATURE line.
<br></td>
  </tr>
  <tr>
    <td><a name="930306"> </a><code>-22<br>
<br>LM_CHECKINBAD
<br></code></td>
    <td><a name="930340"> </a>"feature checkin failure detected 
<br>at license server"
<br><a name="930308"> </a>The checkin request did not receive a 
<br>good reply from the vendor daemon (the 
<br>license might still be considered in use).
<br></td>
  </tr>
  <tr>
    <td><a name="930302"> </a><code>-23<br>
<br>LM_BUSYNEWSERV
<br></code></td>
    <td><a name="930361"> </a>"license server temporarily busy 
<br>(new server connecting)"
<br><a name="930304"> </a>The vendor daemon is in the process of 
<br>establishing a quorum condition. New 
<br>requests from clients are deferred during 
<br>this period. This request should be 
<br>retried.
<br></td>
  </tr>
  <tr>
    <td><a name="930298"> </a><code>-24<br>
<br>LM_USERSQUEUED
<br></code></td>
    <td><a name="930382"> </a>"users are queued for this 
<br>feature"
<br><a name="930300"> </a>This error is similar to MAXUSERS, but 
<br>supplies the additional information that 
<br>there are other users in the queue for this 
<br>feature.
<br></td>
  </tr>
  <tr>
    <td><a name="930294"> </a><code>-25<br>
<br>LM_SERVLONGGONE
<br></code></td>
    <td><a name="930406"> </a>"license server does not support 
<br>this version of this feature"
<br><a name="930296"> </a>The version specified in the checkout 
<br>request is greater than the highest 
<br>version number the daemon supports.
<br></td>
  </tr>
  <tr>
    <td><a name="930290"> </a><code>-26<br>
<br>LM_TOOMANY
<br></code></td>
    <td><a name="930427"> </a>"request for more licenses than 
<br>this feature supports"
<br><a name="930292"> </a>A checkout request was made for more 
<br>licenses than are available. This request 
<br>will never succeed.
<br></td>
  </tr>
  <tr>
    <td><a name="930286"> </a><code>-29<br>
<br>LM_CANTFINDETHER
<br></code></td>
    <td><a name="930448"> </a>"cannot find ethernet device"
<br><a name="930288"> </a>The ethernet device could not be located 
<br>on this system.
<br></td>
  </tr>
  <tr>
    <td><a name="930282"> </a><code>-30<br>
<br>LM_NOREADLIC
<br></code></td>
    <td><a name="930469"> </a>"cannot read license file"
<br><a name="930284"> </a>The license file cannot be read (errno == 
<br>EPERM or EACCES).
<br></td>
  </tr>
  <tr>
    <td><a name="930278"> </a><code>-31<br>
<br>LM_TOOEARLY
<br></code></td>
    <td><a name="930486"> </a>"feature not yet available"
<br><a name="930280"> </a>The feature is not enabled yet (current 
<br>date is before the feature start date).
<br></td>
  </tr>
  <tr>
    <td><a name="930274"> </a><code>-32<br>
<br>LM_NOSUCHATTR
<br></code></td>
    <td><a name="930512"> </a>"No such attribute"
<br><a name="930276"> </a>A call to <font  face="Arial" size="2">lc_get_attr()</font> or <font  face="Arial" size="2">lc_set_attr()</font> 
<br>specified an unknown attribute code.
<br></td>
  </tr>
  <tr>
    <td><a name="930570"> </a><code>-33<br>
<br>LM_BADHANDSHAKE
<br></code></td>
    <td><a name="930579"> </a>"Bad encryption handshake with 
<br>daemon"
<br><a name="930572"> </a>The client performs an encryption 
<br>handshake operation with the daemon 
<br>prior to any licensing operations. This 
<br>handshake operation failed.
<br></td>
  </tr>
  <tr>
    <td><a name="930566"> </a><code>-34<br>
<br>LM_CLOCKBAD
<br></code></td>
    <td><a name="930600"> </a>"Clock difference too large 
<br>between client and server"
<br><a name="930568"> </a>The date on the client system does not 
<br>agree closely enough with the date on 
<br>the server (daemon) system. The amount 
<br>of difference allowed is set by the 
<br>software vendor with 
<br><font  face="Arial" size="2">lc_set_attr(</font><code>LM_A_MAX_TIMEDIFF, 
<br>...</code><font  face="Arial" size="2">)</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="930562"> </a><code>-35<br>
<br>LM_FEATQUEUE
<br></code></td>
    <td><a name="930652"> </a>"In the queue for this feature"
<br><a name="930564"> </a>This checkout request has resulted in the 
<br>process being placed in the queue for 
<br>this feature. Subsequent calls to 
<br><font  face="Arial" size="2">lc_status()</font> will yield the status of this 
<br>queued request.
<br></td>
  </tr>
  <tr>
    <td><a name="930558"> </a><code>-36<br>
<br>LM_FEATCORRUPT
<br></code></td>
    <td><a name="930672"> </a>"Feature database corrupted in 
<br>daemon"
<br><a name="930560"> </a>The daemon's run-time feature data 
<br>structures have become corrupted. This 
<br>is an internal daemon error.
<br></td>
  </tr>
  <tr>
    <td><a name="930554"> </a><code>-37<br>
<br>LM_BADFEATPARAM
<br></code></td>
    <td><a name="930696"> </a>"Duplicate selection mismatch for 
<br>this feature"
<br><a name="930556"> </a>The checkout request for this feature has 
<br>specified a duplicate mask that does not 
<br>match the mask specified by an earlier 
<br>checkout. This is probably the result of 
<br>using different versions of your client 
<br>software, or from having an uninitialized 
<br>variable in the <code>dup_group</code> field for 
<br><font  face="Arial" size="2">lc_checkout()</font>. 
<br></td>
  </tr>
  <tr>
    <td><a name="930550"> </a><code>-38<br>
<br>LM_FEATEXCLUDE
<br></code></td>
    <td><a name="930723"> </a>"User/host on EXCLUDE list for 
<br>feature"
<br><a name="930552"> </a>The user/host/display has been excluded 
<br>from this feature by an end user's 
<br>vendor daemon option file.
<br></td>
  </tr>
  <tr>
    <td><a name="930546"> </a><code>-39<br>
<br>LM_FEATNOTINCLUDE
<br></code></td>
    <td><a name="930744"> </a>"User/host not on INCLUDE list for 
<br>feature"
<br><a name="930548"> </a>The user/host/display has NOT been 
<br>included in this feature by an end user's 
<br>vendor daemon option file.
<br></td>
  </tr>
  <tr>
    <td><a name="930542"> </a><code>-40<br>
<br>LM_CANTMALLOC
<br></code></td>
    <td><a name="930765"> </a>"Cannot allocate dynamic memory"
<br><a name="930544"> </a>The <font  face="Arial" size="2">malloc()</font> call failed to return 
<br>sufficient memory.
<br></td>
  </tr>
  <tr>
    <td><a name="930538"> </a><code>-41<br>
<br>LM_NEVERCHECKOUT
<br></code></td>
    <td><a name="930789"> </a>"Feature was never checked out"
<br><a name="930540"> </a>This code is returned by <font  face="Arial" size="2">lc_status()</font> if the 
<br>feature requested has never been 
<br>checked out.
<br></td>
  </tr>
  <tr>
    <td><a name="930534"> </a><code>-42<br>
<br>LM_BADPARAM
<br></code></td>
    <td><a name="930813"> </a>"Invalid parameter"
<br><a name="930536"> </a>A call to <font  face="Arial" size="2">lc_set_attr()</font> specified an 
<br>invalid value for its attribute.
<br><a name="930829"> </a><font  face="Arial" size="2">lc_get_attr(</font><code>LM_A_MASTER,...</code><font  face="Arial" size="2">)</font><code><em> </em></code>called 
<br>without connection already established 
<br>to server.
<br></td>
  </tr>
  <tr>
    <td><a name="930885"> </a><code>-43<br>
<br>LM_NOKEYDATA
<br></code></td>
    <td><a name="930894"> </a>"No FLEXlm key data supplied in 
<br>lc_new_job() call"
<br><a name="930887"> </a>No FLEX<em>lm</em> key data was supplied to 
<br>the <font  face="Arial" size="2">lc_new_job()</font> call. Some FLEX<em>lm</em> 
<br>functions will be disabled.
<br></td>
  </tr>
  <tr>
    <td><a name="930881"> </a><code>-44<br>
<br>LM_BADKEYDATA
<br></code></td>
    <td><a name="930945"> </a>"Invalid FLEXlm key data supplied"
<br><a name="930883"> </a>Invalid FLEX<em>lm</em> key data was supplied 
<br>to the <font  face="Arial" size="2">lc_new_job()</font> call. Some FLEX<em>lm</em> 
<br>functions will be disabled.
<br></td>
  </tr>
  <tr>
    <td><a name="930877"> </a><code>-45<br>
<br>LM_FUNCNOTAVAIL
<br></code></td>
    <td><a name="930990"> </a>"FLEXlm function not available in 
<br>this version"
<br><a name="930879"> </a>This FLEX<em>lm</em> function is not available. 
<br>This could be a result of a 
<br>BADKEYDATA, NOKEYDATA, or 
<br>DEMOKIT return from <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="930873"> </a><code>-47<br>
<br>LM_NOCLOCKCHECK
<br></code></td>
    <td><a name="931029"> </a>"Clock setting check not available 
<br>in daemon"
<br><a name="931030"> </a><font  face="Arial" size="2">lc_checkout()</font> returns this code when the 
<br>CLOCK SETTING check between client 
<br>and daemon is not supported in this 
<br>daemon. To disable the clock check 
<br><font  face="Arial" size="2">lc_set_attr(</font><code>LM_A_MAX_TIMEDIFF, 
<br>(LM_A_VAL_TYPE)-1</code><font  face="Arial" size="2">)
<br></font></td>
  </tr>
  <tr>
    <td><a name="930869"> </a><code>-48<br>
<br>LM_BADPLATFORM
<br></code></td>
    <td><a name="931073"> </a>"FLEXlm platform not enabled"
<br><a name="930871"> </a>The software is running on a platform 
<br>which is not supported by the vendor 
<br>keys you have purchased. To purchase 
<br>keys for additional platforms, contact 
<br>GLOBEtrotter Software.
<br></td>
  </tr>
  <tr>
    <td><a name="930865"> </a><code>-49<br>
<br>LM_DATE_TOOBIG
<br></code></td>
    <td><a name="931100"> </a>"Date too late for binary format"
<br><a name="930867"> </a>The start date format in FLEX<em>lm</em> 
<br>licenses are good until the year 2027. 
<br>This is probably a bad date.
<br></td>
  </tr>
  <tr>
    <td><a name="930861"> </a><code>-50<br>
<br>LM_EXPIREDKEYS
<br></code></td>
    <td><a name="931133"> </a>"FLEXlm key data has expired"
<br><a name="930863"> </a>The FLEX<em>lm</em> demo vendor keys have 
<br>expired. Contact GLOBEtrotter Software 
<br>for new demo keys.
<br></td>
  </tr>
  <tr>
    <td><a name="930857"> </a><code>-51<br>
<br>LM_NOFLEXLMINIT
<br></code></td>
    <td><a name="931166"> </a>"FLEXlm not initialized"
<br><a name="930859"> </a>A FLEX<em>lm</em> function was called before 
<br><font  face="Arial" size="2">lc_new_job()</font> was called. Always call 
<br><font  face="Arial" size="2">lc_new_job()</font> first.
<br></td>
  </tr>
  <tr>
    <td><a name="930853"> </a><code>-52<br>
<br>LM_NOSERVRESP
<br></code></td>
    <td><a name="931205"> </a>"Server did not respond to 
<br>message"
<br><a name="930855"> </a>UDP communications failure. UDP 
<br>communications are not guaranteed. 
<br>FLEX<em>lm</em> makes a best effort to recover 
<br>from lost and garbled messages, but this 
<br>indicates a failure.
<br></td>
  </tr>
  <tr>
    <td><a name="930849"> </a><code>-53<br>
<br>LM_CHECKOUTFILTERED
<br></code></td>
    <td><a name="931238"> </a>"Request rejected by vendor-
<br>defined filter"
<br><a name="930851"> </a><font  face="Arial" size="2">lc_checkout()</font> failed because of the 
<br>vendor defined routine which is set in 
<br><code>lsvendor.c</code>: ls_outfilter.
<br></td>
  </tr>
  <tr>
    <td><a name="931300"> </a><code>-54<br>
<br>LM_NOFEATSET
<br></code></td>
    <td><a name="931311"> </a>"No FEATURESET line present in 
<br>license file"
<br><a name="931302"> </a><font  face="Arial" size="2">lc_ck_feats()</font> called, but no 
<br>FEATURESET line in license file.
<br></td>
  </tr>
  <tr>
    <td><a name="931296"> </a><code>-55<br>
<br>LM_BADFEATSET
<br></code></td>
    <td><a name="931338"> </a>"Incorrect FEATURESET line in 
<br>license file"
<br><a name="931298"> </a>Error return from<font  face="Arial" size="2"> lc_ck_feats()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="931292"> </a><code>-56<br>
<br>LM_CANTCOMPUTEFEATSET
<br></code></td>
    <td><a name="931362"> </a>"Cannot compute FEATURESET line"
<br><a name="931294"> </a>Error return from <font  face="Arial" size="2">lc_ck_feats()</font>, which 
<br>occurs because <font  face="Arial" size="2">lc_feat_set()</font> can not 
<br>compute the FEATURESET line. This 
<br>can happen because there are no 
<br>FEATUREs in the file.
<br></td>
  </tr>
  <tr>
    <td><a name="931288"> </a><code>-57<br>
<br>LM_SOCKETFAIL
<br></code></td>
    <td><a name="931383"> </a>"socket() call failed"
<br><a name="931290"> </a>This can occur when the UNIX OS runs 
<br>out of system resources.
<br></td>
  </tr>
  <tr>
    <td><a name="931284"> </a><code>-58<br>
<br>LM_SETSOCKFAIL
<br></code></td>
    <td><a name="931404"> </a>"setsockopt() failed"
<br><a name="931286"> </a>The <font  face="Arial" size="2">setsockopt()</font> call has failed. This is 
<br>likely due to an OS error.
<br></td>
  </tr>
  <tr>
    <td><a name="931280"> </a><code>-59<br>
<br>LM_BADCHECKSUM
<br></code></td>
    <td><a name="931440"> </a>"message checksum failure"
<br><a name="931282"> </a>Communications error--messages 
<br>between client and server are encrypted 
<br>and checksummed for security and 
<br>integrity. The checksum will usually fail 
<br>because of poor networking 
<br>communications.
<br></td>
  </tr>
  <tr>
    <td><a name="931276"> </a><code>-61<br>
<br>LM_SERVNOREADLIC
<br></code></td>
    <td><a name="931457"> </a>"Cannot read license file from 
<br>server"
<br><a name="931278"> </a>This occurs when the license file, via 
<br><code>LM_LICENSE_FILE</code>, or 
<br><font  face="Arial" size="2">lc_set_attr(</font><code>LM_A_LICENSE_FILE, 
<br>(LM_AL_VAL_TYPE)</code><code><em>path</em></code><font  face="Arial" size="2">)</font>, is 
<br>incorrectly defined. This only occurs in 
<br><code>lmutil</code> when <code>LM_LICENSE_FILE</code> is set 
<br>to <code><em>port</em></code><code>@</code><code><em>host</em></code> or <code>@</code><code><em>host</em></code>.
<br></td>
  </tr>
  <tr>
    <td><a name="931272"> </a><code>-62<br>
<br>LM_NONETWORK
<br></code></td>
    <td><a name="931529"> </a>"Network software (tcp/ip) not 
<br>available"
<br><a name="931274"> </a>This is reported on systems where this is 
<br>detectable. Some systems may have this 
<br>problem, but the error will not be 
<br>reported as LM_NONETWORK--
<br>system calls will simply fail.
<br></td>
  </tr>
  <tr>
    <td><a name="931268"> </a><code>-63<br>
<br>LM_NOTLICADMIN
<br></code></td>
    <td><a name="931553"> </a>"Not a license administrator"
<br><a name="931270"> </a>Various functions, such as <font  face="Arial" size="2">lc_remove()</font> 
<br>and <font  face="Arial" size="2">lc_shutdown()</font>, require that the user 
<br>be an license administrator, depending 
<br>on how <code>lmgrd</code> was started.
<br></td>
  </tr>
  <tr>
    <td><a name="931264"> </a><code>-64<br>
<br>LM_REMOVETOOSOON
<br></code></td>
    <td><a name="931589"> </a>"lmremove request too soon"
<br><a name="931266"> </a>An <font  face="Arial" size="2">lc_remove()</font> request occurred, but 
<br>ls_min_lmremove (defined in 
<br><code>lsvendor.c</code>) seconds have not elapsed 
<br>since the license was checked out. See 
<br><font  face="Arial" size="2">ls_vendor()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="931662"> </a><code>-65<br>
<br>LM_BADVENDORDATA
<br></code></td>
    <td><a name="934873"> </a>"Bad VENDORCODE struct passed to 
<br>lc_new_job()"
<br><a name="931664"> </a><font  face="Arial" size="2">LM_CODE()</font> macro was not used to 
<br>define the <code>VENDORCODE</code> argument for 
<br><font  face="Arial" size="2">lc_new_job()</font>. See <code>lm_code.h</code> and 
<br><code>lmflex.c</code> for an example of how to use 
<br>the <font  face="Arial" size="2">LM_CODE()</font> macro.
<br></td>
  </tr>
  <tr>
    <td><a name="931658"> </a><code>-66<br>
<br>LM_LIBRARYMISMATCH
<br></code></td>
    <td><a name="934937"> </a>"FLEXlm include file/library 
<br>mismatch"
<br><a name="931660"> </a>An attempt was made to create a 
<br>licensed binary with mismatching 
<br>source/header files and <code>liblmgr.a</code>. The 
<br>source code version must match the 
<br>linking libraries.
<br></td>
  </tr>
  <tr>
    <td><a name="931654"> </a><code>-71<br>
<br>LM_BAD_TZ
<br></code></td>
    <td><a name="934963"> </a>"Invalid TZ environment variable"
<br><a name="931656"> </a>On some operating systems, the end user 
<br>can significantly change the date using 
<br>the <code>TZ</code> environment variable. This error 
<br>detects this type of theft.
<br></td>
  </tr>
  <tr>
    <td><a name="931650"> </a><code>-72<br>
<br>LM_OLDVENDORDATA
<br></code></td>
    <td><a name="934988"> </a>"Old-style vendor keys (3-word)"
<br><a name="931652"> </a><font  face="Arial" size="2">lm_init()</font> detected that an old <font  face="Arial" size="2">LM_CODE()</font> 
<br>macro was used.
<br></td>
  </tr>
  <tr>
    <td><a name="931646"> </a><code>-73<br>
<br>LM_LOCALFILTER
<br></code></td>
    <td><a name="935018"> </a>"Local checkout filter requested 
<br>request"
<br><a name="931648"> </a>Request was denied by filter specified in 
<br><font  face="Arial" size="2">lc_set_attr(</font><code>LM_A_CHECKOUTFILTER 
<br>(LM_A_VAL_TYPE)</code><code><em>filter</em></code><font  face="Arial" size="2">)</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="935091"> </a><code>-74<br>
<br>LM_ENDPATH
<br></code></td>
    <td><a name="935100"> </a>"Attempt to read beyond the end of 
<br>LF path"
<br><a name="935093"> </a>An error occurred with the list of license 
<br>files.
<br></td>
  </tr>
  <tr>
    <td><a name="931642"> </a><code>-75<br>
<br>LM_VMS_SETIMR_FAILED
<br></code></td>
    <td><a name="935061"> </a>"SYS$SETIMR call failed"
<br><a name="931644"> </a><code>SYS$SETIMR</code> is used on VMS to time 
<br>out certain FLEX<em>lm</em> system calls.
<br></td>
  </tr>
  <tr>
    <td><a name="931638"> </a><code>-76<br>
<br>LM_INTERNAL_ERROR
<br></code></td>
    <td><a name="931640"> </a>"Internal FLEXlm Error - Please 
<br>report to Globetrotter Software"
<br></td>
  </tr>
  <tr>
    <td><a name="931634"> </a><code>-77<br>
<br>LM_BAD_VERSION
<br></code></td>
    <td><a name="935137"> </a>"Bad version number - must be 
<br>floating point number, with no 
<br>letters"
<br><a name="935138"> </a>A line in the license file has an invalid 
<br>version number.
<br><a name="931636"> </a><font  face="Arial" size="2">lc_checkout()</font> was called with an invalid 
<br><code><em>version</em></code> character string.
<br></td>
  </tr>
  <tr>
    <td><a name="931630"> </a><code>-78<br>
<br>LM_NOADMINAPI
<br></code></td>
    <td><a name="935180"> </a>"FLEXadmin API functions not 
<br>available"
<br><a name="931632"> </a>An attempt to get information from 
<br>another company's vendor daemon was 
<br>made via <font  face="Arial" size="2">lc_get_attr(</font><code>LM_A_VD_*, ...</code><font  face="Arial" size="2">)</font>. 
<br>This function call is only allowed for the 
<br>ISV's own vendor daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="931626"> </a><code>-82<br>
<br>LM_BADPKG
<br></code></td>
    <td><a name="935215"> </a>"Invalid PACKAGE line in license 
<br>file"
<br><a name="931628"> </a>PACKAGE line missing or invalid 
<br>COMPONENTS.
<br><a name="935226"> </a>A COMPONENT has number of 
<br>licenses set, with OPTIONS=SUITE.
<br><a name="935222"> </a>A COMPONENT has number of 
<br>licenses==0.
<br></td>
  </tr>
  <tr>
    <td><a name="935275"> </a><code>-83<br>
<br>LM_SERVOLDVER
<br></code></td>
    <td><a name="935284"> </a>"Server FLEXlm version older than 
<br>client's"
<br><a name="935277"> </a>Vendor daemon FLEX<em>lm</em> version is older 
<br>than the client's FLEX<em>lm</em> version. This 
<br>is only supported with a v5.0+ client.
<br></td>
  </tr>
  <tr>
    <td><a name="935271"> </a><code>-84<br>
<br>LM_USER_BASED
<br></code></td>
    <td><a name="935327"> </a>"Incorrect number of USERS/HOSTS 
<br>INCLUDED in options file -- see 
<br>server log"
<br><a name="935273"> </a>When a feature has the USER_BASED 
<br>attribute, this error occurs when there no 
<br>INCLUDE line in the end-user options 
<br>file for this feature, or the number of 
<br>users included exceeds the number 
<br>authorized. See <a href="all.htm#912235">Section 5.5, "FEATURE 
<br>or INCREMENT Lines,"</a> especially 
<br>USER_BASED.
<br></td>
  </tr>
  <tr>
    <td><a name="935267"> </a><code>-85<br>
<br>LM_NOSERVCAP
<br></code></td>
    <td><a name="935352"> </a>"Server doesn't support this 
<br>request"
<br><a name="935269"> </a>This occurs when a vendor daemon with 
<br>a FLEX<em>lm</em> version older than the client 
<br>is being used. The daemon didn't 
<br>understand and respond to the request 
<br>made by the application.
<br></td>
  </tr>
  <tr>
    <td><a name="935263"> </a><code>-86<br>
<br>LM_OBJECTUSED
<br></code></td>
    <td><a name="935386"> </a>"This license object already in 
<br>use" 
<br><a name="935265"> </a>Java only. A second checkout against a 
<br>license object generates this error. If 
<br>multiple checkouts are needed, multiple 
<br>license objects need to be created.
<br></td>
  </tr>
  <tr>
    <td><a name="935259"> </a><code>-87<br>
<br>LM_MAXLIMIT
<br></code></td>
    <td><a name="935408"> </a>"Checkout exceeds MAX specified in 
<br>options file"
<br><a name="935409"> </a>End-user option MAX has been 
<br>specified for this feature.
<br></td>
  </tr>
  <tr>
    <td><a name="935255"> </a><code>-88<br>
<br>LM_BADSYSDATE
<br></code></td>
    <td><a name="935432"> </a>"System clock has been set back"
<br><a name="935257"> </a>Returned from checkout call.
<br></td>
  </tr>
  <tr>
    <td><a name="935251"> </a><code>-89<br>
<br>LM_PLATNOTLIC
<br></code></td>
    <td><a name="935454"> </a>"This platform not authorized by 
<br>license"
<br><a name="935253"> </a>Returned from checkout call where 
<br>FEATURE line specifies 
<br>PLATFORMS="...".
<br></td>
  </tr>
  <tr>
    <td><a name="935247"> </a><code>-90<br>
<br>LM_FUTURE_FILE
<br></code></td>
    <td><a name="935477"> </a>"Future license file format or 
<br>misspelling in license file"
<br><a name="935249"> </a>Returned from checkout call when 
<br>license file attribute was introduced in a 
<br>later FLEX<em>lm</em> version than the client.
<br></td>
  </tr>
  <tr>
    <td><a name="935243"> </a><code>-91<br>
<br>LM_DEFAULT_SEEDS
<br></code></td>
    <td><a name="935506"> </a>"ENCRYPTION_SEEDs are non-unique"
<br><a name="935245"> </a>Returned from <font  face="Arial" size="2">lc_new_job()</font> or 
<br><font  face="Arial" size="2">lp_checkout()</font> when vendor name is not 
<br><code>demo</code>, but seeds are default seeds.
<br></td>
  </tr>
  <tr>
    <td><a name="935239"> </a><code>-92<br>
<br>LM_SERVER_REMOVED
<br></code></td>
    <td><a name="935537"> </a>"Feature removed during 
<br>lmreread,or wrong SERVER line 
<br>hostid"
<br><a name="935241"> </a>Checkout failure due to two possible 
<br>causes. 1) The feature is removed during 
<br>lmreread, but the client is reading an old 
<br>copy of the license file which still has 
<br>removed feature. 2) The hostid on the 
<br>SERVER line is for a different host, so 
<br>all features in this license file were 
<br>removed.
<br></td>
  </tr>
  <tr>
    <td><a name="935591"> </a><code>-93<br>
<br>LM_POOL
<br></code></td>
    <td><a name="935600"> </a>"This feature is available in a 
<br>different license pool"
<br><a name="935593"> </a>This is a possible response to 
<br>LM_A_VD_FEATURE_INFO request, 
<br>indicating that this INCREMENT line 
<br>can be ignored, as it has been pooled 
<br>with another line.
<br></td>
  </tr>
  <tr>
    <td><a name="935587"> </a><code>-94<br>
<br>LM_LGEN_VER
<br></code></td>
    <td><a name="935623"> </a>"Attempt to generate license with 
<br>incompatible attributes"
<br><a name="935589"> </a>Occurs with <code>-verfmt</code> arguments to 
<br><code>lmcrypt</code> or <code>makekey</code>, or for 
<br><code>lminstall -overfmt</code>. Also set by 
<br><font  face="Arial" size="2">lc_cryptstr()</font> and <font  face="Arial" size="2">lc_chk_conf()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="935768"> </a><code>-95<br>
<br>LM_NOT_THIS_HOST
<br></code></td>
    <td><a name="935783"> </a>"Network connect to THIS_HOST 
<br>failed"
<br><a name="935770"> </a>Returned by <font  face="Arial" size="2">checkout()</font>. When 
<br><code>this_host</code> is used as a host name. 
<br>Replace <code>this_host</code> with a real host 
<br>name to resolve this error.
<br></td>
  </tr>
  <tr>
    <td><a name="935583"> </a><code>-96<br>
<br>LM_HOSTDOWN
<br></code></td>
    <td><a name="935822"> </a>"Server node is down or not 
<br>responding"
<br><a name="935585"> </a>Returned by <font  face="Arial" size="2">checkout()</font>; indicates the 
<br>whole license server system is not up, 
<br>not just the <code>lmgrd</code> process.
<br></td>
  </tr>
  <tr>
    <td><a name="935579"> </a><code>-97<br>
<br>LM_VENDOR_DOWN
<br></code></td>
    <td><a name="935858"> </a>"The desired vendor daemon is 
<br>down"
<br><a name="935581"> </a>Returned by checkout; indicates <code>lmgrd</code> 
<br>is running, but not the vendor daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="935575"> </a><code>-98<br>
<br>LM_CANT_DECIMAL
<br></code></td>
    <td><a name="935883"> </a>"The FEATURE line can't be 
<br>converted to decimal format"
<br><a name="935895"> </a>Returned by <font  face="Arial" size="2">lc_cryptstr()</font>, or 
<br><code>lmcrypt</code>/<code>makekey</code>/<code>lminstall</code>. See 
<br><a href="all.htm#912575">Section 5.12, "Decimal Format 
<br>Licenses,"</a> for information on what can't 
<br>be converted to decimal format.
<br></td>
  </tr>
  <tr>
    <td><a name="935571"> </a><code>-99<br>
<br>LM_BADDECFILE
<br></code></td>
    <td><a name="935926"> </a>"The decimal format license is 
<br>typed incorrectly"
<br><a name="935573"> </a>The internal checksum on the decimal 
<br>line has indicated the line has been typed 
<br>in incorrectly.
<br></td>
  </tr>
  <tr>
    <td><a name="935567"> </a><code>-100<br>
<br>LM_REMOVE_LINGER
<br></code></td>
    <td><a name="935949"> </a>"Cannot remove a lingering 
<br>license"
<br><a name="935569"> </a>Returned to <code>lmremove</code> command. User 
<br>has already exited, but license is 
<br>lingering. <code>lmremove</code> doesn't remove the 
<br>linger time.
<br></td>
  </tr>
  <tr>
    <td><a name="935563"> </a><code>-101<br>
<br>LM_RESVFOROTHERS
<br></code></td>
    <td><a name="935977"> </a>"All licenses are reserved for 
<br>others"
<br><a name="935565"> </a>Checkout return value when a checkout 
<br>will never succeed, because the end-user 
<br>options file has all licenses reserved for 
<br>others.
<br></td>
  </tr>
  <tr>
    <td><a name="935559"> </a><code>-106<br>
<br>LM_SERVER_MAXED_OUT
<br></code></td>
    <td><a name="936001"> </a>"License server out of network 
<br>connections"
<br><a name="935561"> </a>The vendor daemon can't handle any 
<br>more users. See the <code>lmgrd</code> debug log for 
<br>further information.
<br></td>
  </tr>
  <tr>
    <td><a name="935555"> </a><code>-110<br>
<br>LM_NODONGLE
<br></code></td>
    <td><a name="936026"> </a>"Dongle not attached, or can't 
<br>read dongle"
<br><a name="935557"> </a>In order to read the dongle hostid, the 
<br>correct driver must be installed.  These 
<br>drivers are available at 
<br>http://www.globetrotter.com or from 
<br>your software vendor.
<br></td>
  </tr>
  <tr>
    <td><a name="936051"> </a><code>-112<br>
<br>LM_NODONGLEDRIVER
<br></code></td>
    <td><a name="936097"> </a>"Missing Dongle Driver"
<br><a name="936053"> </a>In order to read the dongle hostid, the 
<br>correct driver must be installed.  These 
<br>drivers are available at 
<br>http://www.globetrotter.com or from 
<br>your software vendor.
<br></td>
  </tr>
  <tr>
    <td><a name="936047"> </a><code>-113<br>
<br>LM_FLEXLOCK2CKOUT
<br></code></td>
    <td><a name="936122"> </a>"FLEXlock checkouts attempted"
<br><a name="936049"> </a>Only one checkout is allowed with 
<br>FLEX<em>lock</em>-enabled apps. Subsequent 
<br>checkout attempts will fail. They should 
<br>be disabled if first checkout succeeded 
<br>in FLEX<em>lock</em> mode.
<br></td>
  </tr>
  <tr>
    <td><a name="936043"> </a><code>-114<br>
<br>LM_SIGN_REQ
<br></code></td>
    <td><a name="936152"> </a>"SIGN= attribute required"
<br><a name="936045"> </a>This is probably because the license is 
<br>older than the application. You need to 
<br>obtain a SIGN= version of this license 
<br>from your vendor.
<br></td>
  </tr>
  <tr>
    <td><a name="941849"> </a><code>-115<br>
<br>LM_PUBKEY_ERROR
<br></code></td>
    <td><a name="941851"> </a>"Error in Public Key package."
<br><a name="941872"> </a>Rare error.
<br></td>
  </tr>
</table>




<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="886924"> </a>Appendix E  <br>Rarely Used Functions and Attributes
</h2>
<hr>


<p>
  <a name="886926"> </a>The functions, attributes, variables, and features listed in this section are obsolete or rarely needed. Contact GLOBEtrotter technical support (support@globes.com) before using any of them--they can cause problems if inappropriately used.
</p>


<h3>
  <a name="886928"> </a>E.1	 Rarely Used FLEXible API Functions
</h3>


<p>
  <a name="936250"> </a>The following functions are more rarely needed, and many exist only for compatibility with earlier FLEX<em>lm</em> versions. They should be used with care, and questions are welcomed before their use.
</p>


<h4>
  <a name="938201"> </a>E.1.1	 l_new_hostid()
</h4>


<h5>
  <a name="938202"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="938203"> </a><CODE><code><em>hostid</em></code> = l_new_hostid()</CODE>
  </dl>
</dl>
<h5>
  <a name="944462"> </a>Description
</h5>


<p>
  <a name="944464"> </a>Returns a malloced and zeroed hostid. Use <em></em><font  face="Arial" size="2">lc_free_hostid()</font> to free this memory. This may be needed when doing vendor-defined hostids.
</p>


<h5>
  <a name="938207"> </a>Parameters
</h5>


<p>
  <a name="938208"> </a>None.
</p>


<h5>
  <a name="938209"> </a>Return
</h5>


<p>
  <a name="938215"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="938212"> </a><code>(HOSTID *) </code><code><em>hostid
<br></em></code></td>
    <td><a name="938214"> </a>A <code>HOSTID</code> struct, or null.
<br></td>
  </tr>
</table>




<p>
  <a name="938216"> </a>
</p>


<h5>
  <a name="938217"> </a>Error Returns
</h5>


<p>
  <a name="938223"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="938220"> </a>LM_CANTMALLOC
<br></td>
    <td><a name="938222"> </a><font  face="Arial" size="2">malloc()</font> call failed.
<br></td>
  </tr>
</table>




<h5>
  <a name="938225"> </a>See Also
</h5>

<ul>
  <li><a name="938229"> </a><a href="all.htm#883392">Section 4.30, "LM_A_VENDOR_ID_DECLARE</a>"

  <li><a name="938233"> </a><a href="all.htm#940228">Section 5.13.3, "Vendor-Defined Hostid Types</a>"

</ul>

<h4>
  <a name="936255"> </a>E.1.2	 lc_baddate()
</h4>


<p>
  <a name="936256"> </a>Obsolete and no longer needed. This check is now automatically performed when a feature is expiring and LM_A_CHECK_BADDATE and ls_a_check_baddate are set.
</p>


<h5>
  <a name="936257"> </a>See Also
</h5>

<ul>
  <li><a name="936261"> </a><a href="all.htm#882894">Section 4.2, "LM_A_CHECK_BADDATE</a>"

  <li><a name="936265"> </a><a href="all.htm#884799">Section 9.2.2, "ls_a_check_baddate</a>"

</ul>

<h4>
  <a name="936267"> </a>E.1.3	 lc_ck_feats()
</h4>


<h5>
  <a name="936268"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936269"> </a><CODE><code><em>status</em></code> = lc_ck_feats(<code><em>job</em></code>, <code><em>vendor</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936270"> </a>Description
</h5>


<p>
  <a name="936272"> </a>Checks the FEATURESET line for a given vendor. 
</p>


<h5>
  <a name="936273"> </a>Parameters
</h5>


<p>
  <a name="936283"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936276"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936278"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="936280"> </a><code>(char *) </code><code><em>vendor</em></code><code> 
<br></code></td>
    <td><a name="936282"> </a>The vendor daemon to check.
<br></td>
  </tr>
</table>




<p>
  <a name="936284"> </a>
</p>


<h5>
  <a name="936285"> </a>Return
</h5>


<p>
  <a name="936291"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936288"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="936290"> </a>Status of the FEATURESET line: 1 if 
<br>OK, 0 if bad.
<br></td>
  </tr>
</table>




<p>
  <a name="936292"> </a>
</p>


<h5>
  <a name="936293"> </a>Error Returns
</h5>


<p>
  <a name="936315"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936297"> </a>LM_NOFEATSET
<br></td>
    <td><a name="936299"> </a>No FEATURESET line found for 
<br>this vendor.
<br></td>
  </tr>
  <tr>
    <td><a name="936302"> </a>LM_CANTCOMPUTEFEATSET
<br></td>
    <td><a name="936304"> </a>Cannot compute FEATURESET 
<br>code for this vendor.
<br></td>
  </tr>
  <tr>
    <td><a name="936307"> </a>LM_BADFEATSET
<br></td>
    <td><a name="936309"> </a>The code on the FEATURESET 
<br>line is incorrect.
<br></td>
  </tr>
  <tr>
    <td><a name="936312"> </a>LM_FUNCNOTAVAIL
<br></td>
    <td><a name="936314"> </a>Vendor keys do not support 
<br>FEATURESET.
<br></td>
  </tr>
</table>




<p>
  <a name="936316"> </a>
</p>


<h5>
  <a name="936317"> </a>See Also
</h5>

<ul>
  <li><a name="936321"> </a><a href="allApp.htm#939262">Section E.3.11, "ls_use_featset</a>"

  <li><a name="936325"> </a><a href="allApp.htm#939781">Section E.4.2, "FEATURESET Line</a>"

  <li><a name="936329"> </a><a href="all.htm#946935">Section 2.6, "Multiple Jobs</a>"

</ul>

<h4>
  <a name="947383"> </a>E.1.4	 lc_cleanup()
</h4>


<h5>
  <a name="947384"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="947385"> </a><CODE>(void) lc_cleanup()</CODE>
  </dl>
</dl>
<h5>
  <a name="947386"> </a>Description
</h5>


<p>
  <a name="947390"> </a>Normally, after the calling program finishes its use of the FLEX<em>lm</em> library or DLL, the calling program exits. At this point, all handles, malloced memory, and threads are released or terminated. However some applications do not operate in this manner. To provide a method of cleaning up, FLEX<em>lm</em> has added a new function, <font  face="Arial" size="2">lc_cleanup()</font>. It can only be called after you have called <font  face="Arial" size="2">lc_free_job()</font> for all jobs that you have used. This function will free all malloced memory, release all handles, and kill all threads that it has created. 
</p>


<p>
  <a name="947394"> </a>For normal Windows programs, this call is optional. Only special drivers which reside dormant in memory require this call. Do not call any FLEX<em>lm</em> functions after this call.
</p>


<h4>
  <a name="936331"> </a>E.1.5	 lc_copy_hostid()
</h4>


<h5>
  <a name="936332"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936333"> </a><CODE><code><em>copy</em></code> = lc_copy_hostid(<code><em>job</em></code>, <code><em>orig</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936334"> </a>Description
</h5>


<p>
  <a name="936335"> </a>Returns a copy of a hostid list, and allocates memory as necessary. Using <font  face="Arial" size="2">lc_hostid()</font>, this function should not be needed.
</p>


<h5>
  <a name="936336"> </a>Parameters
</h5>


<p>
  <a name="936346"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936339"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936341"> </a>From <font  face="Arial" size="2">lc_new_job()</font><em>.
<br></em></td>
  </tr>
  <tr>
    <td><a name="936343"> </a><code>(HOSTID *) </code><code><em>orig</em></code><code> 
<br></code></td>
    <td><a name="936345"> </a>Hostid list to be copied.
<br></td>
  </tr>
</table>




<h5>
  <a name="936348"> </a>Return
</h5>


<p>
  <a name="936354"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936351"> </a><code>(HOSTID *) </code><code><em>copy
<br></em></code></td>
    <td><a name="936353"> </a>Copy of <code><em>orig</em></code>, or 0 upon failure. 
<br>Memory was allocated as needed.
<br></td>
  </tr>
</table>




<p>
  <a name="936355"> </a>
</p>


<h5>
  <a name="936356"> </a>Error Returns
</h5>


<p>
  <a name="936362"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936359"> </a>LM_CANTMALLOC
<br></td>
    <td><a name="936361"> </a>Out of memory.
<br></td>
  </tr>
</table>




<p>
  <a name="936363"> </a>
</p>


<h5>
  <a name="936364"> </a>See Also
</h5>

<ul>
  <li><a name="936368"> </a><a href="all.htm#881671">Section 3.16, "lc_free_hostid()</a>"

</ul>

<h4>
  <a name="936370"> </a>E.1.6	 lc_crypt()
</h4>


<h5>
  <a name="936371"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936373"> </a><CODE>CONFIG conf;</CODE>
     <dt> <a name="936374"> </a><CODE>char *sdate;</CODE>
     <dt> <a name="947898"> </a><CODE>LM_CODE(code, ENCRYPTION_SEED1, ENCRYPTION_SEED2, VENDOR_KEY1,</CODE>
     <dt> <a name="947899"> </a><CODE>VENDOR_KEY2, VENDOR_KEY3, VENDOR_KEY4, VENDOR_KEY5);</CODE>
     <dt> <a name="947900"> </a><CODE>/*...*/</CODE>
     <dt> <a name="947901"> </a><CODE>LM_CODE_GEN_INIT();</CODE>
     <dt> <a name="936376"> </a><CODE><code><em>enc_code</em></code> = lc_crypt(<code><em>job</em></code>, &amp;conf, &amp;sdate, &amp;code);</CODE>
  </dl>
</dl>
<h5>
  <a name="936377"> </a>Description
</h5>


<p>
  <a name="938654"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 <font  face="Arial" size="2">lc_cryptstr()</font> is the recommended function to generate license files. </FONT><HR WIDTH=75%>


<p>
  <a name="936382"> </a>Computes the license key for a FLEX<em>lm</em> feature line. <font  face="Arial" size="2">lc_crypt()</font> is the older form of the FLEX<em>lm</em> authentication routine--<font  face="Arial" size="2">lc_crypstr()</font> is now the preferred method. We strongly encourage converting to <font  face="Arial" size="2">lc_cryptstr()</font>, and support for <font  face="Arial" size="2">lc_crypt()</font> is limited.
</p>


<p>
  <a name="936386"> </a><font  face="Arial" size="2">lc_crypt()</font> takes input parameters and creates the license key that appears in the license file. Vendors generally will not call <font  face="Arial" size="2">lc_crypt()</font> directly, unless they are writing a custom license generation program, in which case <font  face="Arial" size="2">lc_cryptstr()</font> is preferred. 
</p>


<p>
  <a name="936387"> </a>The <code>CONFIG *</code> parameter should be a pointer to a struct that has been correctly filled in. To do so, first make sure it is set to zeroes with <code>memset(&amp;conf, 0, sizeof(conf))</code>. Then fill in each item in the struct, using the definition as it appears in <code>lmclient.h</code>. Note that many items are now optional and do not need setting.
</p>


<p>
  <a name="936388"> </a>The <code>sdate</code> parameter can be obtained by calling <font  face="Arial" size="2">l_bin_date()</font> with the date string, e.g.,
</p>

<dl>  <dl>
     <dt> <a name="936389"> </a><CODE>l_bin_date("1-jan-2001");</CODE>
  </dl>
</dl>
<p>
  <a name="936390"> </a>To obtain the start date from a license file license key (the license key on the FEATURE line), use <font  face="Arial" size="2">l_extract_date()</font>:
</p>

<dl>  <dl>
     <dt> <a name="936391"> </a><CODE>char code[21];</CODE>
     <dt> <a name="936393"> </a><CODE>l_extract_date(code);</CODE>
  </dl>
</dl>
<h5>
  <a name="936405"> </a>Parameters
</h5>


<p>
  <a name="936427"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936408"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936413"> </a>FLEX<em>lm</em> job, from <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="936415"> </a><code>(CONFIG *) </code><code><em>conf
<br></em></code></td>
    <td><a name="936417"> </a>Filled-in <code>CONFIG</code> struct pointer.
<br></td>
  </tr>
  <tr>
    <td><a name="936419"> </a><code>(char *) </code><code><em>sdate
<br></em></code></td>
    <td><a name="936421"> </a>Start date, in coded format. See above.
<br></td>
  </tr>
  <tr>
    <td><a name="936424"> </a><code>pointer to<br>
<br>(VENDORCODE) </code>code
<br></td>
    <td><a name="936426"> </a>From <font  face="Arial" size="2">LM_CODE()</font> macro. (With v7.2, <em>do 
<br>not</em> XOR <code>code.data[0]</code> and 
<br><code>code.data[1]</code> with <code><em>VENDOR_KEY5</em></code>.)
<br></td>
  </tr>
</table>




<p>
  <a name="936428"> </a>
</p>


<h5>
  <a name="936429"> </a>Return
</h5>


<p>
  <a name="936439"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936432"> </a><code>(char *) </code><code><em>enc_code
<br></em></code></td>
    <td><a name="936434"> </a>The license key, which should match the 
<br>license file; 0 if unsuccessful.
<br></td>
  </tr>
</table>




<p>
  <a name="936441"> </a>
</p>


<h5>
  <a name="947913"> </a>Error Returns
</h5>


<p>
  <a name="936462"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936444"> </a>LM_CANTMALLOC
<br></td>
    <td><a name="936446"> </a><font  face="Arial" size="2">malloc()</font> call failed.
<br></td>
  </tr>
  <tr>
    <td><a name="936448"> </a>LM_LGEN_VER
<br></td>
    <td><a name="936450"> </a>Attempt to generate license with 
<br>incompatible attributes for the specified 
<br>version of FLEX<em>lm</em>.
<br></td>
  </tr>
  <tr>
    <td><a name="936455"> </a>LM_BADPARAM
<br></td>
    <td><a name="936457"> </a>Parameters and job attributes are 
<br>inconsistent.
<br></td>
  </tr>
  <tr>
    <td><a name="936459"> </a>LM_BADDATE
<br></td>
    <td><a name="936461"> </a>Invalid start date.
<br></td>
  </tr>
</table>




<p>
  <a name="936463"> </a>
</p>


<h5>
  <a name="936465"> </a>See Also
</h5>

<ul>
  <li><a name="936469"> </a><a href="all.htm#881393">Section 3.9, "lc_cryptstr()</a>"

</ul>

<h4>
  <a name="936505"> </a>E.1.7	 lc_disconn()
</h4>


<h5>
  <a name="936506"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936507"> </a><CODE><code><em>status</em></code> = lc_disconn(<code><em>job</em></code>, <code><em>flag</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936508"> </a>Description
</h5>


<p>
  <a name="936509"> </a>Drops the connection to the server. A count of "logical" connections is maintained and if other features are active the connection is maintained, unless <code><em>flag</em></code> is non-zero.
</p>


<h5>
  <a name="936510"> </a>Parameters
</h5>


<p>
  <a name="936520"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936513"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936515"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="936517"> </a><code>(int) </code><code><em>flag
<br></em></code></td>
    <td><a name="936519"> </a>Non-zero to force disconnection.
<br></td>
  </tr>
</table>




<p>
  <a name="936521"> </a>
</p>


<h5>
  <a name="936522"> </a>Return
</h5>


<p>
  <a name="936530"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936525"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="936527"> </a>&lt;0 -- error
<br><a name="936528"> </a>== 0 -- success
<br><a name="936529"> </a>&gt; 0 -- # of "logical" connections remaining.
<br></td>
  </tr>
</table>




<p>
  <a name="936531"> </a>
</p>


<h4>
  <a name="936535"> </a>E.1.8	 lc_display(), lc_hostname(), lc_username()
</h4>


<h5>
  <a name="936536"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936537"> </a><CODE><code><em>display_name</em></code> = lc_display(<code><em>job</em></code>, <code><em>flag</em></code>)</CODE>
     <dt> <a name="936538"> </a><CODE><code><em>hostname</em></code> = lc_hostname(<code><em>job</em></code>, <code><em>flag</em></code>)</CODE>
     <dt> <a name="936539"> </a><CODE><code><em>username</em></code> = lc_username(<code><em>job</em></code>, <code><em>flag</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936540"> </a>Description
</h5>


<p>
  <a name="936541"> </a>Returns environment information about the current process.
</p>


<h5>
  <a name="936542"> </a>Parameters
</h5>


<p>
  <a name="936556"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936545"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936547"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="936549"> </a><code>(int) </code><code><em>flag
<br></em></code></td>
    <td><a name="936551"> </a>0 -- Return system's idea of value.
<br><a name="936555"> </a>!= 0 -- Return FLEX<em>lm</em>'s idea of value.
<br></td>
  </tr>
</table>




<p>
  <a name="936558"> </a>
</p>


<h5>
  <a name="947917"> </a>Return
</h5>


<p>
  <a name="936559"> </a>One of:
</p>


<p>
  <a name="936569"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936562"> </a><code>(char *) </code><code><em>display_name
<br></em></code><a name="936563"> </a>(char *) <code><em>hostname
<br></em></code><a name="936564"> </a>(char *) <code><em>username
<br></em></code></td>
    <td><a name="936566"> </a>Display name.
<br><a name="936567"> </a>Host name.
<br><a name="936568"> </a>User name.
<br></td>
  </tr>
</table>




<p>
  <a name="936570"> </a>
</p>


<h4>
  <a name="936572"> </a>E.1.9	 lc_feat_set()
</h4>


<h5>
  <a name="936573"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936574"> </a><CODE><code><em>line</em></code> = lc_feat_set(<code><em>job</em></code>, <code><em>vendor</em></code>, <code><em>code</em></code>, <code><em>codes</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936575"> </a>Description
</h5>


<p>
  <a name="936577"> </a>Computes the FEATURESET <code><em>code</em></code> for the specified <code><em>vendor</em></code>, if <code><em>codes</em></code> is NULL. If <code><em>codes</em></code> is a pointer to a <code>char *</code>, the pointer is set to an array of license keys for each FEATURE line for this <code><em>vendor</em></code>.
</p>


<h5>
  <a name="936578"> </a>Parameters
</h5>


<p>
  <a name="936596"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936581"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936583"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="936585"> </a><code>(char *) </code><code><em>vendor
<br></em></code></td>
    <td><a name="936587"> </a>The vendor daemon desired.
<br></td>
  </tr>
  <tr>
    <td><a name="936589"> </a><code>(VENDORCODE *) </code><code><em>code</em></code><code> 
<br></code></td>
    <td><a name="936591"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="936593"> </a><code>(char **) </code><code><em>codes
<br></em></code></td>
    <td><a name="936595"> </a>Concatenated license keys (returned). If 
<br>a pointer to a <code>char *</code> is passed, this gets 
<br>set to a string which is a concatenation 
<br>of the license keys for each FEATURE 
<br>line for this vendor daemon--to be used 
<br>for calculating a checksum using your 
<br>own checksum algorithm.
<br></td>
  </tr>
</table>




<h5>
  <a name="947921"> </a>Return
</h5>


<p>
  <a name="936604"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936601"> </a><code>(char *) </code><code><em>line
<br></em></code></td>
    <td><a name="936603"> </a>The FEATURESET line for the license 
<br>file, or NULL for error.
<br></td>
  </tr>
</table>




<p>
  <a name="936606"> </a>
</p>


<h5>
  <a name="947925"> </a>Error Returns
</h5>


<p>
  <a name="936612"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936609"> </a>LM_CANTMALLOC
<br></td>
    <td><a name="936611"> </a><font  face="Arial" size="2">malloc()</font> call failed.
<br></td>
  </tr>
</table>




<p>
  <a name="936613"> </a>
</p>


<h5>
  <a name="936614"> </a>See Also
</h5>

<ul>
  <li><a name="936618"> </a><a href="allApp.htm#939262">Section E.3.11, "ls_use_featset</a>"

  <li><a name="936622"> </a><a href="allApp.htm#939781">Section E.4.2, "FEATURESET Line</a>"

</ul>

<h4>
  <a name="936625"> </a>E.1.10	 lc_get_errno()
</h4>


<h5>
  <a name="936626"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936627"> </a><CODE><code><em>error</em></code> = lc_get_errno(<code><em>job</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936628"> </a>Description
</h5>


<p>
  <a name="936632"> </a>The most recently set FLEX<em>lm</em> error is obtainable via <font  face="Arial" size="2">lc_get_errno()</font>. This can be used after any FLEX<em>lm</em> function. <font  face="Arial" size="2">lc_err_info()</font> is now recommended instead, because it includes full error information.
</p>


<h5>
  <a name="936636"> </a>Parameters
</h5>


<p>
  <a name="936642"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936639"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936641"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<h5>
  <a name="936644"> </a>Return
</h5>


<p>
  <a name="936653"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936647"> </a><code>(int) </code><code><em>error
<br></em></code></td>
    <td><a name="936649"> </a>See <code>lmclient.h</code>, <code>lm_lerr.h</code>, and 
<br><code>lmerrors.h</code> for a list of possible 
<br>FLEX<em>lm</em> errors and associated English 
<br>descriptions.
<br></td>
  </tr>
</table>




<p>
  <a name="936654"> </a>
</p>


<h5>
  <a name="936655"> </a>See Also
</h5>

<ul>
  <li><a name="936659"> </a><a href="all.htm#909119">Section 3.10, "lc_err_info()</a>"

  <li><a name="936663"> </a><a href="all.htm#882046">Section 3.28, "lc_perror()</a>"

  <li><a name="936664"> </a><code>lmclient.h</code>

</ul>

<h4>
  <a name="936666"> </a>E.1.11	 lc_get_feats()
</h4>


<h5>
  <a name="936667"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936668"> </a><CODE><code><em>fs_code</em></code> = lc_get_feats(<code><em>job</em></code>, <code><em>vendor</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936669"> </a>Description
</h5>


<p>
  <a name="936671"> </a>Gets the license key from the FEATURESET line for the specified vendor.
</p>


<h5>
  <a name="936672"> </a>Parameters
</h5>


<p>
  <a name="936682"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936675"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936677"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="936679"> </a><code>(char *) </code><code><em>vendor
<br></em></code></td>
    <td><a name="936681"> </a>The vendor daemon name.
<br></td>
  </tr>
</table>




<p>
  <a name="936683"> </a>
</p>


<h5>
  <a name="936684"> </a>Return
</h5>


<p>
  <a name="936690"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936687"> </a><code>(char *) </code><code><em>fs_code
<br></em></code></td>
    <td><a name="936689"> </a>The code from the FEATURESET line 
<br>for this vendor.
<br></td>
  </tr>
</table>




<p>
  <a name="936691"> </a>
</p>


<h5>
  <a name="936692"> </a>Error Returns
</h5>


<p>
  <a name="936698"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936695"> </a>LM_NOFEATURE
<br></td>
    <td><a name="936697"> </a>FEATURESET line for requested vendor 
<br>cannot be found.
<br></td>
  </tr>
</table>




<p>
  <a name="936699"> </a>
</p>


<h5>
  <a name="936700"> </a>See Also
</h5>

<ul>
  <li><a name="936704"> </a><a href="allApp.htm#939781">Section E.4.2, "FEATURESET Line</a>"

</ul>

<h4>
  <a name="936706"> </a>E.1.12	 lc_gethostid()
</h4>


<h5>
  <a name="936707"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936708"> </a><CODE><code><em>hostid</em></code> = lc_gethostid(<code><em>job</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936709"> </a>Description
</h5>


<p>
  <a name="936710"> </a><font  face="Arial" size="2">lc_hostid()</font> should normally be used instead.
</p>


<p>
  <a name="936712"> </a>Returns the hostid for the local host. <font  face="Arial" size="2">lc_gethostid()</font> is simply a call to <font  face="Arial" size="2">lc_getid_type(</font><code><em>default_hostid_type</em></code><font  face="Arial" size="2">)</font>.
</p>


<h5>
  <a name="936713"> </a>Parameters
</h5>


<p>
  <a name="936719"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936716"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936718"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="936720"> </a>
</p>


<h5>
  <a name="936721"> </a>Return
</h5>


<p>
  <a name="936728"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936725"> </a><code>(HOSTID *) </code><code><em>hostid
<br></em></code></td>
    <td><a name="936727"> </a>A pointer to the <code>HOSTID</code> struct, filled in 
<br>for the current host, or NULL on failure.
<br></td>
  </tr>
</table>




<p>
  <a name="936729"> </a>
</p>


<p>
  <a name="936730"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The memory returned by <font  face="Arial" size="2">lc_getid_type()</font> is shared by <font  face="Arial" size="2">lc_gethostid()</font>, and both functions free this memory when called. Therefore, do not call <font  face="Arial" size="2">lc_getid_type()</font>, and then <font  face="Arial" size="2">lc_gethostid()</font>, and expect the first pointer to remain valid.</FONT><HR WIDTH=75%>


<h5>
  <a name="936731"> </a>Error Returns
</h5>


<p>
  <a name="936737"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936734"> </a>LM_CANTFINDETHER
<br></td>
    <td><a name="936736"> </a>Cannot find ethernet device. If this error 
<br>is returned, a null <code>HOSTID</code> pointer will 
<br>be returned. (Prior to v5, this was a 
<br><code>NOHOSTID</code> type, rather than a NULL 
<br>pointer).
<br></td>
  </tr>
</table>




<p>
  <a name="936738"> </a>
</p>


<h5>
  <a name="936739"> </a>See Also
</h5>

<ul>
  <li><a name="936740"> </a><code>lmclient.h</code> for the definition of the <code>HOSTID</code> struct

</ul>

<h4>
  <a name="936741"> </a>E.1.13	 lc_getid_type()
</h4>


<h5>
  <a name="936742"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936743"> </a><CODE><code><em>hostid</em></code> = lc_getid_type(<code><em>job</em></code>, <code><em>id_type</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936744"> </a>Description
</h5>


<p>
  <a name="936745"> </a><font  face="Arial" size="2">lc_hostid()</font> should normally be used instead.
</p>


<p>
  <a name="936746"> </a>Returns the <code>HOSTID</code> of the specified type for the local host.
</p>


<p>
  <a name="936747"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The memory returned by <font  face="Arial" size="2">lc_getid_type()</font> is shared by <font  face="Arial" size="2">lc_gethostid()</font>, and both functions free this memory when called. Therefore, do not call <font  face="Arial" size="2">lc_getid_type()</font>, and then <font  face="Arial" size="2">lc_gethostid()</font>, and expect the first pointer to remain valid.</FONT><HR WIDTH=75%>


<h5>
  <a name="936748"> </a>Parameters
</h5>


<p>
  <a name="936891"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936751"> </a><code>(LM_HANDLE *) 
<br></code><code><em>job
<br></em></code></td>
    <td colspan=2 rowspan=2><a name="936753"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br><a name="936755"> </a>The requested hostid type (see <code>lmclient.h</code>). 
<br>Types are:
<br></td>
  </tr>
  <tr>
    <td><a name="936759"> </a><code>(int) </code><code><em>id_type
<br></em></code></td>
  </tr>
  <tr>
    <td><a name="936765"> </a>
<br></td>
    <td><a name="936768"> </a>HOSTID_LONG
<br></td>
    <td><a name="936770"> </a>Longword hostid, e.g., 
<br>SUN
<br></td>
  </tr>
  <tr>
    <td><a name="936772"> </a>
<br></td>
    <td><a name="936775"> </a>HOSTID_ETHER
<br></td>
    <td><a name="936777"> </a>Ethernet address
<br></td>
  </tr>
  <tr>
    <td><a name="936779"> </a>
<br></td>
    <td><a name="936782"> </a>HOSTID_USER
<br></td>
    <td><a name="936784"> </a>User name
<br></td>
  </tr>
  <tr>
    <td><a name="936786"> </a>
<br></td>
    <td><a name="936789"> </a>HOSTID_DISPLAY
<br></td>
    <td><a name="936791"> </a>Display name
<br></td>
  </tr>
  <tr>
    <td><a name="936793"> </a>
<br></td>
    <td><a name="936796"> </a>HOSTID_HOSTNAME
<br></td>
    <td><a name="936798"> </a>Node name
<br></td>
  </tr>
  <tr>
    <td><a name="936800"> </a>
<br></td>
    <td><a name="936803"> </a>HOSTID_ID_MODULE
<br></td>
    <td><a name="936805"> </a>HP300 Id-Module 
<br>hostid
<br></td>
  </tr>
  <tr>
    <td><a name="936807"> </a>
<br></td>
    <td><a name="936810"> </a>HOSTID_STRING
<br></td>
    <td><a name="936812"> </a>String ID, MAX 
<br>HOSTID_LEN, used 
<br>for SCO
<br></td>
  </tr>
  <tr>
    <td><a name="936814"> </a>
<br></td>
    <td><a name="936817"> </a>HOSTID_FLEXID1_<br>
<br>KEY
<br></td>
    <td><a name="936819"> </a>FLEXid Dongle
<br></td>
  </tr>
  <tr>
    <td><a name="936821"> </a>
<br></td>
    <td><a name="936824"> </a>HOSTID_FLEXID2_<br>
<br>KEY
<br></td>
    <td><a name="936826"> </a>FLEXid Dongle
<br></td>
  </tr>
  <tr>
    <td><a name="936828"> </a>
<br></td>
    <td><a name="936831"> </a>HOSTID_FLEXID3_<br>
<br>KEY
<br></td>
    <td><a name="936833"> </a>FLEXid Dongle
<br></td>
  </tr>
  <tr>
    <td><a name="936835"> </a>
<br></td>
    <td><a name="936838"> </a>HOSTID_FLEXID4_<br>
<br>KEY
<br></td>
    <td><a name="936840"> </a>FLEXid Dongle
<br></td>
  </tr>
  <tr>
    <td><a name="936842"> </a>
<br></td>
    <td><a name="936845"> </a>HOSTID_DISK_<br>
<br>SERIAL_NUM
<br></td>
    <td><a name="936847"> </a>Windows and NT disk 
<br>serial number
<br></td>
  </tr>
  <tr>
    <td><a name="936849"> </a>
<br></td>
    <td><a name="936852"> </a>HOSTID_INTERNET
<br></td>
    <td><a name="936854"> </a>Internet IP address
<br></td>
  </tr>
  <tr>
    <td><a name="936856"> </a>
<br></td>
    <td><a name="936859"> </a>HOSTID_SERNUM_ID
<br></td>
    <td><a name="936862"> </a>ID=n hostid. <br>
<br><code>idptr-&gt;id.string</code> 
<br>contains this hostid
<br></td>
  </tr>
  <tr>
    <td><a name="936864"> </a>
<br></td>
    <td><a name="936867"> </a>HOSTID_VENDOR
<br></td>
    <td><a name="936869"> </a>Start of vendor-defined 
<br>hostid types
<br></td>
  </tr>
  <tr>
    <td><a name="936871"> </a>
<br></td>
    <td><a name="936874"> </a>HOSTID_INTEL32
<br></td>
    <td><a name="936876"> </a>Intel Pentium III+ 
<br>CPUID (v7.0d+), 32-
<br>bit format
<br></td>
  </tr>
  <tr>
    <td><a name="936878"> </a>
<br></td>
    <td><a name="936881"> </a>HOSTID_INTEL64
<br></td>
    <td><a name="936883"> </a>Intel Pentium III+ 
<br>CPUID (v7.0d+), 64-
<br>bit format
<br></td>
  </tr>
  <tr>
    <td><a name="936885"> </a>
<br></td>
    <td><a name="936888"> </a>HOSTID_INTEL96
<br></td>
    <td><a name="936890"> </a>Intel Pentium III+ 
<br>CPUID (v7.0d+), 96-
<br>bit format
<br></td>
  </tr>
</table>




<p>
  <a name="936893"> </a>
</p>


<h5>
  <a name="946205"> </a>Return
</h5>


<p>
  <a name="936899"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936896"> </a><code>(HOSTID *) </code><code><em>hostid
<br></em></code></td>
    <td><a name="936898"> </a>A pointer to the <code>HOSTID</code> struct, filled in 
<br>for the current host, or NULL on failure. 
<br>See <code>lmclient.h</code> for the definition of 
<br>the <code>HOSTID</code> struct.
<br></td>
  </tr>
</table>




<p>
  <a name="936901"> </a>
</p>


<h5>
  <a name="946209"> </a>Error Returns
</h5>


<p>
  <a name="936907"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936904"> </a>LM_CANTFINDETHER
<br></td>
    <td><a name="936906"> </a>Cannot find ethernet device.
<br></td>
  </tr>
</table>




<p>
  <a name="936911"> </a><font  face="Arial" size="2"></font>
</p>


<p>
  <a name="946213"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 <font  face="Arial" size="2">lc_getid_type()</font> does NOT process either ANY or DEMO hostid types.</FONT><HR WIDTH=75%>


<h5>
  <a name="936912"> </a>See Also
</h5>

<ul>
  <li><a name="936913"> </a><code>lmclient.h</code> for definition of <code>HOSTID</code> struct

  <li><a name="936917"> </a><a href="all.htm#940145">Section 5.13.2, "Special FLEXlm Hostids</a>"

</ul>

<h4>
  <a name="936962"> </a>E.1.14	 lc_isadmin()
</h4>


<h5>
  <a name="936963"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936964"> </a><CODE><code><em>status</em></code> = lc_isadmin(<code><em>job</em></code>, <code><em>user</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936965"> </a>Description
</h5>


<p>
  <a name="936967"> </a>Verifies that the specified user is a license administrator. A license administrator is a member of the "lmadmin" group. If there is no "lmadmin" group in the <code>/etc/groups</code> file, then anyone in group 0 is a license administrator.
</p>


<h5>
  <a name="936969"> </a>Parameters
</h5>


<p>
  <a name="936979"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936972"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="936974"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="936976"> </a><code>(char *) </code><code><em>user
<br></em></code></td>
    <td><a name="936978"> </a>Login name of user to test.
<br></td>
  </tr>
</table>




<p>
  <a name="936980"> </a>
</p>


<h5>
  <a name="936981"> </a>Return
</h5>


<p>
  <a name="936988"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="936984"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="936986"> </a>Indication of whether the user is an 
<br>administrator: 0 if the user is not an 
<br>administrator, &lt;&gt;0 if an administrator. 
<br>Always returns 1 on non-UNIX systems.
<br></td>
  </tr>
</table>




<p>
  <a name="936989"> </a>
</p>


<h5>
  <a name="936990"> </a>See Also
</h5>

<ul>
  <li><a name="936994"> </a><a href="all.htm#898894">Chapter&nbsp;8, "The License Manager Daemon</a>"

</ul>

<h4>
  <a name="936996"> </a>E.1.15	 lc_lic_where()
</h4>


<h5>
  <a name="936997"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="936998"> </a><CODE><code><em>path</em></code> = lc_lic_where(<code><em>job</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="936999"> </a>Description
</h5>


<p>
  <a name="937003"> </a>Returns path name of FLEX<em>lm</em> license file. This function does not support the license file list in the <code>LM_LICENSE_FILE</code> environment variable -- it only reports on the first file in the list, or, if a feature was already checked out, the file that was used for the checkout. Use <font  face="Arial" size="2">lc_get_attr(</font><code>LM_A_LF_LIST,...</code><font  face="Arial" size="2">)</font> for the full list.
</p>


<h5>
  <a name="937005"> </a>Parameters
</h5>


<p>
  <a name="937011"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937008"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="937010"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="937012"> </a>
</p>


<h5>
  <a name="937013"> </a>Return
</h5>


<p>
  <a name="937026"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937016"> </a><code>(char *) </code><code><em>path
<br></em></code></td>
    <td><a name="937021"> </a>Path of the license file that FLEX<em>lm</em> will 
<br>use; NULL if no license file set. <strong>Note--
<br></strong>This returned string must not be 
<br>modified by the caller.
<br></td>
  </tr>
</table>




<p>
  <a name="937027"> </a>
</p>


<h5>
  <a name="937028"> </a>See Also
</h5>

<ul>
  <li><a name="937032"> </a><a href="all.htm#883064">Section 4.13, "LM_A_LF_LIST</a>"

</ul>

<h4>
  <a name="937073"> </a>E.1.16	 lc_remove()
</h4>


<h5>
  <a name="937074"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="937075"> </a><CODE><code><em>status</em></code> = lc_remove(<code><em>job</em></code>, <code><em>feature</em></code>, <code><em>user</em></code>, <code><em>host</em></code>, <code><em>display</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="937076"> </a>Description
</h5>


<p>
  <a name="937077"> </a>Removes the specified user's license for <code><em>feature</em></code>. This is used by the <code>lmremove</code> command, and has the same restrictions regarding the "lmadmin" group. <font  face="Arial" size="2">lc_remove()</font> normally is only used when the client's system has had a hard crash, and the server does not detect the client node failure. If <font  face="Arial" size="2">lc_remove()</font> is called on a healthy client, the license will be checked out again by the client with its next heartbeat.
</p>


<p>
  <a name="937079"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 If <code>lmgrd</code> is started with the <code>-x lmremove</code> flag, then <font  face="Arial" size="2">lc_remove()</font> has no effect.</FONT><HR WIDTH=75%>


<h5>
  <a name="937080"> </a>Parameters
</h5>


<p>
  <a name="937102"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937083"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="937085"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="937087"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="937089"> </a>Remove the license for this feature.
<br></td>
  </tr>
  <tr>
    <td><a name="937091"> </a><code>(char *) </code><code><em>user
<br></em></code></td>
    <td><a name="937093"> </a>User name of license to remove.
<br></td>
  </tr>
  <tr>
    <td><a name="937095"> </a><code>(char *) </code><code><em>host
<br></em></code></td>
    <td><a name="937097"> </a>Host name of license to remove.
<br></td>
  </tr>
  <tr>
    <td><a name="937099"> </a><code>(char *) </code><code><em>display
<br></em></code></td>
    <td><a name="937101"> </a>Display name of license to remove.
<br></td>
  </tr>
</table>




<p>
  <a name="937103"> </a>
</p>


<h5>
  <a name="937104"> </a>Return
</h5>


<p>
  <a name="937110"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937107"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="937109"> </a> 0--OK,!=0, error status.
<br></td>
  </tr>
</table>




<p>
  <a name="937111"> </a>
</p>


<h5>
  <a name="937112"> </a>Error Returns
</h5>


<p>
  <a name="937148"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937115"> </a>LM_BADCOMM
<br></td>
    <td><a name="937117"> </a>Communications error.
<br></td>
  </tr>
  <tr>
    <td><a name="937119"> </a>LM_BADPARAM
<br></td>
    <td><a name="937121"> </a>No licenses issued to this user.
<br></td>
  </tr>
  <tr>
    <td><a name="937123"> </a>LM_CANTCONNECT
<br></td>
    <td><a name="937125"> </a>Cannot connect to license server.
<br></td>
  </tr>
  <tr>
    <td><a name="937127"> </a>LM_CANTREAD
<br></td>
    <td><a name="937129"> </a>Cannot read from license server.
<br></td>
  </tr>
  <tr>
    <td><a name="937131"> </a>LM_CANTWRITE
<br></td>
    <td><a name="937133"> </a>Cannot write to license server.
<br></td>
  </tr>
  <tr>
    <td><a name="937135"> </a>LM_NOFEATURE
<br></td>
    <td><a name="937137"> </a>Feature not found in license file data.
<br></td>
  </tr>
  <tr>
    <td><a name="937140"> </a>LM_NOTLICADMIN
<br></td>
    <td><a name="937142"> </a>Failed because user is not in "lmadmin" 
<br>group.
<br></td>
  </tr>
  <tr>
    <td><a name="937145"> </a>LM_REMOVETOOSOON
<br></td>
    <td><a name="937147"> </a>Failed because ls_min_lmremove time 
<br>has not elapsed.
<br></td>
  </tr>
</table>




<p>
  <a name="937149"> </a>
</p>


<h5>
  <a name="937150"> </a>See Also
</h5>

<ul>
  <li><a name="937154"> </a><a href="all.htm#898894">Chapter&nbsp;8, "The License Manager Daemon</a>"

  <li><a name="937158"> </a><a href="all.htm#884940">Section 9.2.8, "ls_min_lmremove</a>"

  <li><a name="937162"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

</ul>

<h4>
  <a name="937163"> </a>E.1.17	 lc_set_errno()
</h4>


<h5>
  <a name="937164"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="937165"> </a><CODE>(void) lc_set_errno(<code><em>job</em></code>, <code><em>error</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="937166"> </a>Description
</h5>


<p>
  <a name="937170"> </a>The FLEX<em>lm</em> error can be set with <font  face="Arial" size="2">lc_set_errno()</font>. This should not normally be used, because the error should be set by the FLEX<em>lm</em> libraries. You may want to set the error to 0 before calling a FLEX<em>lm</em> function.
</p>


<h5>
  <a name="937177"> </a>Parameters
</h5>


<p>
  <a name="937190"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937180"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="937182"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="937184"> </a><code>(int) </code><code><em>error
<br></em></code></td>
    <td><a name="937186"> </a>See <code>lmclient.h</code> for a list of possible 
<br>FLEX<em>lm</em> error codes.
<br></td>
  </tr>
</table>




<p>
  <a name="937191"> </a>
</p>


<h5>
  <a name="937192"> </a>Return
</h5>


<p>
  <a name="937193"> </a>None.
</p>


<h5>
  <a name="937194"> </a>See Also
</h5>

<ul>
  <li><a name="937198"> </a><a href="all.htm#909119">Section 3.10, "lc_err_info()</a>"

  <li><a name="937202"> </a><a href="all.htm#882046">Section 3.28, "lc_perror()</a>"

  <li><a name="937206"> </a><a href="allApp.htm#936625">Section E.1.10, "lc_get_errno()</a>"

  <li><a name="937207"> </a><code>lmclient.h</code>

</ul>

<h4>
  <a name="937209"> </a>E.1.18	 lc_shutdown()
</h4>


<h5>
  <a name="937210"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="937211"> </a><CODE><code><em>status</em></code> = lc_shutdown(<code><em>job</em></code>, <code><em>prompt</em></code>, <code><em>print</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="937212"> </a>Description
</h5>


<p>
  <a name="937217"> </a>Shuts down the FLEX<em>lm</em> servers. This is used by <code>lmdown</code>.
</p>


<h5>
  <a name="937218"> </a>Parameters
</h5>


<p>
  <a name="937232"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937221"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="937223"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
  <tr>
    <td><a name="937225"> </a><code>(int) </code><code><em>prompt
<br></em></code></td>
    <td><a name="937227"> </a>Unused (as of v6).
<br></td>
  </tr>
  <tr>
    <td><a name="937229"> </a><code>(int) </code><code><em>print
<br></em></code></td>
    <td><a name="937231"> </a>Unused (as of v6).
<br></td>
  </tr>
</table>




<p>
  <a name="937233"> </a>
</p>


<h5>
  <a name="937234"> </a>Return
</h5>


<p>
  <a name="937240"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937237"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="937239"> </a>0 -- server not shut down; &lt;&gt; 0 -- 
<br>server shut down.
<br></td>
  </tr>
</table>




<p>
  <a name="937241"> </a>
</p>


<h5>
  <a name="937242"> </a>Error Returns
</h5>


<p>
  <a name="937257"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937245"> </a>LM_FUNCNOTAVAIL
<br></td>
    <td><a name="937247"> </a>Vendor keys do not support this 
<br>function.
<br></td>
  </tr>
  <tr>
    <td><a name="937250"> </a>LM_NOTLICADMIN
<br></td>
    <td><a name="937252"> </a>You are not an authorized license 
<br>administrator.
<br></td>
  </tr>
  <tr>
    <td><a name="937254"> </a>LM_CANTREAD
<br></td>
    <td><a name="937256"> </a>Cannot read data from license server.
<br></td>
  </tr>
</table>




<p>
  <a name="937258"> </a>
</p>


<h5>
  <a name="937259"> </a>See Also
</h5>

<ul>
  <li><a name="937263"> </a><a href="all.htm#898894">Chapter&nbsp;8, "The License Manager Daemon</a>"

</ul>

<h4>
  <a name="937357"> </a>E.1.19	 lc_timer()
</h4>


<h5>
  <a name="937358"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="937359"> </a><CODE><code><em>num_failed_attempts</em></code> = lc_timer(<code><em>job</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="937360"> </a>Description
</h5>


<p>
  <a name="937361"> </a>This routine is called by vendors that cannot tolerate the use of interval timers by FLEX<em>lm</em>. The purpose of <font  face="Arial" size="2">lc_timer()</font> is twofold:
</p>

<ul>
  <li><a name="937365"> </a>Ensure that the vendor daemon is continually running -- otherwise an end user may kill the license server when all licenses are in use, restart the server, and obtain unauthorized licenses.

  <li><a name="937366"> </a>Keep license server informed that the client is still using its license -- otherwise the license server may timeout the client and drop its license.

</ul>

<p>
  <a name="937370"> </a>If no FLEX<em>lm</em> timers are used, then <font  face="Arial" size="2">lc_timer()</font> must be called periodically. To avoid FLEX<em>lm</em>'s use of timers, call <font  face="Arial" size="2">lc_set_attr(</font><code><em></em></code><code>LM_A_CHECK_INTERVAL, (LM_A_VAL_TYPE)-1</code><font  face="Arial" size="2">)</font>, and <font  face="Arial" size="2">lc_set_attr(</font><code><em></em></code><code>LM_A_RETRY_INTERVAL, (LM_A_VAL_TYPE)-1</code><font  face="Arial" size="2">)</font>.
</p>


<p>
  <a name="937379"> </a>If the default timer is left installed, <font  face="Arial" size="2">lc_timer()</font> is called by the FLEX<em>lm</em>-installed timer. <font  face="Arial" size="2">lc_timer()</font> also performs all the reconnection functions, so it is important to keep calling <font  face="Arial" size="2">lc_timer()</font>, even if your reconnection handler is called.
</p>


<p>
  <a name="937380"> </a><font  face="Arial" size="2">lc_timer()</font> will not do anything if it is called less than 20 seconds since it was last called. This prevents unnecessary networking delays, and no delays will occur because of <font  face="Arial" size="2">lc_timer()</font>. Under certain circumstances, <font  face="Arial" size="2">lc_timer()</font> must be called often enough to avoid the application losing its license -- the vendor daemon will time out clients due to either UDP timeout or the end user TIMEOUT option. The application must ensure that LM_A_UDP_TIMEOUT, LM_A_TCP_TIMEOUT, and ls_minimum_user_timeout are large enough that the application will not inadvertently lose its license. In general, it is a good idea to call <font  face="Arial" size="2">lc_timer()</font><em> </em>once every five minutes, although occasional lapses are relatively harmless.
</p>


<h5>
  <a name="937396"> </a>Parameters
</h5>


<p>
  <a name="937402"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937399"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="937401"> </a>From <font  face="Arial" size="2">lc_new_job()</font>.
<br></td>
  </tr>
</table>




<p>
  <a name="937403"> </a>
</p>


<h5>
  <a name="937404"> </a>Return
</h5>


<p>
  <a name="937411"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="937407"> </a><code>(int) 
<br></code><code><em>num_failed_attempts
<br></em></code></td>
    <td><a name="937409"> </a>0--success; heartbeat messages 
<br>exchanged with server.
<br><a name="937410"> </a>&gt;0--failure; number of failed attempts 
<br>to contact the server.
<br></td>
  </tr>
</table>




<p>
  <a name="937412"> </a>
</p>


<h5>
  <a name="937413"> </a>See Also
</h5>

<ul>
  <li><a name="937417"> </a><a href="all.htm#884944">Section 9.2.9, "ls_minimum_user_timeout</a>"

  <li><a name="937425"> </a><a href="all.htm#882913">Section 4.3, "LM_A_CHECK_INTERVAL</a>"

</ul>

<h3>
  <a name="921430"> </a>E.2	 Rarely Used FLEXible API Attributes
</h3>


<h4>
  <a name="887000"> </a>E.2.1	 LM_A_CONN_TIMEOUT
</h4>


<p>
  <a name="887001"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="929094"> </a>Default: 10 seconds
</p>


<p>
  <a name="887003"> </a>If specified as a positive integer, conn_timeout will set the timeout for connection to a vendor daemon, as well as subsequent reads from the daemon. For <font  face="Arial" size="2">connect()</font>, this timeout overrides the TCP/IP default of 45 seconds. <font  face="Arial" size="2">lc_set_attr()</font> will return LM_BADPARAM, which will also be returned from <font  face="Arial" size="2">lc_get_errno()</font>, if this value is &lt;0.
</p>


<p>
  <a name="887007"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Prior to FLEX<em>lm</em> v4.0, this timeout only applied to <font  face="Arial" size="2">connect()</font>.</FONT><HR WIDTH=75%>


<h4>
  <a name="887012"> </a>E.2.2	 LM_A_CRYPT_CASE_SENSITIVE
</h4>


<p>
  <a name="887013"> </a>Type: <code>(short)</code>
</p>


<p>
  <a name="929119"> </a>Default: Case-insensitive comparison 
</p>


<p>
  <a name="887015"> </a>If specified as a non-zero integer, LM_A_CRYPT_CASE_SENSITIVE will cause the output of the authentication routine to be compared to the code in the license file with a case-sensitive comparison. 
</p>


<h4>
  <a name="887019"> </a>E.2.3	 LM_A_DIAGS_ENABLED
</h4>


<p>
  <a name="887020"> </a>Type: <code>(short)</code>
</p>


<p>
  <a name="929207"> </a>Default: On (1)
</p>


<p>
  <a name="887025"> </a>This option allows FLEX<em>lm</em> to produce some diagnostic output for failures of the <font  face="Arial" size="2">lc_checkout()</font> call if the environment variable <code>FLEXLM_DIAGNOSTICS</code> is set. If LM_A_DIAGS_ENABLED is set to 0, this diagnostic information is unconditionally disabled. 
</p>


<p>
  <a name="887027"> </a>The <code>FLEXLM_DIAGNOSTICS</code> environment variable can be used by your end-users to obtain more information if a checkout fails. If <code>FLEXLM_DIAGNOSTICS</code> is set, an <font  face="Arial" size="2">lc_perror()</font> call is made. If <code>FLEXLM_DIAGNOSTICS</code> is set to "2," then in addition to the <font  face="Arial" size="2">lc_perror()</font> call, the arguments to <font  face="Arial" size="2">lc_checkout()</font> (except for the KEY information) are printed to stderr, also (on Windows, this is logged to <code>flex_err.log</code>). 
</p>


<p>
  <a name="887031"> </a>The diagnostics are enabled by default. GLOBEtrotter Software recommends that this be left<em> </em>enabled. This will allow us to help you debug your end-users' problems with error messages more explicit than, "can't get license." In these situations, we are unable to help. We developed and distributed the <code>FLEXLM_DIAGNOSTICS</code> to enable us (and your support people) to help your end users more effectively.
</p>


<h4>
  <a name="887035"> </a>E.2.4	 LM_A_DISABLE_ENV
</h4>


<p>
  <a name="887036"> </a>Type: <code>(short)</code>
</p>


<p>
  <a name="929264"> </a>Default: <code>LM_LICENSE_FILE</code> environment variable enabled.
</p>


<p>
  <a name="887041"> </a>If set to a non-zero value, disable_env will force the FLEX<em>lm</em> client routines to disregard the setting of the <code>LM_LICENSE_FILE</code> environment variable. It's rare that there's a legitimate reason to use this, but it does come up with certain utilities that may explicitly need to ignore the <code>LM_LICENSE_FILE</code> environment variable. It is strongly discouraged that this be used in your applications, as many end user sites are familiar with FLEX<em>lm</em>, and need to assume that <code>LM_LICENSE_FILE</code> will be effective.
</p>


<p>
  <a name="887046"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 This must be set <em>before</em> LM_A_LICENSE_DEFAULT to be effective.</FONT><HR WIDTH=75%>


<h5>
  <a name="887049"> </a><strong>See Also</strong>
</h5>

<ul>
  <li><a name="887052"> </a><a href="allApp.htm#887145">Section E.2.5, "LM_A_LICENSE_FILE and LM_A_LICENSE_FILE_PTR</a>"

  <li><a name="887057"> </a><a href="all.htm#890494">Chapter&nbsp;7, "Distributing and Locating the License File</a>"

</ul>

<h4>
  <a name="887145"> </a>E.2.5	 LM_A_LICENSE_FILE and LM_A_LICENSE_FILE_PTR
</h4>


<p>
  <a name="887146"> </a>Type: <code>(char *)</code>
</p>


<p>
  <a name="887148"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 It is recommended that LM_A_LICENSE_DEFAULT be used instead of LM_A_LICENSE_FILE and LM_A_LICENSE_FILE_PTR.</FONT><HR WIDTH=75%>


<h5>
  <a name="887149"> </a>See Also
</h5>

<ul>
  <li><a name="887153"> </a><a href="all.htm#883083">Section 4.15, "LM_A_LICENSE_DEFAULT</a>"

  <li><a name="887157"> </a><a href="allApp.htm#887035">Section E.2.4, "LM_A_DISABLE_ENV</a>"

  <li><a name="887161"> </a><a href="all.htm#890494">Chapter&nbsp;7, "Distributing and Locating the License File</a>"

</ul>

<h4>
  <a name="938044"> </a>E.2.6	 LM_A_LKEY_LONG
</h4>


<p>
  <a name="938045"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="938046"> </a>Default: False
</p>


<p>
  <a name="938048"> </a>Obsolete with signatures; only used with license keys. If True, license file license keys will be long--64-bit, and short keys will not be accepted. Also turns on start date in the license key (which can be turned on separately with LM_A_LKEY_START_DATE. If used, ls_a_lkey_long in <code>lsvendor.c</code> must also be set to 1. This attribute is automatically turned on by setting LM_VER_BEHAVIOR in <code>lm_code.h</code> to LM_BEHAVIOR_V5_1 or less.
</p>


<h4>
  <a name="938051"> </a>E.2.7	 LM_A_LKEY_START_DATE
</h4>


<p>
  <a name="938052"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="938053"> </a>Default: False
</p>


<p>
  <a name="938054"> </a>Obsolete with signatures; only used with license keys. If true, license keys will contain start dates, and will automatically turn on LM_A_LKEY_LONG, so that license keys will be 20 hex characters long. Useful for generating licenses in pre-v6 format. This attribute is automatically turned on by setting LM_VER_BEHAVIOR in <code>lm_code.h</code> to LM_BEHAVIOR_V5_1 or less.
</p>


<h4>
  <a name="887162"> </a>E.2.8	 LM_A_MAX_TIMEDIFF
</h4>


<p>
  <a name="887163"> </a>Obsolete. This check is now automatically performed when needed.
</p>


<h4>
  <a name="887178"> </a>E.2.9	 LM_A_PERIODIC_CALL
</h4>


<p>
  <a name="887179"> </a>Type: Pointer to a function returning <code>int</code>. Return value not used.
</p>


<p>
  <a name="929486"> </a>Default: No periodic call.
</p>


<p>
  <a name="887182"> </a>This function, if specified, will be called each LM_A_PERIODIC_COUNT times that <font  face="Arial" size="2">lc_timer()</font> is called. <font  face="Arial" size="2">lc_timer()</font> is called directly or automatically depending on the value of LM_A_CHECK_INTERVAL.
</p>


<h5>
  <a name="887186"> </a>See Also
</h5>

<ul>
  <li><a name="887190"> </a><a href="all.htm#882913">Section 4.3, "LM_A_CHECK_INTERVAL</a>"

  <li><a name="887194"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

</ul>

<h4>
  <a name="887196"> </a>E.2.10	 LM_A_PERIODIC_COUNT
</h4>


<p>
  <a name="887197"> </a>Type: <code>(int)</code>
</p>


<p>
  <a name="929529"> </a>Default: 0 (no PERIODIC_CALL)
</p>


<p>
  <a name="887200"> </a>This is the count of how many times <font  face="Arial" size="2">lc_timer()</font> must be called before the function specified by LM_A_PERIODIC_CALL is called. <font  face="Arial" size="2">lc_timer()</font> is called directly or automatically depending on the value of LM_A_CHECK_INTERVAL.
</p>


<h5>
  <a name="887204"> </a>See Also
</h5>

<ul>
  <li><a name="887208"> </a><a href="all.htm#882913">Section 4.3, "LM_A_CHECK_INTERVAL</a>"

  <li><a name="887212"> </a><a href="all.htm#881820">Section 3.21, "lc_heartbeat()</a>"

</ul>

<h4>
  <a name="887214"> </a>E.2.11	 LM_A_USE_START_DATE
</h4>


<p>
  <a name="887215"> </a>Type: <code>(short)</code>
</p>


<p>
  <a name="929569"> </a>Default: 1, use start date.
</p>


<p>
  <a name="887217"> </a>This field allows you to use the start date that is built into the license file for each feature. If the current system date is earlier than the start date, then checkouts of the feature will be disabled. If set to a non-zero value, the start date will be used. LM_A_USE_START_DATE can only be turned off with <font  face="Arial" size="2">lc_set_attr()</font>.
</p>


<p>
  <a name="887218"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 If you use your own authentication routine, you must either disable the use of the start date, or create an license key which contains a valid start date. See the description of the LM_A_USER_CRYPT attribute.</FONT><HR WIDTH=75%>


<h4>
  <a name="887225"> </a>E.2.12	 LM_A_USER_CRYPT
</h4>


<p>
  <a name="887226"> </a>Type: Pointer to a function returning <code>char *</code>. Return value is the license key.
</p>


<p>
  <a name="929600"> </a>Default: FLEX<em>lm</em> standard authentication routine.
</p>


<p>
  <a name="887229"> </a>The function pointer <code>crypt</code> can be set to point to a vendor-supplied authentication routine to be used in place of the default routine.
</p>


<p>
  <a name="887235"> </a>The <font  face="Arial" size="2">crypt()</font> routine is called as follows:
</p>

<dl>  <dl>
     <dt> <a name="887236"> </a><CODE>(*crypt)(<code><em>job</em></code>, <code><em>conf</em></code>, <code><em>sdate</em></code>, <code><em>code</em></code>);</CODE>
  </dl>
</dl>
<p>
  <a name="929626"> </a>where:
</p>


<p>
  <a name="929630"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="929637"> </a><code>(LM_HANDLE *) </code><code><em>job
<br></em></code></td>
    <td><a name="929639"> </a>FLEX<em>lm</em> job.
<br></td>
  </tr>
  <tr>
    <td><a name="929641"> </a><code>(CONFIG *) </code><code><em>conf
<br></em></code></td>
    <td><a name="929643"> </a>CONFIG structure pointer.
<br></td>
  </tr>
  <tr>
    <td><a name="929645"> </a><code>(char *) </code><code><em>sdate
<br></em></code></td>
    <td><a name="929647"> </a>4-byte encoded start date.
<br></td>
  </tr>
  <tr>
    <td><a name="929649"> </a><code>(VENDORCODE *) </code><code><em>code
<br></em></code></td>
    <td><a name="929651"> </a>Pointer to the first argument to the 
<br><font  face="Arial" size="2">LM_CODE()</font> macro in <code>lm_code.h</code>, 
<br>where <code><em>code.data</em></code><code>[0]</code> and 
<br><code><em>code.data</em></code><code>[1]</code> have been XOR'd with 
<br><code><em>VENDOR_KEY5</em></code>, so that the encryption 
<br>seeds are as specified in <code>lm_code.h</code>.
<br></td>
  </tr>
</table>




<p>
  <a name="929717"> </a>
</p>


<p>
  <a name="929718"> </a>Because of the complexities of the current <code>CONFIG</code> format, we recommend the following procedure for setting a vendor-defined authentication routine:
</p>

<ol type="1">
  <li><a name="887250"> </a>Set LM_A_USER_CRYPT to your function, e.g., <font  face="Arial" size="2">our_crypt()</font>.
  <li><a name="887251"> </a><font  face="Arial" size="2">our_crypt()</font> should do the following:
<dl>    <dl>
       <dt> <a name="887252"> </a><CODE>our_crypt(job, conf, sdate, key)</CODE>
       <dt> <a name="929784"> </a><CODE>{</CODE>
       <dt> <a name="929787"> </a><CODE>char *lic_key;</CODE>
       <dt> <a name="929788"> </a><CODE></CODE>
       <dt> <a name="929789"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_set_attr(job, LM_A_USER_CRYPT, (LM_A_VAL_TYPE)0);</CODE>
       <dt> <a name="929790"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lic_key = lc_crypt(job, conf, sdate, key);</CODE>
       <dt> <a name="929791"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lc_set_attr(job, LM_A_USER_CRYPT,</CODE>
       <dt> <a name="929792"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(LM_A_VAL_TYPE)our_crypt);</CODE>
       <dt> <a name="929795"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* modify the license-key */</CODE>
       <dt> <a name="929798"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (modified(lic_key));</CODE>
       <dt> <a name="929801"> </a><CODE>}</CODE>
    </dl>
</dl></ol>

<p>
  <a name="887257"> </a>The example above first calls the standard authentication routine (<font  face="Arial" size="2">lc_crypt()</font>). Then <font  face="Arial" size="2">our_encrypt()</font> modifies the license key and returns the modified value. A simple, but useful way to modify the key is to turn it into a 32-bit integer and XOR it with a fixed number. If the license key contains an embedded start date, then you'll have to first remove the embedded start-date from the license key, perform the modification, and then re-insert the start-date into the license key.
</p>


<p>
  <a name="887258"> </a>The returned string must be 12 (short with no license key), 16 (long with no embedded start-date) or 20 (long with start-date) characters long.
</p>


<h5>
  <a name="887259"> </a>See Also
</h5>

<ul>
  <li><a name="887263"> </a><a href="all.htm#881393">Section 3.9, "lc_cryptstr()</a>"

  <li><a name="887267"> </a><a href="allApp.htm#941109">Section E.3.12, "ls_user_crypt</a>"

</ul>

<h3>
  <a name="939195"> </a>E.3	 Rarely Used Vendor Variables
</h3>


<h4>
  <a name="940861"> </a>E.3.1	 ls_a_lkey_long
</h4>

<dl>  <dl>
     <dt> <a name="940862"> </a><CODE>(int) ls_a_lkey_long = 0; /* like LM_A_KEY_LONG */</CODE>
  </dl>
</dl>
<p>
  <a name="940863"> </a>Obsolete with signatures. If 1, license keys in the license file are 64-bit. Default is 0, short, 48-bit license keys.
</p>


<h5>
  <a name="940864"> </a>See Also
</h5>

<ul>
  <li><a name="940868"> </a><a href="allApp.htm#938044">Section E.2.6, "LM_A_LKEY_LONG</a>"

</ul>

<h4>
  <a name="940869"> </a>E.3.2	 ls_a_lkey_start_date
</h4>

<dl>  <dl>
     <dt> <a name="940870"> </a><CODE>(int) ls_a_lkey_start_date = 0; /* like LM_A_KEY_START_DATE */</CODE>
  </dl>
</dl>
<p>
  <a name="940871"> </a>Obsolete with signatures. If 1, license keys contain a hidden start date, and are four characters longer. Default is 0, no hidden start date.
</p>


<h5>
  <a name="940872"> </a>See Also
</h5>

<ul>
  <li><a name="940876"> </a><a href="allApp.htm#938051">Section E.2.7, "LM_A_LKEY_START_DATE</a>"

</ul>

<h4>
  <a name="940969"> </a>E.3.3	 ls_conn_timeout
</h4>

<dl>  <dl>
     <dt> <a name="940970"> </a><CODE>(int) ls_conn_timeout = MASTER_WAIT; </CODE>
    <dl>
       <dt> <a name="940971"> </a><CODE>/* How long to wait for a connection */</CODE>
    </dl>
  </dl>
  </dl>

<p>
  <a name="940972"> </a>ls_conn_timeout is the amount of time (in seconds) that vendor daemons will wait for connections from vendor daemons on other nodes when using redundant servers. It should normally not be changed. 
</p>


<h4>
  <a name="940975"> </a>E.3.4	 ls_crypt_case_sensitive
</h4>

<dl>  <dl>
     <dt> <a name="940977"> </a><CODE>(int) ls_crypt_case_sensitive = 0; /* Is license key case-sensitive? */</CODE>
  </dl>
</dl>
<p>
  <a name="940978"> </a>If you have written your own authentication routine, and the output code from it is case-sensitive, set ls_crypt_case_sensitive to a non-zero value.
</p>


<h5>
  <a name="940979"> </a>See Also
</h5>

<ul>
  <li><a name="940983"> </a><a href="allApp.htm#887225">Section E.2.12, "LM_A_USER_CRYPT</a>"

</ul>

<h4>
  <a name="940997"> </a>E.3.5	 ls_do_checkroot (UNIX Only)
</h4>

<dl>  <dl>
     <dt> <a name="940998"> </a><CODE>(int) ls_do_checkroot = 0; </CODE>
    <dl>
       <dt> <a name="940999"> </a><CODE>/* Perform check that we are running on the real root */</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="941000"> </a>To require that your vendor daemon be running on a file system which has its root directory as the "real" root directory of the disk, set this option. This prevents an end user from cloning part of the UNIX file hierarchy and executing the daemon with a <code>chroot</code> command. If this were done, the vendor daemon locking would be bypassed and the user could run as many copies of your vendor daemon as he desired.
</p>


<p>
  <a name="941002"> </a>Theft by using <code>chroot</code> is considered to be an obscure, difficult kind of theft. The user has to have root permission, and setting up a phony <code>/</code> directory is a non-trivial task. It requires that the necessary parts of the OS from <code>/etc</code>, <code>/dev</code>, <code>/bin</code>, etc. be copied into this phony <code>/</code> directory and is an ongoing administrative hassle.
</p>


<p>
  <a name="941003"> </a>The check performed by ls_do_checkroot will fail on a diskless node. This prevents diskless nodes from acting as license servers. GLOBEtrotter Software does not recommend running license daemons on diskless nodes, but if you choose to support this, you will need to set ls_do_checkroot to 0.
</p>


<p>
  <a name="941029"> </a>For complete security, set ls_do_checkroot to 1. For minimization of confusion and support calls when your customers are running on diskless nodes, set ls_do_checkroot to 0.
</p>


<h4>
  <a name="941008"> </a>E.3.6	 ls_dump_send_data
</h4>

<dl>  <dl>
     <dt> <a name="941009"> </a><CODE>(int) ls_dump_send_data = 0; /* Set to non-zero value for debug output */</CODE>
  </dl>
</dl>
<p>
  <a name="941010"> </a>This variable controls the debug output of transmitted daemon data. It should normally be left set to 0.
</p>


<h4>
  <a name="941012"> </a>E.3.7	 ls_enforce_startdate
</h4>

<dl>  <dl>
     <dt> <a name="941013"> </a><CODE>(int) ls_enforce_startdate = 1; /* Enforce start date in features */</CODE>
  </dl>
</dl>
<p>
  <a name="941014"> </a>To use the start date present in the FEATURE line, set ls_enforce_startdate to a non-zero value.
</p>


<h4>
  <a name="941047"> </a>E.3.8	 ls_read_wait
</h4>

<dl>  <dl>
     <dt> <a name="941048"> </a><CODE>(int) ls_read_wait = 10; /* How long to wait for solicited reads */</CODE>
  </dl>
</dl>
<p>
  <a name="941049"> </a>This variable controls how long the vendor daemon will wait for a connection to be completed with another vendor daemon. The default is 10 seconds. If your daemon supports a large number of features, you may need to increase this value, since the remote daemon's feature initialization can happen during this timeout interval.
</p>


<h4>
  <a name="941056"> </a>E.3.9	 ls_tell_startdate
</h4>

<dl>  <dl>
     <dt> <a name="941057"> </a><CODE>(int) ls_tell_startdate = 1; </CODE>
    <dl>
       <dt> <a name="941058"> </a><CODE>/* Tell the user if it is earlier than start date */</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="941059"> </a>To inform the user that a feature's start date is later than the system date, set ls_tell_startdate to a non-zero value. If ls_tell_startdate is 0, then the feature will not be enabled in the daemon, and no warning message will appear in the log file.
</p>


<h4>
  <a name="941062"> </a>E.3.10	 ls_use_all_feature_lines
</h4>

<dl>  <dl>
     <dt> <a name="941063"> </a><CODE>(int) ls_use_all_feature_lines = 0; </CODE>
    <dl>
       <dt> <a name="941064"> </a><CODE>/* Use ALL copies of feature lines that are...</CODE>

<p>
  <a name="941068"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 GLOBEtrotter Software strongly discourages your use of this option, which has been made unnecessary and obsolete by the INCREMENT and UPGRADE features. The ls_use_all_feature_lines option will cause your vendor daemon to process every FEATURE line in the license file as an INCREMENT line. </FONT><HR WIDTH=75%>

    </dl>
  </dl>
</dl>
<p>
  <a name="941071"> </a>With ls_use_all_feature_lines set to a non-zero value, any old feature lines which you may have shipped will now be "legal," so, for example, if you had shipped a customer a FEATURE line with a count of 5, then upgraded them with a new line with a count of 7, they would now be able to use 12 licenses.
</p>


<h5>
  <a name="941073"> </a>See Also
</h5>

<ul>
  <li><a name="941077"> </a><a href="all.htm#912235">Section 5.5, "FEATURE or INCREMENT Lines</a>"

</ul>

<h4>
  <a name="939262"> </a>E.3.11	 ls_use_featset
</h4>

<dl>  <dl>
     <dt> <a name="939263"> </a><CODE>int ls_use_featset = 0; </CODE>
    <dl>
       <dt> <a name="939264"> </a><CODE>/* Use the FEATURESET line from the license file */</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="939266"> </a>To require the FEATURESET line in the license file, set ls_use_featset to a non-zero value. FEATURESET is not recommended.
</p>


<h5>
  <a name="939267"> </a>See Also
</h5>

<ul>
  <li><a name="939271"> </a><a href="allApp.htm#939781">Section E.4.2, "FEATURESET Line</a>"

</ul>

<h4>
  <a name="941109"> </a>E.3.12	 ls_user_crypt
</h4>

<dl>  <dl>
     <dt> <a name="941110"> </a><CODE>(char *) (*ls_user_crypt)() = 0;</CODE>
  </dl>
</dl>
<p>
  <a name="941111"> </a>To use your own authentication routine, initialize ls_user_crypt with a pointer to your routine, and make sure an object file with this routine is linked with your vendor daemon. This must be the same as LM_A_USER_CRYPT.
</p>


<h5>
  <a name="941113"> </a>See Also
</h5>

<ul>
  <li><a name="941117"> </a><a href="all.htm#881393">Section 3.9, "lc_cryptstr()</a>"

  <li><a name="941121"> </a><a href="allApp.htm#887225">Section E.2.12, "LM_A_USER_CRYPT</a>"

</ul>

<h3>
  <a name="939199"> </a>E.4	 Rarely Used License File Features
</h3>


<h4>
  <a name="939727"> </a>E.4.1	 License Key Length and Start Date
</h4>


<p>
  <a name="939728"> </a>This section applies only to licenses generated with license keys rather than signatures (SIGN= fields).
</p>


<p>
  <a name="939846"> </a>The license key is the set of hex digits which appear on every FEATURE/INCREMENT/UPGRADE/PACKAGE line and authenticates the text, making the line secure.
</p>


<p>
  <a name="939729"> </a>For example:
</p>

<dl>  <dl>
     <dt> <a name="939730"> </a><CODE>FEATURE f2 demo 1.0 permanent uncounted <em>6E06CC47D2AB</em> HOSTID=1234</CODE>
     <dt> <a name="939731"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^^^^^^^^^^^^</CODE>
     <dt> <a name="939732"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;license key</CODE>
  </dl>
</dl>
<p>
  <a name="939734"> </a>Previous to v6, license keys were always 20 characters. The license key is now 12 characters instead of 20 by default, but 20-character keys can still be used. 20-character license keys are always accepted while shorter license keys can be disallowed, via one of:
</p>

<ul>
  <li><a name="939735"> </a><font  face="Arial" size="2">lc_set_attr(</font><code>job, LM_A_LKEY_LONG, (LM_A_VAL_TYPE)1</code><font  face="Arial" size="2">)</font>

  <li><a name="939736"> </a><font  face="Arial" size="2">lc_set_attr(</font><code>job, LM_A_BEHAVIOR_VER, (LM_A_VAL_TYPE) </code><code><em>behavior</em></code><font  face="Arial" size="2">)</font> where <code><em>behavior</em></code> is LM_BEHAVIOR_V5_1 or less

  <li><a name="939737"> </a>Setting <code>LM_VER_BEHAVIOR</code> in <code>machind/lm_code.h</code> to LM_BEHAVIOR_V5_1 or less.

</ul>

<p>
  <a name="939738"> </a>Shorter license keys are preferred where acceptable, since they're easier to type in, convert to much shorter decimal format keys, and provide sufficient security for most ISVs.
</p>


<p>
  <a name="939739"> </a>Shorter license keys impact licensing in two ways:
</p>

<ul>
  <li><a name="939740"> </a>Instead of a 64-bit security key on each feature line, there's a 48-bit security key. 

  <li><a name="939741"> </a>The 20-character license key included four characters for the license "start date." This is now optional, and is turned off by default in v6. 

</ul>

<p>
  <a name="939742"> </a>We believe that a start date has little practical application for most companies and was rarely used. However, those desiring a start date can now get one in two ways:
</p>

<ul>
  <li><a name="939743"> </a>There is now an optional "START=" attribute for FEATURE/INCREMENT/UPGRADE lines. This is the preferred method for a start date.

  <li><a name="939744"> </a>You can continue to use a start date in the license key. However, we have imposed the requirement that a start date in the license key <em>must</em> be accompanied by a 64-bit license key to remove any ambiguity about what the key contains.

</ul>

<h5>
  <a name="939746"> </a>Implementing Long License Keys and Start Dates
</h5>


<p>
  <a name="939839"> </a>Here's how to turn on long license keys and/or license key start dates in applications, license generators, and vendor daemons:
</p>

<ul>
  <li><a name="939747"> </a>In an application, set long license keys with:

<dl>    <dl>
       <dt> <a name="939749"> </a><CODE>lc_set_attr(job, LM_A_LKEY_LONG, (LM_A_VAL_TYPE) 1);</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="939750"> </a>and hidden start dates with:
    <dl>
       <dt> <a name="939751"> </a><CODE>lc_set_attr(job, LM_A_LKEY_START_DATE, (LM_A_VAL_TYPE) 1);</CODE>
    </dl>
  </dl>
  <li><a name="939752"> </a>For <code>lmcrypt</code> and <code>makekey</code>, modify the source in the <code>machind</code> directory.

  <li><a name="939753"> </a>For the vendor daemon (<code>lsvendor.c</code> in machind directory):

  <dl>
     <dt> <a name="939754"> </a><CODE>ls_a_lkey_long = 1;             /* long license keys */</CODE>
     <dt> <a name="939755"> </a><CODE>ls_a_lkey_start_date = 1;       /* hidden start dates */</CODE>
  </dl>
</ul>

<h5>
  <a name="939756"> </a>Compatibility Issues
</h5>

<ul>
  <li><a name="939757"> </a>V6 applications (even those accepting short license keys) will accept licenses with long license keys.

  <li><a name="939758"> </a>Pre-v6 applications will not accept licenses with short license keys.

  <li><a name="939759"> </a>License generators (<code>lmcrypt</code>, <code>makekey</code>) will issue long license keys when <code>verfmt</code> is set to a version less than 6.

  <li><a name="939760"> </a>LM_BEHAVIOR_V5_1 (or older) in <code>lm_code.h</code> will set license keys to be long and start dates in the license keys. However, this can be overridden in the code with <font  face="Arial" size="2">lc_set_attr(</font><code>job, LM_A_LKEY_LONG, (LM_A_VAL_TYPE)0</code><font  face="Arial" size="2">)</font> and <font  face="Arial" size="2">lc_set_attr(</font><code>job, LM_A_LKEY_START_DATE, (LM_A_VAL_TYPE)0</code><font  face="Arial" size="2">)</font>, which must be set in the application, license generator, and vendor daemon.

</ul>

<p>
  <a name="939761"> </a>Existing companies can successfully use short license keys (and may very well want to), but must obey the following rules:
</p>

<ul>
  <li><a name="939762"> </a>If a site wants to use older products, then you must use <code>-verfmt ...</code> to create a license with long keys. Both old and new products will accept these licenses.

  <li><a name="939766"> </a>If a site is completely converting to products using FLEX<em>lm</em> v6, licenses with short keys can be shipped.

  <li><a name="939767"> </a>New customers can receive licenses with short keys.

</ul>

<h4>
  <a name="939781"> </a>E.4.2	 FEATURESET Line
</h4>


<p>
  <a name="939782"> </a>The use of FEATURESET is discouraged. The FEATURESET line is required only if ls_use_featset is set in <code>lsvendor.c</code>. 
</p>

<dl>  <dl>
     <dt> <a name="939783"> </a><CODE>FEATURESET <code><em>vendor</em></code> <code><em>key</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="939784"> </a>where:
</p>


<p>
  <a name="939794"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="939787"> </a><code><em>vendor
<br></em></code></td>
    <td><a name="939789"> </a>Name of the vendor daemon used to 
<br>serve at least some feature(s) in the file.
<br></td>
  </tr>
  <tr>
    <td><a name="939791"> </a><code><em>key
<br></em></code></td>
    <td><a name="939793"> </a>License key for this FEATURESET line. 
<br>This license key encrypts the license 
<br>keys of all FEATURE lines that this 
<br>vendor daemon supports, so that no 
<br>FEATURE lines can be removed or 
<br>added to this license file.
<br></td>
  </tr>
</table>




<p>
  <a name="939795"> </a>
</p>


<p>
  <a name="939796"> </a>The FEATURESET line allows the vendor to bind together the entire list of FEATURE lines supported by one vendor daemon. If a FEATURESET line is used, then <em>all</em> the FEATURE lines must be present <em>in the same order</em> in the customer's license file. This is used, for example, to insure that a customer uses a complete update as supplied, without adding old FEATURE lines from the vendor.
</p>


<h5>
  <a name="939797"> </a>See Also
</h5>

<ul>
  <li><a name="939801"> </a><a href="allApp.htm#939262">Section E.3.11, "ls_use_featset</a>"

  <li><a name="939805"> </a><a href="all.htm#912128">Chapter&nbsp;5, "The License File</a>"

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="921207"> </a>Appendix F  <br>Migrating to the Counterfeit Resistant Option
</h2>
<hr>


<p>
  <a name="912650"> </a>This information in this appendix is for companies who have already shipped products with pre-v7.2 versions of FLEX<em>lm</em>. If you are new to FLEX<em>lm</em>, you can skip this information. This appendix describes the changes in FLEX<em>lm</em> v7.2 from FLEX<em>lm</em> v7.0 and recommends migration paths for implementing these changes.
</p>


<p>
  <a name="912664"> </a>FLEX<em>lm</em> v7.2 contains a separately priced option called the Counterfeit Resistant Option (CRO), which can be used to reduce the possibility of counterfeit licenses. Counterfeiting is the most serious threat to FLEX<em>lm</em> security, and CRO utilizes industry-standard cryptography recommended by the US government for its own secrets to reduce the possibility of counterfeiting. CRO utilizes Certicom's public-key system based upon elliptical curve cryptography (ECC), which is considered secure, fast, and efficient (see http://www.certicom.com). 
</p>


<p>
  <a name="913382"> </a>CRO is enabled (but not turned on) by default in the evaluation SDK. If you purchase FLEX<em>lm</em> with the CRO option, it is enabled by the separate CRO keys you receive from GLOBEtrotter. If you attempt to use CRO without these special CRO keys, you will receive a compile-time error. 
</p>


<h3>
  <a name="912699"> </a>F.1	 v7.2 Upgrade Overview
</h3>


<p>
  <a name="914936"> </a>When you upgrade to FLEX<em>lm</em> v7.2, you will have to decide whether or not to purchase and implement CRO.
</p>


<h4>
  <a name="912703"> </a>F.1.1	 If You Do Not Want CRO
</h4>


<p>
  <a name="912706"> </a>If you're upgrading to v7.2, and do not want CRO, in <code>machind/lm_code.h</code>, just set <code>LM_STRENGTH</code> to LM_STRENGTH_LICENSE_KEY. This is the only change you need make. This setting maintains the use of the FLEX<em>lm</em> license key and does not use the new SIGN= attribute.
</p>


<h4>
  <a name="912711"> </a>F.1.2	 Migrating to v7.2 with CRO
</h4>


<p>
  <a name="912714"> </a>The recommended implementation of CRO uses public-key encryption technology and utilizes the new SIGN= attribute in addition to the license key on each FEATURE line in the license file, a v7.2 CRO vendor daemon, and a v7.2 CRO application. Planning your strategy for deploying applications with CRO can minimize the cost of supporting your customers during the migration. ISVs who have already shipped FLEX<em>lm</em>-based products and who want to implement CRO must make the following decisions, both involving trade-offs:
</p>

<ol type="1">
  <li><a name="912723"> </a>How strong to make the CRO security?
  <dl>
     <dt> <a name="912724"> </a>The trade-off is security vs. the length of the new SIGN= attribute, which can be 58-120 characters long.
  </dl>
  <li><a name="912727"> </a>When to enable CRO in a release of an application?
  <dl>
     <dt> <a name="912728"> </a>The trade-off is license security vs. end user and software vendor convenience.
  </dl>
</ol>

<h3>
  <a name="912847"> </a>F.2	 How To Migrate To CRO
</h3>


<p>
  <a name="912850"> </a>First you have to make the two decisions:
</p>

<ul>
  <li><a name="915312"> </a>What length SIGN= attribute

  <li><a name="915316"> </a>When to enable CRO in your application

</ul>

<h4>
  <a name="912852"> </a>F.2.1	 Choosing SIGN= Attribute Length
</h4>


<p>
  <a name="914314"> </a>This decision determines what strength of protection you want against counterfeiting. Here are samples of FEATURE lines with each length:
</p>


<p>
  <a name="914318"> </a>LM_STRENGTH_113BIT (58 chars):
</p>

<dl>  <dl>
     <dt> <a name="914320"> </a><CODE>FEATURE f1 xyzd 1.0 permanent  uncounted 1234567890AB \</CODE>
     <dt> <a name="914321"> </a><CODE>HOSTID=ABCDEF1234 SIGN="1234 5678 90AB CDEF 1234 5678 \</CODE>
     <dt> <a name="947692"> </a><CODE>90AB CDEF 1234 5678 90AB CDEF" </CODE>
  </dl>
</dl>
<p>
  <a name="914324"> </a>LM_STRENGTH_163BIT (84 chars):
</p>

<dl>  <dl>
     <dt> <a name="914326"> </a><CODE>FEATURE f1 xyzd 1.0 permanent  uncounted 1234567890AB \</CODE>
     <dt> <a name="914327"> </a><CODE>HOSTID=ABCDEF1234 SIGN="1234 5678 90AB CDEF 1234 5678 \</CODE>
     <dt> <a name="947701"> </a><CODE>90AB CDEF 1234 5678 90AB CDEF 1234 5678 90AB CDEF 1234 \</CODE>
     <dt> <a name="947704"> </a><CODE>5678 90AB CDEF 1234" </CODE>
  </dl>
</dl>
<p>
  <a name="914331"> </a>LM_STRENGTH_239BIT (120 chars):
</p>

<dl>  <dl>
     <dt> <a name="914333"> </a><CODE>FEATURE f1 xyzd 1.0 permanent  uncounted 1234567890AB \</CODE>
     <dt> <a name="914334"> </a><CODE>HOSTID=ABCDEF1234 SIGN="1234 5678 90AB CDEF 1234 5678 \</CODE>
     <dt> <a name="947713"> </a><CODE>90AB CDEF 1234 5678 90AB CDEF 1234 5678 90AB CDEF 1234 \</CODE>
     <dt> <a name="947716"> </a><CODE>5678 90AB CDEF 1234 5678 90AB CDEF 1234 5678 90AB CDEF 1234 5678" </CODE>
  </dl>
</dl>
<p>
  <a name="915342"> </a>Once you've decided on a length, edit <code>machind/lm_code.h</code> to set <code>LM_STRENGTH</code> to the proper value, make sure that you've added <code>CRO_KEY</code>s and four <code>ENCRYPTION_SEED</code>s (32-bit numbers that you make up), then build the FLEX<em>lm</em> SDK using <code>make</code> (UNIX) or <code>nmake</code> (Windows). 
</p>


<h4>
  <a name="912853"> </a>F.2.2	 Disabling/Enabling CRO in Your Application
</h4>


<p>
  <a name="912898"> </a>Support problems occur with CRO-enabled applications where the client: 
</p>

<ul>
  <li><a name="914403"> </a>Does not yet have a SIGN= license

  <li><a name="914414"> </a>Is not using a v7.2 CRO vendor daemon

</ul>

<p>
  <a name="912902"> </a>These problems can be delayed or sometimes avoided completely by delaying enabling CRO in applications. Delaying also delays protection, so if your company requires the highest security available immediately, then do not delay enabling CRO. 
</p>


<p>
  <a name="912907"> </a>If you purchase CRO, the default behavior is that CRO is enabled in your application. 
</p>


<p>
  <a name="912909"> </a>To disable CRO in a particular application:
</p>

<ul>
  <li><a name="912911"> </a>Simple/Trivial API

  <dl>
     <dt> <a name="912913"> </a>OR (|) LM_USE_LICENSE_KEY into the policy, for example:
    <dl>
       <dt> <a name="912915"> </a><CODE>CHECKOUT(LM_RESTRICTIVE|LM_USE_LICENSE_KEY,...)</CODE>
    </dl>
  </dl>
  <li><a name="912917"> </a>FLEXible API

  <dl>
     <dt> <a name="947738"> </a>Call:
     <dt> <a name="947739"> </a><code>lc_set_attr(</code><code><em>job</em></code><code>, LM_A_KEY_LEVEL, (LM_A_VAL_TYPE)0)</code>
  </dl>
</ul>

<p>
  <a name="947740"> </a>When you are ready to enable CRO in your application, remove these policy modifiers or attributes.
</p>


<p>
  <a name="915384"> </a>Here are some guidelines for delaying CRO in applications:
</p>

<ul>
  <li><a name="912924"> </a>All applications which ship for the first time after v7.2 should have CRO enabled from the start. This gives the maximum protection immediately and no migration problems due to CRO should occur, because the product is new.

  <li><a name="912929"> </a>As noted above, make sure you ship immediately a v7.2 CRO vendor daemon and licenses that contain both the SIGN= and license key fields. That way, when you do enable CRO in a particular application, your customers are less likely to encounter a problem.

  <li><a name="912934"> </a>If licenses for a particular application all expire over the next year, then you can safely turn on CRO after a year, because users will require new licenses to run anyway.

  <li><a name="912938"> </a>If the version in the checkout call will change, then it's safe to enable CRO, because the users will require new licenses with the new version in order to run anyway.

  <li><a name="912942"> </a>If licenses don't expire, and versions don't change, then the longer you delay, the smoother the transition will tend to go, because more customers over time will have the requisite SIGN= licenses and v7.2 CRO vendor daemons. Of course, the longer you delay, the longer your applications to subject to possible counterfeit licenses.

</ul>

<p>
  <a name="912949"> </a><strong>Remember:</strong>
</p>

<ul>
  <li><a name="912952"> </a>Make sure all licenses ship with both license keys and SIGN= attributes.

  <li><a name="912955"> </a>Ship v7.2 CRO-enabled vendor daemon and v7.2 <code>lmgrd</code> immediately and make them easily available to all your customers.

  <li><a name="912958"> </a>Delaying CRO in applications will ease transition, but offers reduced security during this transition period.

</ul>

<h3>
  <a name="947547"> </a>F.3	 CRO Questions and Answers
</h3>


<h5>
  <a name="947548"> </a>What Exactly is CRO?
</h5>


<p>
  <a name="947549"> </a>CRO utilizes industry recognized public-key encryption. There are three different signature lengths offered. The longer the signature, the higher degree of security. The lengths of the SIGN= attribute in the license are:
</p>

<ul>
  <li><a name="947550"> </a>58 chars (113 bits ECC)

  <li><a name="947551"> </a>84 chars (163 bits ECC)

  <li><a name="947552"> </a>120 chars (239 bits ECC)

</ul>

<h5>
  <a name="947553"> </a>How Secure Is CRO?
</h5>


<p>
  <a name="947554"> </a>To put this in perspective, the supplier of the elliptical curve cryptography employed by the Counterfeit Resistant Option has an ongoing challenge with a maximum $100,000 reward to crack their cryptography. In 1999, a researcher required 195 volunteers, 40 days of calculation, 16000 MIPS years of computation, and 740 computers located in 22 countries to solve a 97-bit key, which is weaker than any of the CRO options. 
</p>


<h5>
  <a name="947555"> </a>Why Wouldn't I Want CRO?
</h5>


<p>
  <a name="947556"> </a>There may be those who feel no need to upgrade their security and see the length of the SIGN= attribute as inconvenient. 
</p>


<h5>
  <a name="947560"> </a>Can I Get the New FLEX<em>lm</em> v7.2 without CRO?
</h5>


<p>
  <a name="947561"> </a>Yes, CRO is an optional addition to the FLEXlm product.
</p>


<h5>
  <a name="947562"> </a>What Do I Have to Do to Take Advantage of CRO?
</h5>


<p>
  <a name="947563"> </a>There are three components that compose CRO:
</p>

<ul>
  <li><a name="947564"> </a>v7.2 license file with the additional field: 

<dl>    <dl>
       <dt> <a name="947565"> </a><CODE>SIGN="1234 5678 90AB CDEF 1234 5678 90AB CDEF 1234 5678 90AB CDEF"</CODE>
    </dl>
</dl>  <li><a name="947566"> </a>v7.2 CRO-enabled vendor daemon 

  <li><a name="947567"> </a>v7.2 CRO-enabled application 

</ul>
<h5>
  <a name="947568"> </a>What Problems am I Likely to Encounter During Migration?
</h5>


<p>
  <a name="947569"> </a>If a v7.2 CRO-enabled application attempts authentication from a pre-v7.2 vendor daemon and/or license file, an error message will be displayed and the application will not run. The error message will inform you that either license file and/or vendor daemon is not v7.2 CRO compliant.
</p>


<p>
  <a name="947570"> </a>It's important to remember that the v7.2 CRO application itself is the "trigger" that requires both a v7.2 license file and vendor daemon in order to run.
</p>


<h5>
  <a name="947571"> </a>What Happens if a v7.2 Vendor Daemon Encounters a Pre-v7.2 License (without "SIGN=")?
</h5>


<p>
  <a name="947572"> </a>The v7.2 license server will support pre-v7.2 applications, but will fail if CRO applications attempt to use it. 
</p>


<h5>
  <a name="947573"> </a>What Happens if a Pre-v7.2 Application Encounters a License File with SIGN= and a v7.2 Vendor Daemon?
</h5>


<p>
  <a name="947574"> </a>The system will perform exactly the way it does now--checkouts will succeed.
</p>


<p>
  <a name="947575"> </a>
</p>


<p>
  <a name="947577"> </a>The following chart applies to applications implementing CRO:
</p>


<p>
  <a name="947643"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <th><a name="947580"> </a><strong>Application
</strong></th>
    <th><a name="947582"> </a><strong>Vendor Daemon
</strong></th>
    <th><a name="947584"> </a><strong>License File
</strong></th>
    <th><a name="947586"> </a><strong>Result
</strong></th>
  </tr>
  <tr>
    <td><a name="947588"> </a>Pre-v7.2
<br></td>
    <td><a name="947590"> </a>Pre-v7.2
<br></td>
    <td><a name="947592"> </a>Pre-v7.2
<br></td>
    <td><a name="947594"> </a>No change
<br></td>
  </tr>
  <tr>
    <td><a name="947596"> </a>Pre-v7.2
<br></td>
    <td><a name="947598"> </a>Pre-v7.2
<br></td>
    <td><a name="947600"> </a>SIGN= 
<br></td>
    <td><a name="947602"> </a>No change
<br></td>
  </tr>
  <tr>
    <td><a name="947604"> </a>Pre-v7.2
<br></td>
    <td><a name="947606"> </a>CRO 
<br></td>
    <td><a name="947608"> </a>Pre-v7.2
<br></td>
    <td><a name="947610"> </a>No change
<br></td>
  </tr>
  <tr>
    <td><a name="947612"> </a>Pre-v7.2
<br></td>
    <td><a name="947614"> </a>CRO
<br></td>
    <td><a name="947616"> </a>SIGN=
<br></td>
    <td><a name="947618"> </a>No change
<br></td>
  </tr>
  <tr>
    <td><a name="947620"> </a>CRO
<br></td>
    <td><a name="947622"> </a>Pre-v7.2
<br></td>
    <td><a name="947624"> </a>SIGN=
<br></td>
    <td><a name="947626"> </a><em>FAIL
<br></em></td>
  </tr>
  <tr>
    <td><a name="947628"> </a>CRO
<br></td>
    <td><a name="947630"> </a>CRO
<br></td>
    <td><a name="947632"> </a>Pre-v7.2
<br></td>
    <td><a name="947634"> </a><em>FAIL
<br></em></td>
  </tr>
  <tr>
    <td><a name="947636"> </a>CRO
<br></td>
    <td><a name="947638"> </a>CRO
<br></td>
    <td><a name="947640"> </a>SIGN=
<br></td>
    <td><a name="947642"> </a>CRO
<br></td>
  </tr>
</table>




<p>
  <a name="947644"> </a>The goal is to avoid the two <strong><em>FAIL</em></strong> possibilities (shown in the chart above) by having v7.2 license files with SIGN= attributes and v7.2 vendor daemons in place BEFORE distribution of CRO applications. For many companies, it will be advantageous to delay enabling CRO in applications, to reduce support calls and customer inconvenience, with the cost of a delay in the actual implementation of the extra security provided by CRO. The most effective method of accomplishing this may depend on how your company typically updates it's customer licenses.
</p>


<h5>
  <a name="947646"> </a>What is Public-Key Technology?
</h5>


<p>
  <a name="947647"> </a>Public-key is based on mathematics, not "hiding" (obfuscation), which is what is used without CRO. 
</p>


<p>
  <a name="947651"> </a>There are two tasks to be accomplished for the SIGN= attribute:
</p>

<ul>
  <li><a name="947652"> </a>Generate digital signature (license key)--<code>lmcrypt</code>

  <li><a name="947653"> </a>Authenticate digital signature--application and vendor daemon

</ul>

<p>
  <a name="947654"> </a>Without public-key, there's one "key," which is the same key in <code>lmcrypt</code> that is hidden in the applications and vendor daemon.
</p>


<p>
  <a name="947655"> </a>With public-key, there are two different keys: private and public. The private key, used only in the license generators (<code>lmcrypt</code>), generates the SIGN= attribute. The public key, used by applications and vendor daemon authenticates the SIGN= attribute. It is difficult (but theoretically not impossible) to derive private from the public key; the longer the signature the harder it is to derive. In practice, the signatures used by FLEX<em>lm</em> would require large (sometimes, impossibly large) resources, considerable mathematical skill, and time.
</p>


<p>
  <a name="913041"> </a>
</p>
</blockquote>

<hr>

<table width="280" align="right" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td align=left><em>FLEXlm Reference Manual</em>
  </tr>
    <td align=left><em>December 2000</em></td>
</table>

<table border="0" align="left" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
</body>
</html>
