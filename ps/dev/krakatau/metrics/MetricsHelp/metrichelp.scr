-- MetricHelp Data (c) 2001 Power Software

use help ;

insert into metrichelp values (10101,'LOC','Lines of code','Number of Lines in the project, including source, whitespace and comments.<br><br>Effectively, a count of the number of newlines in the project.') ; 
insert into metrichelp values (10102,'SLOC','Source lines of code','Number of Source lines in the project, excluding whitespace and comments.<br><br>This is not a count of semicolons or distinct statements, but a count of <br>physical lines that contain source code.<br><br>If you are interested in \"logical\" lines, see NSC.<br><br><font face=\"Courier New\">int i=0; float j=0; // This is 1 SLOC<br><br>cout &lt;&lt; \"Testing\"<br>  &lt;&lt; \" Hello\"<br>  &lt;&lt; \" there.\" ;  // This is 3 SLOCs</font>') ; 
insert into metrichelp values (10103,'NION','Number of I/O nodes','') ; 
insert into metrichelp values (10104,'ANION','Adjusted number of I/O nodes','') ; 
insert into metrichelp values (10105,'N1','Halstead total number of operators','The total number of operators in the project.<br><br>N1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (10106,'N2','Halstead total number of operands','The total number of operands in the project.<br><br>N2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (10107,'n1','Halstead number of unique operators','The number of unique or distinct operators in the project.<br><br>n1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (10108,'n2','Halstead number of unique operands','The number of unique or distinct operands in the project.<br><br>n2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (10109,'NSC','Number of Semicolons','A count of the total number of semicolons in the project excluding those within comments <br>and string literals.  This is useful for approximating \"logical lines of code\".  E.g.:<br><br><font face=\"Courier New\">cout &lt;&lt; \"Hello\" &lt;&lt; endl <font color=\"FF1111\">;</font> /* output ; return */<br>cout &lt;&lt; \"Hello ; World\" &lt;&lt; endl <font color=\"FF1111\">;</font></font><br><br>NSC = 2.') ; 
insert into metrichelp values (10110,'CONTROL','Number of control statements','A count of the number of control statements in the project.  <br><br>Every occurance of a control keyword (such as <font face=\"Courier New\">if</font>, <font face=\"Courier New\">else</font>, <font face=\"Courier New\">while</font>, <br><font face=\"Courier New\">switch</font>, <font face=\"Courier New\">case</font>, etc.) causes this count to be incremented by 1.') ; 
insert into metrichelp values (10111,'EXEC','Number of executable statements','A count of the number of executable statements in the project.  <br><br>Every statement that is not a control statement (see <b>CONTROL</b>) causes <br>this count to be incremented by 1.') ; 
insert into metrichelp values (10112,'COM_LOC','Comment lines of code','The total number of comment lines in the project, i.e. <b>C_COM</b> + <b>CPP_COM</b>.') ; 
insert into metrichelp values (10113,'C_COM','C style comments','The number of C style comments in the project.<br><br>A C style comment begins <font face=\"Courier New\" color=\"FF1111\">/*</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>.  E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">/* This is a useful<br>variable here for<br>many purposes */</font></font><br><br>C_COM = 1.') ; 
insert into metrichelp values (10114,'CPP_COM','C++ sytle comments','The number of C++ style comment lines in the project.<br><br>A C++ style comment begins <font face=\"Courier New\" color=\"FF1111\">//</font> until the end of the line. E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">// Index variable</font><br>float pi = 3.14 ; <font color=\"FF1111\">// Handy pi variable</font><br>char star = \'*\' ;</font><br><br>CPP_COM = 2.') ; 
insert into metrichelp values (10115,'J_COM','Java Style comments','The number of Java style comments  in the project.<br><br>A Java style comment begins <font face=\"Courier New\" color=\"FF1111\">/**</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>. E.g.:<br><br><font face=\"Courier New\"><font color=\"FF1111\">&nbsp;/**<br>&nbsp;&nbsp;* An interface for handling Application level operations.<br>&nbsp;&nbsp;*<br>&nbsp;&nbsp;*/</font><br>&nbsp;public interface ApplicationHandler {</font><br><br>J_COM = 1.') ; 
insert into metrichelp values (10116,'OC','Operational Complexity','Not calculated at present.') ; 
insert into metrichelp values (10117,'V(G)','Cyclomatic Complexity','Cyclomatic Complexity (v(G)) is a measure of the complexity of the project\'s decision<br>structure. It is the number of linearly independent paths and therefore, the minimum <br>number of paths that should be tested.<br><br>A v(G) value greater than 7 may indicate an overly complex method.') ; 
insert into metrichelp values (10118,'eV(G)','Essential Complexity','Essential Complexity (ev(G)) is a measure of the degree to which this<br>project contains unstructured constructs. This metric measures the <br>degree of structuredness and the quality of the code. It is used to <br>predict the maintenance effort and to help in the modularization process.') ; 
insert into metrichelp values (10119,'BRANCH','Number of branching nodes','BRANCH calculates the number of abnormal exits within a project.  <br>Specifically, a count of the number of <font face=\"Courier New\">break</font>, <font face=\"Courier New\">continue</font> and <font face=\"Courier New\">goto</font> calls.') ; 
insert into metrichelp values (10120,'NEST','Maximum number of levels','NEST indicates the maxium number of nests of like constructs with the project.<br><br><font face=\"Courier New\">for (int i=0; i<5; i++)<br>&nbsp;if(i<2)<br>&nbsp;&nbsp;if(i>0)<br>&nbsp;&nbsp;&nbsp;j=3 ;<br>&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;j=4 ;<br>&nbsp;else<br>&nbsp;&nbsp;j++ ;</font><br><br>NEST = 2 because there is an <b>if</b> within an <b>if</b>.') ; 
insert into metrichelp values (10121,'N','Halstead program Length','Halstead program Length (N) for this project is calculated as N1 + N2.<br><br>N1 = Total number of Operators<br>N2 = Total number of Operands') ; 
insert into metrichelp values (10122,'n','Halstead program Vocabulary','Halstead program Vocabulary (n) for this project is calculated as n1 + n2.<br><br>n1 = Number unique or distinct Operators<br>n2 = Number unique or distinct Operands') ; 
insert into metrichelp values (10123,'V','Halstead program Volume','Halstead Volume for the project.  Calculated as:<br><br>V = Nlog<SUB>2</SUB>n') ; 
insert into metrichelp values (10124,'D','Halstead program Difficulty','A measure of how difficult this project\'s code is to understand.') ; 
insert into metrichelp values (10125,'E','Halstead program Effort','Effort = Difficulty * Volume for this project.') ; 
insert into metrichelp values (10501,'MHF','Method Hiding Factor','MHF = MethodsVisibile / TotalMethods<br> <br>MethodsVisible is calculated by summing the visibility (i.e. private=1, public=0, protected=InheritenceTreeSize/NumClasses) of each method in respect to the other classes in the project.') ; 
insert into metrichelp values (10502,'AHF','Attribute Hiding Factor','AHF = AttributesVisibile / TotalAttributes<br> <br>AttributesVisibile is calculated by summing the visibility (i.e. private=1, public=0, protected=InheritenceTreeSize/NumClasses) of each attribute in respect to the other classes in the project.') ; 
insert into metrichelp values (10503,'MIF','Method Inheritence Factor','MIF = InheritedMethods / TotalMethods<br> <br>Inherited Methods is a sum of NOIC (No. of Operations Inherited) for each class.') ; 
insert into metrichelp values (10504,'AIF','Attribute Inheritence Factor','Inherited Attributes is a sum of NAIC (No. of Attribute Inherited) for each class.') ; 
insert into metrichelp values (10505,'POF','Polymorphism Factor','POF is calculated by summing the following for each class:<br><br>TotalOperationsOverriden: NOOC <br>AddedAttribAndSubclasses: NOAC * NOCC<br><br>Finally, the following formula is used:<br><br>POF = TotalOperationsOverridden / NoOfAddedSubclasses<br><br>Polymorphism Factor can be used to measure the extent to which classes within the project are polymorphic.') ; 
insert into metrichelp values (10506,'COF','Coupling Factor','') ; 
insert into metrichelp values (10507,'HIER','Hierarchical Depth','') ; 
insert into metrichelp values (10508,'AVPATHS','Average Depth of Paths','AVPATHS is calculated by counting the number and size of all paths from all methods, and then diving that number by the number of methods which had other method calls.  In other words, the average depth of paths from methods that have path at all.') ; 
insert into metrichelp values (10509,'DEPTH','Total Maximum Method Depths (Project)','Not currently calculated.') ; 
insert into metrichelp values (10510,'COM_RAT','Comments Ratio (Project)','The ratio, at project level, of comment lines to lines of code.<br><br><b>COM_LOC</b> / <b>LOC</b>.') ; 
insert into metrichelp values (10511,'TCOM_RAT','True Comments Ratio (Project)','The ratio, at project level, of comment lines to <b>source</b> lines of code.<br><br><b>COM_LOC</b> / <b>SLOC</b>.') ; 
insert into metrichelp values (10512,'SEIMI','SEI Maintainability Index','The SEI MI is a measure of the maintainability of the project, as described by the Software Engineering Institute: <a href=\"http://www.sei.cmu.edu/activities/str/descriptions/mitmpm.html\">http://www.sei.cmu.edu/activities/str/descriptions/mitmpm.html</a>.') ; 
insert into metrichelp values (10513,'NCLASS','Number of Classes','The total number of classes in the project.') ; 
insert into metrichelp values (10514,'NFILE','Number of Files','The total number of files in the project.') ; 
insert into metrichelp values (10515,'NMETH','Number of Methods','The total number of methods in the project.<br><br>This count includes class methods and C functions.') ; 
insert into metrichelp values (10516,'NORC','Number of Root Classes','NORC is a count of the number root classes for a project.') ; 
insert into metrichelp values (10517,'ACLOC','Average Lines per Class','ACLOC = ProjectLOC / NumClasses.<br><br>This metric gauges the average Class size in terms of LOC.') ; 
insert into metrichelp values (10518,'AMLOC','Average Lines per Method','AMLOC = TotalMethodLOC / NumMethods.<br><br>TotalMethodLOC is calculated by summing lines of code for each method.  This metric shows the average size of method body within the project.  AMLOC should not be larger than 100 lines.') ; 
insert into metrichelp values (10519,'CHG_SLOC','Source Lines of Code (Changed)','The number of lines that have changed in this project compared to the old project.') ; 
insert into metrichelp values (10520,'DEL_SLOC','Source Lines of Code (Deleted)','The number of lines that have been deleted from this project compared to the old project.') ; 
insert into metrichelp values (10521,'ADD_SLOC','Source Lines of Code (Added)','The number of lines that have been added to this project compared to the old project.') ; 
insert into metrichelp values (20501,'NFILE','Number of Files in a Package','The total number of files in the package.') ; 
insert into metrichelp values (20502,'NTI','Number of Top-level Interfaces','A count of the number of Top-level Interfaces in the package.') ; 
insert into metrichelp values (20503,'NTC','Number of Top-level Classes','A count of the number of Top-level Classes in the package.') ; 
insert into metrichelp values (40101,'LOC','Lines of code','Number of Lines in this file, including source, whitespace and comments.<br><br>Effectively, a count of the number of newlines in the file.') ; 
insert into metrichelp values (40102,'SLOC','Source lines of code','Number of Source lines in this file, excluding whitespace and comments.<br><br>This is not a count of semicolons or distinct statements, but a count of <br>physical lines that contain source code.<br><br>If you are interested in \"logical\" lines, see NSC.<br><br><font face=\"Courier New\">int i=0; float j=0; // This is 1 SLOC<br><br>cout &lt;&lt; \"Testing\"<br>  &lt;&lt; \" Hello\"<br>  &lt;&lt; \" there.\" ;  // This is 3 SLOCs</font>') ; 
insert into metrichelp values (40103,'NION','Number of I/O nodes','') ; 
insert into metrichelp values (40104,'ANION','Adjusted number of I/O nodes','') ; 
insert into metrichelp values (40105,'N1','Halstead total number of operators','The total number of operators in the file.<br><br>N1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (40106,'N2','Halstead total number of operands','The total number of operands in the file.<br><br>N2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (40107,'n1','Halstead number of unique operators','The number of unique or distinct operators in the file.<br><br>n1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (40108,'n2','Halstead number of unique operands','The number of unique or distinct operands in the file.<br><br>n2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (40109,'NSC','Number of Semicolons','A count of the number of semicolons in this file excluding those within comments and <br>string literals.  This is useful for approximating \"logical lines of code\".  E.g.:<br><br><font face=\"Courier New\">cout &lt;&lt; \"Hello\" &lt;&lt; endl <font color=\"FF1111\">;</font> /* output ; return */<br>cout &lt;&lt; \"Hello ; World\" &lt;&lt; endl <font color=\"FF1111\">;</font></font><br><br>NSC = 2.') ; 
insert into metrichelp values (40110,'CONTROL','Number of control statements','A count of the number of control statements in the file.  <br><br>Every occurance of a control keyword (such as <font face=\"Courier New\">if</font>, <font face=\"Courier New\">else</font>, <font face=\"Courier New\">while</font>, <br><font face=\"Courier New\">switch</font>, <font face=\"Courier New\">case</font>, etc.) causes this count to be incremented by 1.') ; 
insert into metrichelp values (40111,'EXEC','Number of executable statements','A count of the number of executable statements in the file.  <br><br>Every statement that is not a control statement (see <b>CONTROL</b>) causes <br>this count to be incremented by 1.') ; 
insert into metrichelp values (40112,'COM_LOC','Comment lines of code','The total number of comment lines in the file, i.e. <b>C_COM</b> + <b>CPP_COM</b>.') ; 
insert into metrichelp values (40113,'C_COM','C style comments','The number of C style comments in the file.<br><br>A C style comment begins <font face=\"Courier New\" color=\"FF1111\">/*</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>.  E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">/* This is a useful<br>variable here for<br>many purposes */</font></font><br><br>C_COM = 1.') ; 
insert into metrichelp values (40114,'CPP_COM','C++ sytle comments','The number of C++ style comment lines in the file.<br><br>A C++ style comment begins <font face=\"Courier New\" color=\"FF1111\">//</font> until the end of the line. E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">// Index variable</font><br>float pi = 3.14 ; <font color=\"FF1111\">// Handy pi variable</font><br>char star = \'*\' ;</font><br><br>CPP_COM = 2.') ; 
insert into metrichelp values (40115,'J_COM','Java Style comments','The number of Java style comments in the file.<br><br>A Java style comment begins <font face=\"Courier New\" color=\"FF1111\">/**</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>. E.g.:<br><br><font face=\"Courier New\"><font color=\"FF1111\">&nbsp;/**<br>&nbsp;&nbsp;* An interface for handling Application level operations.<br>&nbsp;&nbsp;*<br>&nbsp;&nbsp;*/</font><br>&nbsp;public interface ApplicationHandler {</font><br><br>J_COM = 1.') ; 
insert into metrichelp values (40116,'OC','Operational Complexity','Not calculated at present.') ; 
insert into metrichelp values (40117,'V(G)','Cyclomatic Complexity','Cyclomatic Complexity (v(G)) is a measure of the complexity of the file\'s decision<br>structure. It is the number of linearly independent paths and therefore, the minimum <br>number of paths that should be tested.<br><br>A v(G) value greater than 7 may indicate an overly complex method.') ; 
insert into metrichelp values (40118,'eV(G)','Essential Complexity','Essential Complexity (ev(G)) is a measure of the degree to which this<br>file contains unstructured constructs. This metric measures the <br>degree of structuredness and the quality of the code. It is used to <br>predict the maintenance effort and to help in the modularization process.') ; 
insert into metrichelp values (40119,'BRANCH','Number of branching nodes','BRANCH calculates the number of abnormal exits within a file.  <br>Specifically, a count of the number of <font face=\"Courier New\">break</font>, <font face=\"Courier New\">continue</font> and <font face=\"Courier New\">goto</font> calls.') ; 
insert into metrichelp values (40120,'NEST','Maximum number of levels','NEST indicates the maxium number of nests of like constructs with the file.<br><br><font face=\"Courier New\">for (int i=0; i<5; i++)<br>&nbsp;if(i<2)<br>&nbsp;&nbsp;if(i>0)<br>&nbsp;&nbsp;&nbsp;j=3 ;<br>&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;j=4 ;<br>&nbsp;else<br>&nbsp;&nbsp;j++ ;</font><br><br>NEST = 2 because there is an <b>if</b> within an <b>if</b>.') ; 
insert into metrichelp values (40121,'N','Halstead program Length','Halstead program Length (N) for this file is calculated as N1 + N2.<br><br>N1 = Total number of Operators<br>N2 = Total number of Operands') ; 
insert into metrichelp values (40122,'n','Halstead program Vocabulary','Halstead program Vocabulary (n) for this file is calculated as n1 + n2.<br><br>n1 = Number unique or distinct Operators<br>n2 = Number unique or distinct Operands') ; 
insert into metrichelp values (40123,'V','Halstead program Volume','Halstead Volume for the file.  Calculated as:<br><br>V = Nlog<SUB>2</SUB>n') ; 
insert into metrichelp values (40124,'D','Halstead program Difficulty','A measure of how difficult this file\'s code is to understand.') ; 
insert into metrichelp values (40125,'E','Halstead program Effort','Effort = Difficulty * Volume for this file.') ; 
insert into metrichelp values (40501,'COM_RAT','Comments Ratio','The ratio, for this filel, of comment lines to lines of code, i.e. <b>COM_LOC</b> / <b>LOC</b>.') ; 
insert into metrichelp values (40502,'TCOM_RAT','True Comments Ratio','The ratio, for this filel, of comment lines to <b>source</b> lines of code, i.e. <b>COM_LOC</b> / <b>SLOC</b>.') ; 
insert into metrichelp values (40503,'NTC','Number of Top-level Classes','A count of the number of Top-level Classes in the file.') ; 
insert into metrichelp values (40504,'NTM','Number of Top-level Methods','A count of the number of Top-level Methods  (i.e. functions, or non-class methods) in the file.') ; 
insert into metrichelp values (40505,'NTI','Number of Top-level Interfaces','A count of the number of Top-level Interfaces in the file.') ; 
insert into metrichelp values (40506,'CHG_SLOC','Source Lines of Code (Changed)','The number of lines that have changed in this file compared to the file in the old project.') ; 
insert into metrichelp values (40507,'DEL_SLOC','Source Lines of Code (Deleted)','The number of lines that have been deleted from this file compared to the file in the old project.') ; 
insert into metrichelp values (40508,'ADD_SLOC','Source Lines of Code (Added)','The number of lines that have been added to this file compared to the file in the old project.') ; 
insert into metrichelp values (50101,'LOC','Lines of code','Number of Lines in this class, including source, whitespace and comments.<br><br>Effectively, a count of the number of newlines in the class.') ; 
insert into metrichelp values (50102,'SLOC','Source lines of code','Number of Source lines in this class, excluding whitespace and comments.<br><br>This is not a count of semicolons or distinct statements, but a count of <br>physical lines that contain source code.<br><br><font face=\"Courier New\">int i=0; float j=0; // This is 1 SLOC<br><br>cout &lt;&lt; \"Testing\"<br>  &lt;&lt; \" Hello\"<br>  &lt;&lt; \" there.\" ;  // This is 3 SLOCs</font>') ; 
insert into metrichelp values (50103,'NION','Number of I/O nodes','') ; 
insert into metrichelp values (50104,'ANION','Adjusted number of I/O nodes','') ; 
insert into metrichelp values (50105,'N1','Halstead total number of operators','The total number of operators in the class.<br><br>N1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (50106,'N2','Halstead total number of operands','The total number of operands in the class.<br><br>N2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (50107,'n1','Halstead number of unique operators','The number of unique or distinct operators in the class.<br><br>n1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (50108,'n2','Halstead number of unique operands','The number of unique or distinct operands in the class.<br><br>n2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (50109,'NSC','Number of Semicolons','A count of the number of semicolons in this class excluding those within comments and <br>string literals.  This is useful for approximating \"logical lines of code\".  E.g.:<br><br><font face=\"Courier New\">cout &lt;&lt; \"Hello\" &lt;&lt; endl <font color=\"FF1111\">;</font> /* output ; return */<br>cout &lt;&lt; \"Hello ; World\" &lt;&lt; endl <font color=\"FF1111\">;</font></font><br><br>NSC = 2.') ; 
insert into metrichelp values (50110,'CONTROL','Number of control statements','A count of the number of control statements in the class.  <br><br>Every occurance of a control keyword (such as <font face=\"Courier New\">if</font>, <font face=\"Courier New\">else</font>, <font face=\"Courier New\">while</font>, <br><font face=\"Courier New\">switch</font>, <font face=\"Courier New\">case</font>, etc.) causes this count to be incremented by 1.') ; 
insert into metrichelp values (50111,'EXEC','Number of executable statements','A count of the number of executable statements in the class.  <br><br>Every statement that is not a control statement (see <b>CONTROL</b>) causes <br>this count to be incremented by 1.') ; 
insert into metrichelp values (50112,'COM_LOC','Comment lines of code','The total number of comment lines in the class, i.e. <b>C_COM</b> + <b>CPP_COM</b>.') ; 
insert into metrichelp values (50113,'C_COM','C style comments','The number of C style comments in the class.<br><br>A C style comment begins <font face=\"Courier New\" color=\"FF1111\">/*</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>.  E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">/* This is a useful<br>variable here for<br>many purposes */</font></font><br><br>C_COM = 1.') ; 
insert into metrichelp values (50114,'CPP_COM','C++ sytle comments','The number of C++ style comment lines in the class.<br><br>A C++ style comment begins <font face=\"Courier New\" color=\"FF1111\">//</font> until the end of the line. E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">// Index variable</font><br>float pi = 3.14 ; <font color=\"FF1111\">// Handy pi variable</font><br>char star = \'*\' ;</font><br><br>CPP_COM = 2.') ; 
insert into metrichelp values (50115,'J_COM','Java Style comments','The number of Java style comments in the class.<br><br>A Java style comment begins <font face=\"Courier New\" color=\"FF1111\">/**</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>. E.g.:<br><br><font face=\"Courier New\"><font color=\"FF1111\">&nbsp;/**<br>&nbsp;&nbsp;* An interface for handling Application level operations.<br>&nbsp;&nbsp;*<br>&nbsp;&nbsp;*/</font><br>&nbsp;public interface ApplicationHandler {</font><br><br>J_COM = 1.') ; 
insert into metrichelp values (50116,'OC','Operational Complexity','Not calculated at present.') ; 
insert into metrichelp values (50117,'V(G)','Cyclomatic Complexity','Cyclomatic Complexity (v(G)) is a measure of the complexity of the class\'s decision<br>structure. It is the number of linearly independent paths and therefore, the minimum <br>number of paths that should be tested.<br><br>A v(G) value greater than 7 may indicate an overly complex method.') ; 
insert into metrichelp values (50118,'eV(G)','Essential Complexity','Essential Complexity (ev(G)) is a measure of the degree to which this<br>class contains unstructured constructs. This metric measures the <br>degree of structuredness and the quality of the code. It is used to <br>predict the maintenance effort and to help in the modularization process.') ; 
insert into metrichelp values (50119,'BRANCH','Number of branching nodes','BRANCH calculates the number of abnormal exits within a class.  <br>Specifically, a count of the number of <font face=\"Courier New\">break</font>, <font face=\"Courier New\">continue</font> and <font face=\"Courier New\">goto</font> calls.') ; 
insert into metrichelp values (50120,'NEST','Maximum number of levels','NEST indicates the maxium number of nests of like constructs with the class.<br><br><font face=\"Courier New\">for (int i=0; i<5; i++)<br>&nbsp;if(i<2)<br>&nbsp;&nbsp;if(i>0)<br>&nbsp;&nbsp;&nbsp;j=3 ;<br>&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;j=4 ;<br>&nbsp;else<br>&nbsp;&nbsp;j++ ;</font><br><br>NEST = 2 because there is an <b>if</b> within an <b>if</b>.') ; 
insert into metrichelp values (50121,'N','Halstead program Length','Halstead program Length (N) for this class is calculated as N1 + N2.<br><br>N1 = Total number of Operators<br>N2 = Total number of Operands') ; 
insert into metrichelp values (50122,'n','Halstead program Vocabulary','Halstead program Vocabulary (n) for this class is calculated as n1 + n2.<br><br>n1 = Number unique or distinct Operators<br>n2 = Number unique or distinct Operands') ; 
insert into metrichelp values (50123,'V','Halstead program Volume','Halstead Volume for the class.  Calculated as:<br><br>V = Nlog<SUB>2</SUB>n') ; 
insert into metrichelp values (50124,'D','Halstead program Difficulty','A measure of how difficult this class\'s code is to understand.') ; 
insert into metrichelp values (50125,'E','Halstead program Effort','Effort = Difficulty * Volume for this class.') ; 
insert into metrichelp values (50501,'CSA','Class Size (Attributes)','The number of attributes of a class.') ; 
insert into metrichelp values (50502,'CSO','Class Size (Operations)','The number of operations for a class.') ; 
insert into metrichelp values (50503,'CSAO','Class Size (Attributes & Operations)','The total number of attributes and operations for a class.') ; 
insert into metrichelp values (50504,'PPPC','Percentage Public/Protected members','PPPC is simply the percentage of public and protected members of a class in respective to all members of the class.  I.e.:<br><br>PPPC = PublicProtectedMembers / CSAO.') ; 
insert into metrichelp values (50505,'NOCC','Number of Child Classes','NOCC is a count of the number of immediate sub-classes of a class.') ; 
insert into metrichelp values (50506,'DIT','Depth of Inheritence Tree','From the current class, traces up entire inheritence heirarchy counting which route is the longest.  The value for DIT is stored against the current class, so for the root class DIT=1, first-level subclasses DIT=2, and so on.') ; 
insert into metrichelp values (50507,'RFC','Response For Class','RFC is the number of methods in a class, plus the number of distinct methods called by those methods.') ; 
insert into metrichelp values (50508,'CBO','Coupling Between Object classes','Calculated by totalling the number of unique types of attribute within each class.  The count only includes user-defined object types.  The larger this number, the greater coupling between object classes.') ; 
insert into metrichelp values (50509,'LOCM','Lack Of Cohesion Methods','This metric quantifies how much intercourse the methods of a class <br>have with the member variables of that class.  <br><br>LOCM is calculated by building a list of member variables and a <br>count of the number of references to each variable (usage) in <br>all methods of this class.  <br><br>Then, a sum of the ratios of usage / TotalMethods is calculated.  <br><br>Finally, LOCM is returned as this SumOfRatios / TotalAttributes.') ; 
insert into metrichelp values (50510,'NOOC','Number of Operations Overridden','NOOC is a count of the number of Operations that a class has overridden.  For a root class, NOOC == CSO.') ; 
insert into metrichelp values (50511,'NAOC','Number of Operations Added','NAAC is a count of the number of new Operations that a class has in respect to its immediate super-class.  For a root class, NAOC == CSO.') ; 
insert into metrichelp values (50512,'NOAC','Number of Attributes Overridden','NOAC is a count of the number of Attributes that a class has overridden.  For a root class, NAIC == CSA.') ; 
insert into metrichelp values (50513,'NAAC','Number of Attributes Added','NAAC is a count of the number of new Attributes that a class has in respect to its immediate super-class.  For a root class, NAAC == CSA.') ; 
insert into metrichelp values (50514,'NOIC','Number of Operations Inherited','NOIC is a count of the number of Operations that a class has inherited from its super-classes.  For a root class, NOIC == 0.') ; 
insert into metrichelp values (50515,'NAIC','Number of Attributes Inherited','NAIC is a count of the number of Attributes that a class has inherited from its super-classes.  For a root class, NAIC == 0.') ; 
insert into metrichelp values (50516,'WMC','Weighted Methods in Class','WMC is the sum of the Cyclomatic complexity for all methods in the class.  This number reflects the complexity of the class, and will be affected not only by the V(g) of each method but also the number of methods.  <br><br>Classes with WMC larger than <b>100</b> should perhaps be redesigned.') ; 
insert into metrichelp values (50517,'CSI','Class Specialisation Index','(NOOC * DIT) / TotalMethods<br> <br>NOOC = No. of Operations overridden.<br>DIT = Depth of Inheritance Tree - From the current class, traces up entire inheritence heirarchy counting which route is the longest.') ; 
insert into metrichelp values (50518,'OSavg','Average Operation Size','For a class, Osavg = WMC / NumMethods<br><br>OSavg is a measure of the complexity of a class.  Classes with OSavg greater than 10 should perhaps be redesigned.') ; 
insert into metrichelp values (50519,'NPavgC','Average Number of Method Parameters','NPavgC = TotalNP / NumMethods.<br><br>The average number of parameters per method.  This metric, if over 10, would indicate that too much information is being passed into methods, and that more attributes should be added to the class.') ; 
insert into metrichelp values (50520,'PA','Private Attribute Usage','PA is the sum of all references to distinct private attributes within all methods of a class. <br><br>As a guideline, if this number is lower than NumMethods, perhaps parameters and local variables are being overused, and the class methods could be work more closely with the class attributes.') ; 
insert into metrichelp values (50521,'AC','Attribute Complexity','Not currently calculated.') ; 
insert into metrichelp values (50522,'TLOC','Total Lines of Code','TLOC is LOC for the class and the LOC for each method.') ; 
insert into metrichelp values (60101,'LOC','Lines of Code','Number of Lines in this interface, including source, whitespace and comments.<br><br>Effectively, a count of the number of newlines in the interface.') ; 
insert into metrichelp values (60501,'ISA','Interface Size (Attributes)','The number of attributes of an interface.') ; 
insert into metrichelp values (60502,'ISO','Interface Size (Operations)','The number of operations for an interface.') ; 
insert into metrichelp values (60503,'ISAO','Interface Size (Attributes & Operations)','The total number of attributes and operations for an interface.') ; 
insert into metrichelp values (60504,'PPPC','Percentage Public/Protected members','PPPC is simply the percentage of public and protected members of an interface in respective to all members of the interface.  I.e.:<br><br>PPPC = PublicProtectedMembers / CSAO.') ; 
insert into metrichelp values (60505,'NOCI','Number of Child Interfaces','NOCC is a count of the number of immediate sub-interfaces of an interface.') ; 
insert into metrichelp values (70101,'LOC','Lines of code','Number of Lines in this method, including source, whitespace and comments.<br><br>Effectively, a count of the number of newlines in the method.') ; 
insert into metrichelp values (70102,'SLOC','Source lines of code','Number of Source lines in this method, excluding whitespace and comments.<br><br>This is not a count of semicolons or distinct statements, but a count of <br>physical lines that contain source code.<br><br><font face=\"Courier New\">int i=0; float j=0; // This is 1 SLOC<br><br>cout &lt;&lt; \"Testing\"<br>  &lt;&lt; \" Hello\"<br>  &lt;&lt; \" there.\" ;  // This is 3 SLOCs</font>') ; 
insert into metrichelp values (70103,'NION','Number of I/O nodes','') ; 
insert into metrichelp values (70104,'ANION','Adjusted number of I/O nodes','') ; 
insert into metrichelp values (70105,'N1','Halstead total number of operators','The total number of operators in the method.<br><br>N1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (70106,'N2','Halstead total number of operands','The total number of operands in the method.<br><br>N2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (70107,'n1','Halstead number of unique operators','The number of unique or distinct operators in the method.<br><br>n1 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (70108,'n2','Halstead number of unique operands','The number of unique or distinct operands in the method.<br><br>n2 is part of the Halstead set, and of little interest on its own.  When combined with the other Halstead fundamental metrics, it can be used to determine Volume, Difficult, Effort and Cyclomatic complexity.') ; 
insert into metrichelp values (70109,'NSC','Number of Semicolons','A count of the number of semicolons in this method excluding those within comments and <br>string literals.  This is useful for approximating \"logical lines of code\".  E.g.:<br><br><font face=\"Courier New\">cout &lt;&lt; \"Hello\" &lt;&lt; endl <font color=\"FF1111\">;</font> /* output ; return */<br>cout &lt;&lt; \"Hello ; World\" &lt;&lt; endl <font color=\"FF1111\">;</font></font><br><br>NSC = 2.') ; 
insert into metrichelp values (70110,'CONTROL','Number of control statements','A count of the number of control statements in the method.  <br><br>Every occurance of a control keyword (such as <font face=\"Courier New\">if</font>, <font face=\"Courier New\">else</font>, <font face=\"Courier New\">while</font>, <br><font face=\"Courier New\">switch</font>, <font face=\"Courier New\">case</font>, etc.) causes this count to be incremented by 1.') ; 
insert into metrichelp values (70111,'EXEC','Number of executable statements','A count of the number of executable statements in the method.  <br><br>Every statement that is not a control statement (see <b>CONTROL</b>) causes <br>this count to be incremented by 1.') ; 
insert into metrichelp values (70112,'COM_LOC','Comment lines of code','The total number of comment lines in the method, i.e. <b>C_COM</b> + <b>CPP_COM</b>.') ; 
insert into metrichelp values (70113,'C_COM','C style comments','The number of C style comments in the method.<br><br>A C style comment begins <font face=\"Courier New\" color=\"FF1111\">/*</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>.  E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">/* This is a useful<br>variable here for<br>many purposes */</font></font><br><br>C_COM = 1.') ; 
insert into metrichelp values (70114,'CPP_COM','C++ sytle comments','The number of C++ style comment lines in the method.<br><br>A C++ style comment begins <font face=\"Courier New\" color=\"FF1111\">//</font> until the end of the line. E.g.:<br><br><font face=\"Courier New\">int i = 0 ; <font color=\"FF1111\">// Index variable</font><br>float pi = 3.14 ; <font color=\"FF1111\">// Handy pi variable</font><br>char star = \'*\' ;</font><br><br>CPP_COM = 2.') ; 
insert into metrichelp values (70115,'J_COM','Java Style comments','The number of Java style comments in the method.<br><br>A Java style comment begins <font face=\"Courier New\" color=\"FF1111\">/**</font> and ends <font face=\"Courier New\" color=\"FF1111\">*/</font>. E.g.:<br><br><font face=\"Courier New\"><font color=\"FF1111\">&nbsp;/**<br>&nbsp;&nbsp;* An interface for handling Application level operations.<br>&nbsp;&nbsp;*<br>&nbsp;&nbsp;*/</font><br>&nbsp;public interface ApplicationHandler {</font><br><br>J_COM = 1.') ; 
insert into metrichelp values (70116,'OC','Operational Complexity','Not calculated at present.') ; 
insert into metrichelp values (70117,'V(G)','Cyclomatic Complexity','Cyclomatic Complexity (v(G)) is a measure of the complexity of the method\'s decision<br>structure. It is the number of linearly independent paths and therefore, the minimum <br>number of paths that should be tested.<br><br>A v(G) value greater than 7 may indicate an overly complex method.') ; 
insert into metrichelp values (70118,'eV(G)','Essential Complexity','Essential Complexity (ev(G)) is a measure of the degree to which this<br>method contains unstructured constructs. This metric measures the <br>degree of structuredness and the quality of the code. It is used to <br>predict the maintenance effort and to help in the modularization process.') ; 
insert into metrichelp values (70119,'BRANCH','Number of branching nodes','BRANCH calculates the number of abnormal exits within a method.  <br>Specifically, a count of the number of <font face=\"Courier New\">break</font>, <font face=\"Courier New\">continue</font> and <font face=\"Courier New\">goto</font> calls.') ; 
insert into metrichelp values (70120,'NEST','Maximum number of levels','NEST indicates the maxium number of nests of like constructs with the method.<br><br><font face=\"Courier New\">for (int i=0; i<5; i++)<br>&nbsp;if(i<2)<br>&nbsp;&nbsp;if(i>0)<br>&nbsp;&nbsp;&nbsp;j=3 ;<br>&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;j=4 ;<br>&nbsp;else<br>&nbsp;&nbsp;j++ ;</font><br><br>NEST = 2 because there is an <b>if</b> within an <b>if</b>.') ; 
insert into metrichelp values (70121,'N','Halstead program Length','Halstead program Length (N) for this method is calculated as N1 + N2.<br><br>N1 = Total number of Operators<br>N2 = Total number of Operands') ; 
insert into metrichelp values (70122,'n','Halstead program Vocabulary','Halstead program Vocabulary (n) for this method is calculated as n1 + n2.<br><br>n1 = Number unique or distinct Operators<br>n2 = Number unique or distinct Operands') ; 
insert into metrichelp values (70123,'V','Halstead program Volume','Halstead Volume for the method.  Calculated as:<br><br>V = Nlog<SUB>2</SUB>n') ; 
insert into metrichelp values (70124,'D','Halstead program Difficulty','A measure of how difficult this method\'s code is to understand.') ; 
insert into metrichelp values (70125,'E','Halstead program Effort','Effort = Difficulty * Volume for this method.') ; 
insert into metrichelp values (70501,'V\'(G)','Extended Cyclomatic Complexity','V\'(G) = OC / V(G)<br><br>V\'(G) provides a complexity ratio, based the operational complexity and cyclomatic complexity of a method.') ; 
insert into metrichelp values (70502,'RLOC','Relative Lines of Code','RLOC = MethodLOC / ClassLOC<br><br>A measure of the size of this method, relative to the total class size.  A RLOC value greater than <b>0.6</b> may indicate bad design - that a method should be split into two or three methods.') ; 
insert into metrichelp values (70503,'CALLS','Number of external Calls','A count of the number of references to this member function <br>from any other functions within the project.') ; 
insert into metrichelp values (70504,'OAC','Operation Argument Complexity','') ; 
insert into metrichelp values (70505,'CDENS','Control Density','CDENS = CONTROL / NSTAT<br><br>Control Density represents the percentage of control statements in the code.') ; 
insert into metrichelp values (70506,'DEPTH','Greatest depth from this method','Not currently calculated.') ; 
insert into metrichelp values (70507,'QCP_MAINT','Quality Criteria Profile (Maintainability)','QCP_MAINT = (3*N) + executable + control + nest + (2*cyclomatic) + branch') ; 
insert into metrichelp values (70508,'QCP_CRCT','Quality Criteria Profile (Correctness)','QCP_CRCT = D + control + executable + (2*cyclomatic)') ; 
insert into metrichelp values (70509,'QCP_RLBTY','Quality Criteria Profile (Reliability)','QCP_RLBTY = N + (2*nest) + (3*cyclomatic) + branch + control + executable') ; 
insert into metrichelp values (70510,'NSTAT','Number of Statements','NSTAT = CONTROL + EXEC.') ; 
insert into metrichelp values (70511,'NP','Number of Parameters','A count of the number of Parameters a method takes.') ; 

