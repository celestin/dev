<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="TEMPLATEBASE" content="Users Guide Template">
<meta name="LASTUPDATED" content="12/22/00 13:44:02">
<title>FLEXlm Programmers Guide</title>
</head>

<body link="#0066CC" vlink="#800080" text="#000000" alink="#FF0000" bgcolor="#FFFFFF"
background="graphics/backgrnd.gif">

<blockquote>
<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="904412"> </a>Chapter 1 <br>Introduction
</h2>
<hr>


<h3>
  <a name="883921"> </a>1.1	 About This Manual
</h3>


<p>
  <a name="880454"> </a>This manual, the <em>FLEXlm Programmers Guide</em>, is an introduction to FLEX<em>lm</em><sup>&reg;</sup> and includes a complete description of the simplest Application Programming Interfaces (APIs) that can be used to incorporate license management into your application. This manual describes the license administration tools that are bundled with FLEX<em>lm</em> and provides guidelines for integration of FLEX<em>lm</em> into your application. With this manual, you should be able to have an example license-managed application up and running within a few hours.
</p>


<p>
  <a name="888329"> </a>The <em>FLEXlm Reference Manual</em> provides a comprehensive description of all other aspects of FLEX<em>lm</em> from the software developer's perspective, including a complete description of the FLEXible API, the most complete API available for license management. Companies upgrading from a version older than v7.2 should refer to the <em>FLEXlm Reference Manual</em>, Appendix F, "Migrating to the Counterfeit Resistant Option."
</p>


<p>
  <a name="880477"> </a>The <em>FLEXlm End Users Guide</em> contains information for products that utilize FLEX<em>lm</em> as their licensing system. It describes the setup and administration of a FLEX<em>lm</em> licensing system, including setting up an options file and using FLEX<em>lm</em> license administration tools.
</p>


<h3>
  <a name="880481"> </a>1.2	 How to Use This Manual
</h3>


<p>
  <a name="880485"> </a>If you are getting started with FLEX<em>lm</em> on UNIX, we suggest that you read Chapters 1, 2, 4, and 5 of this manual. If you are getting started with FLEX<em>lm</em> on Windows, we suggest that you read Chapters 1, 3, 4, and 6. After completing those chapters, you will have installed FLEX<em>lm</em>, run a sample application with license management in a number of different situations, and built a production FLEX<em>lm</em> SDK.
</p>


<p>
  <a name="880492"> </a>Once you are familiar with how FLEX<em>lm</em> operates, the remainder of this manual provides reference material for integrating FLEX<em>lm</em> into your application. It includes instruction in the use of the administration tools provided with FLEX<em>lm</em> and general guidelines on configuring your application and its licensing software.
</p>


<p>
  <a name="896931"> </a>All documentation is provided online in the <code>htmlman</code> directory and can be accessed through any HTML browser.
</p>


<h3>
  <a name="898429"> </a>1.3	 Typographic Conventions
</h3>


<p>
  <a name="898430"> </a>The following typographic conventions are used in this manual:
</p>

<ul>
  <li><a name="898431"> </a>The first time a new term is used it is presented in <em>italics</em>.

  <li><a name="898432"> </a>Commands and path, file, and environment variable names are presented in a <code>fixed_font</code>.

  <li><a name="898433"> </a>Other variable names are in an <code><em>italic_fixed_font</em></code>. 

  <li><a name="898434"> </a>API function calls are in a <font  face="Arial" size="2">sans-serif font</font>.

</ul>

<h3>
  <a name="880502"> </a>1.4	 Introduction to FLEX<em>lm</em>
</h3>


<p>
  <a name="880506"> </a>FLEX<em>lm</em> is a software licensing package that allows licensing a software application on a concurrent-usage as well as on a per-computer basis. FLEX<em>lm</em> allows the implementation of a wide variety of<em> license policies</em> by the developer of an application.
</p>


<p>
  <a name="880513"> </a>With FLEX<em>lm</em>, you, the application developer, can restrict the use of your software packages to a:
</p>

<ul>
  <li><a name="880514"> </a>Single specified computer

  <li><a name="880515"> </a>Specified number of users on a network of one or more computer systems

</ul>

<p>
  <a name="880531"> </a>FLEX<em>lm</em> is available on UNIX and Windows. FLEX<em>lm</em> features include:
</p>

<ul>
  <li><a name="880535"> </a>Operation in a heterogeneous network of supported computer systems

  <li><a name="880536"> </a>Transparent reconnection of applications when their license server process becomes unavailable, including conditions of license server node failure

  <li><a name="880537"> </a>Simple configuration by using a single license file per network

  <li><a name="880538"> </a>Configuration controls for system administrators

  <li><a name="880539"> </a>Administration tools for system administrators

  <li><a name="880540"> </a>Independent features from one or multiple vendors with independent vendor security codes

  <li><a name="890307"> </a>License management on redundant server hosts for improved license availability due to hardware failure

  <li><a name="880541"> </a>A wide variety of license policies and license styles, including:

  <ul>
    <li><a name="880542"> </a>Floating licenses
    <li><a name="880543"> </a>Node-locked licenses
    <li><a name="880544"> </a>Personal use licenses
    <li><a name="880545"> </a>Demo licenses
    <li><a name="880546"> </a>Counted and uncounted licenses
    <li><a name="880547"> </a>Optional license expiration dates
    <li><a name="880548"> </a>Several vendor-definable fields for each application feature
  </ul>
</ul>

<h3>
  <a name="880553"> </a>1.5	 FLEX<em>lm</em> Terms and Definitions
</h3>


<p>
  <a name="880557"> </a>The following terms are used to describe FLEX<em>lm</em> concepts and software components:
</p>


<p>
  <a name="885323"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="885327"> </a>Feature
<br></td>
    <td><a name="885379"> </a>Any functionality that needs to be licensed. The 
<br>meaning of a feature will depend entirely on how 
<br>it is used by an application developer. For 
<br>example, a feature could represent any of the 
<br>following:
<br><ul>
<br>  <li><a name="885380"> </a>An application software system consisting of hundreds of programs
<br>
<br>  <li><a name="885381"> </a>A single program (regardless of version)
<br>
<br>  <li><a name="885382"> </a>A specific version of a program
<br>
<br>  <li><a name="885383"> </a>A part of a program
<br>
<br>  <li><a name="885329"> </a>A piece of data (restricted via the access routines)
<br>
<br></ul>
<br></td>
  </tr>
  <tr>
    <td><a name="885331"> </a>License
<br></td>
    <td><a name="885333"> </a>The legal right to use a feature. FLEX<em>lm</em> can 
<br>restrict licenses for features by counting the 
<br>number of licenses already in use for a feature 
<br>when new requests are made by the application 
<br>software (<em>client</em>). FLEX<em>lm</em> can also restrict 
<br>software usage to particular nodes or user names.
<br></td>
  </tr>
  <tr>
    <td><a name="885335"> </a>Client
<br></td>
    <td><a name="885337"> </a>An application program requesting or receiving a 
<br>license.
<br></td>
  </tr>
  <tr>
    <td><a name="885339"> </a>Daemon
<br></td>
    <td><a name="885341"> </a>A process that "serves" clients. Sometimes 
<br>referred to as a <em>server</em>.
<br></td>
  </tr>
  <tr>
    <td><a name="885434"> </a>Vendor daemon
<br></td>
    <td><a name="885345"> </a>The server process that dispenses licenses for the 
<br>requested features. This binary is built by an 
<br>application's vendor (from libraries supplied by 
<br>GLOBEtrotter Software) and contains the vendor's 
<br>unique encryption seeds.
<br></td>
  </tr>
  <tr>
    <td><a name="900914"> </a>Vendor name
<br></td>
    <td><a name="900916"> </a>Name of the vendor as found in <code>lm_code.h</code>. Used 
<br>as the name of the vendor daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="885347"> </a>lmgrd
<br></td>
    <td><a name="885349"> </a>The daemon process, or license manager daemon, 
<br>that sends client processes to the correct vendor 
<br>daemon on the correct machine. The same license 
<br>manager daemon process can be used by any 
<br>application from any vendor because this daemon 
<br>neither authenticates nor dispenses licenses. 
<br><code>lmgrd</code> processes no user requests on its own, but 
<br>forwards these requests to the vendor daemons.
<br></td>
  </tr>
  <tr>
    <td><a name="885351"> </a>Server node 
<br></td>
    <td><a name="885353"> </a>A computer system that runs the license server 
<br>software. The server node will contain all site-
<br>specific information regarding all feature usage. 
<br>Multiple server nodes used for redundancy can 
<br>logically be considered the server node.
<br></td>
  </tr>
  <tr>
    <td><a name="885355"> </a>License file
<br></td>
    <td><a name="885357"> </a>A text file specific to an end-user site that contains 
<br>descriptions of 1) license server node(s), 2) vendor 
<br>daemons, and 3) licenses (features) for all 
<br>supported products.
<br></td>
  </tr>
  <tr>
    <td><a name="885359"> </a>License file list
<br></td>
    <td><a name="885361"> </a>A list of license files separated with a colon " : " 
<br>on UNIX and a semi-colon " ; " on Windows. A 
<br>license file list can be accepted in most places 
<br>where a license file is appropriate. When a 
<br>directory is specified, all files matching <code>*.lic</code> in 
<br>that directory are automatically used, as if 
<br>specified as a list.
<br></td>
  </tr>
  <tr>
    <td><a name="900901"> </a>License key
<br></td>
    <td><a name="900903"> </a>See the <em>FLEXlm Reference Manual</em>, Appendix F, 
<br>Migrating to the Counterfeit Resistant Option."
<br></td>
  </tr>
  <tr>
    <td><a name="885363"> </a>Signature
<br></td>
    <td><a name="885365"> </a>A secure 12- to 120-character hexadecimal 
<br>number which "authenticates" the readable license 
<br>file text, ensuring that the license text has not been 
<br>modified. 
<br></td>
  </tr>
  <tr>
    <td><a name="885367"> </a>License server
<br></td>
    <td><a name="885369"> </a>An <code>lmgrd</code> and one or more vendor daemon 
<br>processes. License server refers to the processes, 
<br>not the computer on which they run.
<br></td>
  </tr>
</table>




<p>
  <a name="885324"> </a>
</p>


<h3>
  <a name="880600"> </a>1.6	 How FLEX<em>lm</em> Works
</h3>


<p>
  <a name="880604"> </a>FLEX<em>lm</em> is a client-server application toolkit. The client (your application) requests a license from the license server and is either granted or denied the license.
</p>


<p>
  <a name="880608"> </a>The five main components of FLEX<em>lm</em> license management are:
</p>

<ul>
  <li><a name="880610"> </a>FLEX<em>lm</em> client library (embedded in the license-managed application)

  <li><a name="880612"> </a><code>lmgrd</code>, the license manager daemon

  <li><a name="880614"> </a>Vendor daemon(s)

  <li><a name="880616"> </a>Vendor and end-user license administration tools

  <li><a name="880618"> </a>License file(s)

</ul>

<p>
  <a name="880619"> </a>The end user installs <code>lmgrd</code>, the vendor daemon(s), and the license file(s) on the license server node. Once the license file(s) and the daemons are in place, the only requirement is to start <code>lmgrd</code>. The license manager daemon is typically started when the machine boots (in the machine startup file, or on Windows as a system service), but can also be started later by any user.
</p>


<p>
  <a name="880623"> </a>With the license file installed in an expected location and the FLEX<em>lm</em> daemons running, FLEX<em>lm</em> is transparent to the end user.
</p>


<h5>
  <a name="880627"> </a>See Also
</h5>

<ul>
  <li><a name="880631"> </a><a href="all.htm#881928">Chapter&nbsp;12, "The License File</a>"

  <li><a name="880635"> </a><a href="all.htm#882390">Chapter&nbsp;15, "End-User License Administration</a>"

</ul>

<h3>
  <a name="896824"> </a>1.7	 What's Installed
</h3>


<p>
  <a name="896825"> </a>The following directories can be found in your FLEX<em>lm</em> installation:
</p>


<p>
  <a name="896843"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896828"> </a><code><em>platform
<br></em></code></td>
    <td><a name="896830"> </a>Platform-specific executables and files necessary for 
<br>evaluation, e.g., <code>sun4_u5</code>, <code>i86_n3</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="896832"> </a><code>htmlman
<br></code></td>
    <td><a name="896834"> </a>Online documentation.
<br></td>
  </tr>
  <tr>
    <td><a name="896836"> </a><code>machind
<br></code></td>
    <td><a name="896838"> </a>Platform-independent files, include <code>lm_code.h</code>, 
<br>manuals in PDF and/or PostScript format, and sample 
<br>program source files. 
<br></td>
  </tr>
  <tr>
    <td><a name="896840"> </a><code>examples
<br></code></td>
    <td><a name="896842"> </a>More example programs.
<br></td>
  </tr>
  <tr>
    <td><a name="897039"> </a><code>flexid7
<br></code></td>
    <td><a name="897041"> </a>(Windows only)
<br></td>
  </tr>
  <tr>
    <td><a name="897035"> </a><code>flexid8
<br></code></td>
    <td><a name="897037"> </a>(Windows only)
<br></td>
  </tr>
</table>




<p>
  <a name="896844"> </a>
</p>


<p>
  <a name="896845"> </a>The following files will be installed into each <code><em>platform</em></code> directory:
</p>


<p>
  <a name="896916"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896848"> </a><code>demo/demo.exe
<br></code></td>
    <td><a name="896850"> </a>Evaluation vendor daemon
<br></td>
  </tr>
  <tr>
    <td><a name="896867"> </a><code>license.dat/
<br></code><a name="906838"> </a>demo.lic
<br></td>
    <td><a name="896869"> </a>Sample license files
<br></td>
  </tr>
  <tr>
    <td><a name="896871"> </a><code>lmclient/<br>
<br>lmclient.exe
<br></code></td>
    <td><a name="896876"> </a>Sample FLEX<em>lm</em> command-line client program, 
<br>uses Trivial API
<br></td>
  </tr>
  <tr>
    <td><a name="896878"> </a><code>lmcrypt/<br>
<br>lmcrypt.exe
<br></code></td>
    <td><a name="896883"> </a>FLEX<em>lm</em> license generation program
<br></td>
  </tr>
  <tr>
    <td><a name="896885"> </a><code>lmgrd/<br>
<br>lmgrd.exe
<br></code></td>
    <td><a name="896890"> </a>FLEX<em>lm</em> license manager daemon
<br></td>
  </tr>
  <tr>
    <td><a name="896906"> </a><code>lmutil/<br>
<br>lmutil.exe
<br></code></td>
    <td><a name="896908"> </a>Command-line utilities for managing a FLEX<em>lm</em> 
<br>license server
<br></td>
  </tr>
  <tr>
    <td><a name="896913"> </a><code>makekey/<br>
<br>makekey.exe
<br></code></td>
    <td><a name="896915"> </a>Sample program for making license files
<br></td>
  </tr>
</table>




<p>
  <a name="896821"> </a>In the <code><em>platform</em></code> directory on Windows, you will also find:
</p>


<p>
  <a name="896963"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896967"> </a><code>build.bat
<br></code></td>
    <td><a name="896969"> </a>Batch file to build FLEX<em>lm</em> SDK 
<br></td>
  </tr>
  <tr>
    <td><a name="897005"> </a><code>flsetup.exe
<br></code></td>
    <td><a name="897010"> </a>FLEX<em>lock</em> setup program
<br></td>
  </tr>
  <tr>
    <td><a name="897012"> </a><code>genlic.exe
<br></code></td>
    <td><a name="897014"> </a>Evaluation program for making license files 
<br></td>
  </tr>
  <tr>
    <td><a name="897016"> </a><code>installs.exe
<br></code></td>
    <td><a name="897018"> </a>NT service installer for <code>lmgrd.exe
<br></code></td>
  </tr>
  <tr>
    <td><a name="896991"> </a><code>lmtools.exe
<br></code></td>
    <td><a name="896996"> </a>LMTOOLS, GUI utilities for managing a FLEX<em>lm</em> 
<br>license server
<br></td>
  </tr>
  <tr>
    <td><a name="896998"> </a><code>lmwin.exe
<br></code></td>
    <td><a name="897003"> </a>Sample FLEX<em>lm</em> GUI client application, uses 
<br>Trivial API
<br></td>
  </tr>
</table>




<p>
  <a name="896964"> </a>
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="897391"> </a>Chapter 2 <br>Evaluating FLEX<em>lm</em> on UNIX
</h2>
<hr>


<p>
  <a name="897398"> </a>This chapter will walk you though the process of evaluating FLEX<em>lm</em> behavior on UNIX. Before you start this chapter, please install the FLEX<em>lm</em> software as described in the FLEX<em>lm</em> QuickStart. 
</p>


<p>
  <a name="897411"> </a>During the installation of FLEX<em>lm</em>, you built your demo FLEX<em>lm</em> Software Development Kit using the demo vendor keys you received from GLOBEtrotter. The <code><em>platform</em></code> directory (for example, <code>../sun4_u5/license.dat</code>) of the FLEX<em>lm</em> SDK contains the following files that you will use to evaluate FLEX<em>lm</em>:
</p>

<ul>
  <li><a name="897421"> </a>Sample license files (<code>license.dat</code>, <code>demo.lic</code>)

  <li><a name="897422"> </a>Sample vendor daemon (<code>demo</code>)

  <li><a name="897423"> </a>Sample client application (<code>lmclient</code>)

  <li><a name="897424"> </a>License generation utility (<code>lmcrypt</code>)

</ul>

<p>
  <a name="897431"> </a>GLOBEtrotter provides <code>lmutil</code>, a set of FLEX<em>lm</em> command-line utilities, to software vendors to distribute to their customers. You have copies of these utilities in the <code><em>platform</em></code> directory and will use some of them during your evaluation of FLEX<em>lm</em>. A complete description of <code>lmutil</code> commands can be found in the <em>FLEXlm End Users Guide</em>.
</p>


<p>
  <a name="897441"> </a>Note that FLEX<em>lm</em> demo vendor keys expire, and, therefore, the demo SDK that you built with the demo vendor keys expires. If your demo vendor keys expire before you complete this evaluation, contact your salesperson at GLOBEtrotter Software.
</p>


<p>
  <a name="897448"> </a>Now you are ready to begin your evaluation of FLEX<em>lm</em>.
</p>


<h3>
  <a name="897449"> </a>2.1	 Rekeying the Sample License File
</h3>


<p>
  <a name="897450"> </a>A demo license file (<code>license.dat</code>) is shipped in the <code><em>platform</em></code> directory. This sample license will allow its license server to run on any machine (because of the server hostid "ANY" on the SERVER line) and is for a license count of 4 for feature "f1" served by the vendor daemon <code>demo</code>.
</p>

<ol type="1">
  <li><a name="906764"> </a>Open <code>license.dat</code> in a text editor. You will see something like:
  <dl>
     <dt> <a name="897451"> </a><CODE>SERVER this_host ANY</CODE>
     <dt> <a name="897452"> </a><CODE>USE_SERVER</CODE>
     <dt> <a name="906920"> </a><CODE>VENDOR demo </CODE>
     <dt> <a name="906952"> </a><CODE># a counted license </CODE>
     <dt> <a name="897453"> </a><CODE>FEATURE f1 demo 1.0 permanent 4 SIGN=E95FD936F845 </CODE>
  </dl>
  <li><a name="906777"> </a>You will be writing over <code>license.dat</code> during this demo, so copy it to a file called <code>licenseOrig.dat</code>.
  <li><a name="897455"> </a>The SIGN= attribute on the "f1" FEATURE line may not be up to date (the signature in this license file was not regenerated when you rebuilt the demo SDK). You will now regenerate the signature to ensure that it is valid. In the <code>platform</code> directory, type:
<dl>    <dl>
       <dt> <a name="897456"> </a><CODE>lmcrypt license.dat</CODE>
    </dl>
</dl></ol>

<h3>
  <a name="897457"> </a>2.2	 Starting the Demo License Server
</h3>


<p>
  <a name="897461"> </a>A FLEX<em>lm</em> license server is the combination of a running <code>lmgrd</code> process and one or more running vendor daemons (in this case, the <code>demo</code> vendor daemon). Starting the demo license server is necessary because the license for "f1" is <em>counted</em>, that is, its license count is non-zero. A license server is not needed for <em>uncounted</em> licenses (that is, where the license count is the numeral "0" or the keyword "uncounted"). 
</p>

<ol type="1">
  <li><a name="897462"> </a>To start the demo license server, in the <code><em>platform</em></code> directory, type:
  <dl>
     <dt> <a name="897463"> </a><CODE>lmgrd -c license.dat</CODE>
  </dl>
  <dl>
     <dt> <a name="897464"> </a>After <code>lmgrd</code> starts, it will start the <code>demo</code> vendor daemon. For the purposes of this demo, you have started the license server without specifying a debug log--to force the license server processes (<code>lmgrd</code> and <code>demo</code>) to write their debugging output to the window where you started <code>lmgrd</code>. However, in a production setting, you should start <code>lmgrd</code> with a flag to write its output to a debug log file, <code>lmgrd.dl</code>, in the current directory by typing:
    <dl>
       <dt> <a name="897465"> </a><CODE>lmgrd -c license.dat -l lmgrd.dl</CODE>
    </dl>
     <dt> <a name="897466"> </a>(That is the letter "<code>l</code>" for "log," not the number "<code>1</code>.")
  </dl>
  <li><a name="897467"> </a>After you start <code>lmgrd</code>, the output of the license server will look like:
  <dl>
     <dt> <a name="897468"> </a><CODE>11:11:49 (lmgrd) FLEXlm (<code><em>version</em></code>) started on myhost (Sun) (12/3/2000)</CODE>
     <dt> <a name="897469"> </a><CODE>11:11:49 (lmgrd) FLEXlm Copyright 1988-2000, Globetrotter Software, Inc.</CODE>
     <dt> <a name="897470"> </a><CODE>11:11:49 (lmgrd) US Patents 5,390,297 and 5,671,412.</CODE>
     <dt> <a name="897471"> </a><CODE>11:11:49 (lmgrd) World Wide Web:  http://www.globetrotter.com</CODE>
     <dt> <a name="897472"> </a><CODE>11:11:49 (lmgrd) License file(s): license.dat</CODE>
     <dt> <a name="897473"> </a><CODE>11:11:49 (lmgrd) lmgrd tcp-port 27000</CODE>
     <dt> <a name="897474"> </a><CODE>11:11:49 (lmgrd) Starting vendor daemons ... </CODE>
     <dt> <a name="897475"> </a><CODE>11:11:49 (lmgrd) Started demo (internet tcp_port 34641 pid 9159)</CODE>
     <dt> <a name="897476"> </a><CODE>11:11:49 (demo) FLEXlm version <code><em>version</em></code></CODE>
     <dt> <a name="897477"> </a><CODE>11:11:49 (demo) Server started on myhost for:    f1</CODE>
  </dl>
  <li><a name="897478"> </a>Open another window and change to the <code><em>platform</em></code> directory (e.g., <code>sun4_u5</code>). Leave the first window open to monitor the output of <code>lmgrd</code> and the <code>demo</code> vendor daemon.
</ol>

<h3>
  <a name="897479"> </a>2.3	 Checking the License Server Status
</h3>


<p>
  <a name="897480"> </a>Now you will check the status of the license server to see whether it is up and who is using how many of the licenses that it is serving.
</p>

<ol type="1">
  <li><a name="897481"> </a>To check the license server status, in the <code><em>platform</em></code> directory, type:
<dl>    <dl>
       <dt> <a name="897482"> </a><CODE>lmstat -a -c license.dat</CODE>
    </dl>
</dl>  <li><a name="897483"> </a>You should see output like:
  <dl>
     <dt> <a name="897484"> </a><CODE>License server status: 27000@myhost</CODE>
    <dl>
       <dt> <a name="897485"> </a><CODE>License file(s) on myhost: /flexlm/v7.2/sun4_u5/license.dat:</CODE>
       <dt> <a name="897486"> </a><CODE>myhost: license server UP (MASTER) v7.2</CODE>
    </dl>
     <dt> <a name="897487"> </a><CODE>Vendor daemon status (on myhost):</CODE>
    <dl>
       <dt> <a name="897489"> </a><CODE>demo: UP v7.2</CODE>
    </dl>
     <dt> <a name="897490"> </a><CODE>Feature usage info:</CODE>
     <dt> <a name="897491"> </a><CODE>Users of f1:  (Total of 4 licenses available)</CODE>
  </dl>
  <dl>
     <dt> <a name="897492"> </a>Note that no users have any of the four licenses for "f1" checked out.
  </dl>
</ol>

<h3>
  <a name="897493"> </a>2.4	 Running the Sample Application
</h3>


<p>
  <a name="897494"> </a>You will start the sample client application, <code>lmclient</code>, and will use it to check out a license for the feature "f1."
</p>

<ol type="1">
  <li><a name="897495"> </a>In the <code><em>platform</em></code> directory, type:
<dl>    <dl>
       <dt> <a name="897496"> </a><CODE>lmclient</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="897497"> </a>You will see:
  </dl>
  <dl>
     <dt> <a name="897498"> </a><CODE>Enter feature to checkout [default:"f1"]:</CODE>
  </dl>
  <li><a name="897499"> </a>Press Enter to check out a license for feature "f1."
  <li><a name="897500"> </a>Check the tail of the license server output to see the checkout of "f1."
  <dl>
     <dt> <a name="897501"> </a><CODE>11:22:35 (demo) OUT:"f1" daniel@myhost</CODE>
  </dl>
  <li><a name="897502"> </a>In a third window, change to the <code><em>platform</em></code> directory.
  <li><a name="897503"> </a>To check the status of the license server with a license checked out, in the third window, again type:
<dl>    <dl>
       <dt> <a name="897504"> </a><CODE>lmstat -a -c license.dat</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="897505"> </a>You will see output with user, host, and display information about the "f1" license that you just checked out:
  </dl>
  <dl>
     <dt> <a name="897506"> </a><CODE>Users of f1:  (Total of 4 licenses available)</CODE>
     <dt> <a name="897507"> </a><CODE>&nbsp;&nbsp;"f1" v1.0, vendor: demo</CODE>
     <dt> <a name="897508"> </a><CODE>&nbsp;&nbsp;floating license</CODE>
     <dt> <a name="897509"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;daniel myhost 19.16.18.26 (v1.0) (myhost/27000 102), start Fri &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5/3 7:29</CODE>
  </dl>
  <li><a name="897510"> </a>Close the window where you just ran <code>lmstat</code>.
  <li><a name="897511"> </a>In the window where you are running <code>lmclient</code>, you will see:
  <dl>
     <dt> <a name="897512"> </a><CODE>f1 checked out... press return to exit...</CODE>
  </dl>
  <li><a name="897513"> </a>Press Enter to check the f1 license back in.
  <li><a name="897514"> </a>Check the tail of the license server output to see the checkin of "f1:"
  <dl>
     <dt> <a name="897515"> </a><CODE>11:22:40 (demo) IN:"f1" daniel@myhost</CODE>
  </dl>
</ol>

<h3>
  <a name="897516"> </a>2.5	 Trying to Check Out an Unlicensed Feature
</h3>

<ol type="1">
  <li><a name="897517"> </a>Run <code>lmclient</code> again, and instead of selecting the default feature "f1" for which you have a license, type <code>f3</code> as the feature to check out.
  <li><a name="897518"> </a>You will see that the checkout failed because "f3" is not supported by the license server:
  <dl>
     <dt> <a name="897519"> </a><CODE>Checkout failed: License server does not support this feature</CODE>
     <dt> <a name="897520"> </a><CODE>Feature: f3</CODE>
     <dt> <a name="897521"> </a><CODE>License path:  @localhost:license.dat:./demo.lic</CODE>
     <dt> <a name="897522"> </a><CODE>FLEXlm error:  -18,147</CODE>
     <dt> <a name="897523"> </a><CODE>For further information, refer to the FLEXlm End User Manual,</CODE>
     <dt> <a name="897524"> </a><CODE>available at "www.globetrotter.com".</CODE>
     <dt> <a name="907017"> </a><CODE></CODE>
  </dl>
</ol>

<h3>
  <a name="907018"> </a>2.6	 Editing the Sample License File
</h3>


<p>
  <a name="907019"> </a>Now you will edit the sample license file to try to give yourself a license for feature "f3."
</p>

<ol type="1">
  <li><a name="897528"> </a>Open <code>license.dat</code> in a text editor.
  <li><a name="897529"> </a>Duplicate the "f1" FEATURE line on the line below.
  <li><a name="897530"> </a>On the second FEATURE line, replace <code>f1</code> with <code>f3</code>.
  <li><a name="897531"> </a>Save and close <code>license.dat</code>.
  <li><a name="897532"> </a>Tell the license server to reread its edited license file, by typing:
<dl>    <dl>
       <dt> <a name="897533"> </a><CODE>lmreread -c license.dat</CODE>
    </dl>
</dl>  <li><a name="897534"> </a>Run <code>lmclient</code> again and try to check out "f3."
  <dl>
     <dt> <a name="897535"> </a>See that you still get an error because you changed a FEATURE line in a license file and did not regenerate its signature.
  </dl>
</ol>

<h3>
  <a name="897536"> </a>2.7	 Rekeying the License File
</h3>


<p>
  <a name="897537"> </a>You will now generate a license file with valid FEATURE lines for both "f1" and "f3" with <code>lmcrypt</code>.
</p>

<ol type="1">
  <li><a name="897538"> </a>In the <code><em>platform</em></code> directory, type:
<dl>    <dl>
       <dt> <a name="897539"> </a><CODE>lmcrypt license.dat</CODE>
    </dl>
</dl>  <li><a name="897540"> </a>The license file should now resemble:
  <dl>
     <dt> <a name="897541"> </a><CODE>SERVER this_host ANY</CODE>
     <dt> <a name="907175"> </a><CODE>USE_SERVER</CODE>
     <dt> <a name="897542"> </a><CODE>VENDOR demo </CODE>
     <dt> <a name="907176"> </a><CODE># a counted license </CODE>
     <dt> <a name="897543"> </a><CODE>FEATURE f1 demo 1.0 permanent 4 SIGN=E95FD936F845 </CODE>
     <dt> <a name="897544"> </a><CODE>FEATURE f3 demo 1.0 permanent 4 SIGN=E9A1D9763885 </CODE>
  </dl>
  <li><a name="897545"> </a>Reread the license file again by typing:
<dl>    <dl>
       <dt> <a name="897546"> </a><CODE>lmreread -c license.dat</CODE>
    </dl>
</dl>  <li><a name="897547"> </a>Run <code>lmclient</code> again and try to check out "f3." Now that you have a valid license for "f3," you are able to check out a license for it.
</ol>

<h3>
  <a name="897548"> </a>2.8	 Stopping the Demo License Server
</h3>


<p>
  <a name="897549"> </a>When you are done experimenting with <code>lmclient</code> and your license file, stop the license server.
</p>

<ol type="1">
  <li><a name="897550"> </a>In the <code><em>platform</em></code> directory, type:
<dl>    <dl>
       <dt> <a name="897551"> </a><CODE>lmdown -c license.dat</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="897552"> </a>You will see a description of the license server and a request for confirmation:
  </dl>
  <dl>
     <dt> <a name="897553"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;Port@Host&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vendors</CODE>
     <dt> <a name="897554"> </a><CODE>1) 27000@myhost&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;demo </CODE>
     <dt> <a name="897555"> </a><CODE>Are you sure (y/n)?&nbsp;&nbsp;&nbsp;</CODE>
     <dt> <a name="897556"> </a><CODE></CODE>
  </dl>
  <li><a name="897557"> </a>Confirm that you want to shut down the demo license server by typing <code>y</code>.
  <li><a name="897558"> </a>Look at the tail of the license server output:
  <dl>
     <dt> <a name="897559"> </a><CODE>11:35:46 (lmgrd) SHUTDOWN request from daniel at node myhost</CODE>
     <dt> <a name="897560"> </a><CODE>11:35:46 (lmgrd) lmgrd will now shut down all the vendor daemons</CODE>
     <dt> <a name="897561"> </a><CODE>11:35:46 (lmgrd) Shutting down demo</CODE>
     <dt> <a name="897562"> </a><CODE>11:35:46 (demo) daemon shutdown requested - shutting down</CODE>
  </dl>
</ol>

<h3>
  <a name="901815"> </a>2.9	 Testing an Uncounted License
</h3>


<p>
  <a name="907023"> </a>In addition to <code>license.dat</code>, you have a second demo license file in the <code><em>platform</em></code> directory named <code>demo.lic</code>:
</p>

<ol type="1">
  <li><a name="907041"> </a>Open <code>demo.lic</code> in a text editor.
  <dl>
     <dt> <a name="907049"> </a><CODE># an uncounted license</CODE>
     <dt> <a name="907050"> </a><CODE>FEATURE f2 demo 1.000 permanent uncounted HOSTID=ANY \</CODE>
    <dl>
       <dt> <a name="907057"> </a><CODE>SIGN=05E5BF3088AD </CODE>
    </dl>
  </dl>
  <li><a name="907071"> </a>Close <code>demo.lic</code>.
  <li><a name="907074"> </a>In the <code><em>platform</em></code> directory, run <code>lmclient</code> and try to check out feature "f2."
  <dl>
     <dt> <a name="907095"> </a>Because the license file for "f2" is in the same directory as <code>lmclient</code> and has an extension of <code>.lic</code>, its license is found and used. Because the license for "f2" is uncounted, it does not need a license server to allow it to run. 
  </dl>
</ol>

<h3>
  <a name="907022"> </a>2.10	 Evaluating the Counterfeit Resistant Option (CRO)
</h3>


<p>
  <a name="901819"> </a>The Counterfeit Resistant Option uses public-key technology from Certicom to make the signatures on FEATURE/INCREMENT lines more difficult to counterfeit. It is a separately priced add-on to FLEX<em>lm</em> v7.2. However, during your evaluation of FLEX<em>lm</em> v7.2, you can edit one file, rebuild the demo SDK, and evaluate CRO. 
</p>


<h4>
  <a name="901835"> </a>2.10.1	 Adding CRO to lm_code.h
</h4>

<ol type="1">
  <li><a name="901871"> </a>In the <code>machind</code> directory, open <code>lm_code.h</code> in a text editor.
  <li><a name="901878"> </a>Find the definition of <code>LM_STRENGTH</code>. It is probably set to LM_STRENGTH_DEFAULT.
  <li><a name="901924"> </a>Redefine <code>LM_STRENGTH</code> to specify the length of your license signature.
  <dl>
     <dt> <a name="901879"> </a><CODE>#define LM_STRENGTH <code><em>strength</em></code></CODE>
  </dl>
  <dl>
     <dt> <a name="901880"> </a>where <code><em>strength</em></code> is one of:

<p>
  <a name="901917"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903227"> </a><strong>strength
<br></strong></td>
    <td><a name="903229"> </a><strong>Bits
<br></strong></td>
    <td><a name="903231"> </a><strong>Number of hex 
<br>characters
<br></strong></td>
  </tr>
  <tr>
    <td><a name="903233"> </a>LM_STRENGTH_113BIT
<br></td>
    <td><a name="903235"> </a>113
<br></td>
    <td><a name="903237"> </a>58
<br></td>
  </tr>
  <tr>
    <td><a name="903239"> </a>LM_STRENGTH_163BIT
<br></td>
    <td><a name="903241"> </a>163
<br></td>
    <td><a name="903243"> </a>84
<br></td>
  </tr>
  <tr>
    <td><a name="903245"> </a>LM_STRENGTH_239BIT
<br></td>
    <td><a name="903247"> </a>239
<br></td>
    <td><a name="903249"> </a>120
<br></td>
  </tr>
</table>




<p>
  <a name="901918"> </a>
</p>

     <dt> <a name="901919"> </a>To demo FLEX<em>lm</em>, you do not need <code>CRO_KEY</code>s, but for a production FLEX<em>lm</em> kit with CRO enabled, you will need to enter <code>CRO_KEY</code>s into <code>lm_code.h</code> (see <a href="all.htm#899541">Section 5.1, "Editing lm_code.h</a>"). 
  </dl>
  <li><a name="907117"> </a>Save and close <code>lm_code.h</code>.
</ol>

<h4>
  <a name="901869"> </a>2.10.2	 Rebuilding the FLEX<em>lm</em> Demo SDK
</h4>


<p>
  <a name="901936"> </a>Type <code>make</code> in the <code><em>platform</em></code> directory (e.g., <code>sun4_u5</code>) to rebuild the demo vendor daemon, <code>lmcrypt</code>, etc. (If you are doing this command-line demo on Windows, type <code>nmake</code> in the <code>i86_n3</code> folder.)
</p>


<h4>
  <a name="901951"> </a>2.10.3	 Rekeying the Sample License File
</h4>

<ol type="1">
  <li><a name="902017"> </a>In the <code><em>platform</em></code> directory (e.g., <code>sun4_u5</code>), type:
  <dl>
     <dt> <a name="901958"> </a><CODE>lmcrypt license.dat</CODE>
  </dl>
  <li><a name="902057"> </a>Open <code>license.dat</code> in a text editor. Depending on the value of <code>LM_STRENGTH</code> that you chose (this example uses LM_STRENGTH_113BIT), you will see something like:
  <dl>
     <dt> <a name="902063"> </a><CODE>SERVER this_host ANY</CODE>
     <dt> <a name="907160"> </a><CODE>USE_SERVER</CODE>
     <dt> <a name="902064"> </a><CODE>VENDOR demo </CODE>
     <dt> <a name="902065"> </a><CODE># a counted license</CODE>
     <dt> <a name="907161"> </a><CODE>FEATURE f1 demo 1.0 permanent 4 SIGN="00F4 8B8B 8597 AB54 \</CODE>
    <dl>
       <dt> <a name="902073"> </a><CODE>C20E 21B4 E90B 1000 F6EE 67A1 86C8 B823 6D6C 6995 EC79"</CODE>
    </dl>
     <dt> <a name="902067"> </a><CODE>FEATURE f3 demo 1.0 permanent 4 SIGN="00E1 3742 FDE6 A9D0 \</CODE>
    <dl>
       <dt> <a name="902081"> </a><CODE>B835 A673 26A9 CD00 41BB EFE2 600A DDE3 F3D1 664F A2F6"</CODE>

<p>
  <a name="902059"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Each time you run CRO-enabled <code>lmcrypt</code> on a license file, you will generate a different set of signatures for the FEATURE/INCREMENT lines in that license file. The signature field is not, therefore, used to determine whether two INCREMENT lines are identical.</FONT><HR WIDTH=75%>

    </dl>
  </dl>
  <li><a name="902089"> </a>Close <code>license.dat</code>.
</ol>

<p>
  <a name="903536"> </a>Now, if you'd like, you can run through the same evaluation of FLEX<em>lm</em> with CRO enabled--FLEX<em>lm</em> runs the same with CRO enabled, the only difference is in the way the signature is generated and authenticated.
</p>


<p>
  <a name="902107"> </a>You have completed the demo of FLEX<em>lm</em> on UNIX. When you are ready to build your FLEX<em>lm</em> SDK with your production vendor keys, see <a href="all.htm#899784">Chapter&nbsp;4, "Adding FLEXlm Function Calls Into Your Application</a>." If you want to evaluate FLEX<em>lm</em> on Windows, see <a href="all.htm#897092">Chapter&nbsp;3, "Evaluating FLEXlm on Windows</a>." Remember to set <code>LM_STRENGTH</code> to an appropriate value before you build your production FLEX<em>lm</em> SDK.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="897092"> </a>Chapter 3 <br>Evaluating FLEX<em>lm</em> on Windows
</h2>
<hr>


<p>
  <a name="897099"> </a>This chapter will walk you though the process of evaluating FLEX<em>lm</em> behavior on Windows. Before you start this chapter, please install the FLEX<em>lm</em> software as described in the FLEX<em>lm</em> QuickStart.
</p>


<p>
  <a name="897109"> </a>During the installation of FLEX<em>lm</em>, the Windows registry was told about the sample license file, <code>license.dat</code> and a DEMO license server was configured. In addition to the sample license file, the FLEX<em>lm</em> SDK contains pre-built demo files to use to evaluate FLEX<em>lm</em>:
</p>

<ul>
  <li><a name="897116"> </a>Uncounted license (<code>demo.lic</code>)

  <li><a name="906839"> </a>Vendor daemon (<code>demo.exe</code>)

  <li><a name="897117"> </a>Sample client application (<code>lmwin.exe</code>)

  <li><a name="897118"> </a>License generation utility (<code>genlic.exe</code>) -- pre-built, but needs valid demo vendor keys to run

</ul>

<p>
  <a name="897119"> </a>Note that the pre-built demo SDK and the demo vendor keys that ship with FLEX<em>lm</em> expire. If your pre-built files or your demo vendor keys expire before you complete this evaluation, contact your salesperson at GLOBEtrotter Software.
</p>


<p>
  <a name="897129"> </a>Now you are ready to begin your evaluation of FLEX<em>lm</em>.
</p>


<h3>
  <a name="897619"> </a>3.1	 Evaluating FLEX<em>lm</em> with a Pre-Built Client Application
</h3>


<h4>
  <a name="897130"> </a>3.1.1	 Viewing the Sample License Files
</h4>


<p>
  <a name="897131"> </a>A sample license file (<code>license.dat</code>) is shipped in the <code>i86_n3</code> folder and was used to set up a DEMO license server when you installed FLEX<em>lm</em>. 
</p>

<ol type="1">
  <li><a name="906698"> </a>Open <code>license.dat</code> in a text editor. You will see something like:
  <dl>
     <dt> <a name="897135"> </a><CODE>SERVER this_host ANY </CODE>
     <dt> <a name="906925"> </a><CODE>VENDOR demo </CODE>
     <dt> <a name="906937"> </a><CODE>USE_SERVER </CODE>
     <dt> <a name="906938"> </a><CODE>FEATURE f1 demo 1.0 permanent 4 SIGN=E95FD936F845 </CODE>
  </dl>
  <li><a name="906939"> </a>You will be writing over <code>license.dat</code> during this demo, so copy it to a file called <code>licenseOrig.dat</code>.
  <dl>
     <dt> <a name="906714"> </a>This sample license will run on any machine (because on the SERVER line the server hostid is "ANY") and contains one FEATURE line for "f1" that has a license count of 4 and is served by the vendor daemon <code>demo</code>. 
  </dl>
  <li><a name="906886"> </a>Close <code>license.dat</code> and open <code>demo.lic</code> in a text editor. You will see something like:
  <dl>
     <dt> <a name="906892"> </a><CODE># an uncounted license</CODE>
     <dt> <a name="906921"> </a><CODE>FEATURE f2 demo 1.000 permanent uncounted HOSTID=ANY \</CODE>
    <dl>
       <dt> <a name="906893"> </a><CODE>SIGN=05E5BD2088AD</CODE>
    </dl>
  </dl>
  <dl>
     <dt> <a name="906888"> </a>This license for "f2" is uncounted and does not need a license server to allow it to run.
  </dl>
  <li><a name="906908"> </a>Close <code>demo.lic</code>.
</ol>

<h4>
  <a name="897145"> </a>3.1.2	 Starting LMTOOLS
</h4>


<p>
  <a name="897149"> </a>GLOBEtrotter provides tools for managing license servers to software vendors to distribute to their customers. On Windows, GLOBEtrotter provides <code>lmutil.exe</code>, a set of command-line utilities, and LMTOOLS, a similar set of utilities with a graphical user interface. Start LMTOOLS either by selecting Start<img src="graphics/arrwrite.gif">Programs<img src="graphics/arrwrite.gif">FLEXlm v7.2<img src="graphics/arrwrite.gif">FLEXlm Utilities or by double-clicking <code>lmtools.exe</code> in the <code>C:\Program Files\flexlm\v7.2\i86_n3</code> folder.
</p>


<p>
  <a name="897156"> </a><img src="graphics/lmtools.gif">

</p>


<p>
  <a name="897158"> </a><code></code>
</p>


<p>
  <a name="907333"> </a>LMTOOLS will appear with the Service/License tab open.
</p>


<h4>
  <a name="897159"> </a>3.1.3	 Checking and Starting the Demo License Server
</h4>


<p>
  <a name="897163"> </a>A FLEX<em>lm</em> license server is the combination of a running <code>lmgrd</code> process and one or more running vendor daemons (in this case, the <code>demo.exe</code> vendor daemon). Running the demo license server is necessary because the license for "f1" is <em>counted</em>, that is, its license count is non-zero. A license server is not needed for <em>uncounted</em> licenses (that is, where the license count is the numeral "0" or the keyword "uncounted"). A DEMO License Manager should have been installed during the demo installation of FLEX<em>lm</em>.
</p>

<ol type="1">
  <li><a name="897164"> </a>In the Service/License File tab of LMTOOLS, click the Configuration using Services radio button.

<p>
  <a name="897168"> </a><img src="graphics/confUsingServices.gif">

</p>


<p>
  <a name="897169"> </a>
</p>

  <li><a name="897170"> </a>Click DEMO License Manager.
  <li><a name="897175"> </a>Click the Configure Services tab.

<p>
  <a name="908238"> </a><img src="graphics/confServices.gif">

</p>


<p>
  <a name="908242"> </a>
</p>

  <dl>
     <dt> <a name="908282"> </a>The demo license server is configured to use Windows NT services (if you are running on Windows NT), but not to start on boot.
  </dl>
  <li><a name="908283"> </a>Click the Start/Stop/Reread tab.

<p>
  <a name="897179"> </a><img src="graphics/startStopReread.gif">

</p>


<p>
  <a name="897180"> </a>
</p>

  <li><a name="897181"> </a>To start the demo license server, click the Start Server button.
  <dl>
     <dt> <a name="897182"> </a>The DEMO License Manager license server starts and will write its debug log output to <code>C:\Program&nbsp;Files\flexlm\v7.2\i86_n3\lmgrd.dl</code>.
  </dl>
</ol>

<h4>
  <a name="897183"> </a>3.1.4	 Checking the License Server Status
</h4>


<p>
  <a name="897184"> </a>Now you will check the status of the license server to see whether it is up and who is using how many of the licenses that it is serving.
</p>

<ol type="1">
  <li><a name="897185"> </a>To check the license server status, click the Server Status tab.

<p>
  <a name="897189"> </a><img src="graphics/serverStatus.gif">

</p>


<p>
  <a name="897190"> </a>
</p>

  <li><a name="897191"> </a>Click the Perform Status Enquiry button.
  <li><a name="897192"> </a>Scroll down the display; you should see output like:
  <dl>
     <dt> <a name="897193"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;demo: UP v7.2</CODE>
     <dt> <a name="897194"> </a><CODE>Feature usage info:</CODE>
     <dt> <a name="897195"> </a><CODE>Users of f1: (Total of 4 licenses available)</CODE>
     <dt> <a name="897197"> </a><CODE></CODE>
  </dl>
  <dl>
     <dt> <a name="897198"> </a>Note that no users have any of the licenses for "f1" checked out.
  </dl>
</ol>

<h4>
  <a name="897199"> </a>3.1.5	 Running the Sample Application
</h4>


<p>
  <a name="897200"> </a>You will start the sample client application, <code>lmwin.exe</code>, and will use it to check out a license for the feature "f1."
</p>

<ol type="1">
  <li><a name="897201"> </a>Start <code>lmwin.exe</code> either by selecting Start<img src="graphics/arrwrite.gif">Programs<img src="graphics/arrwrite.gif">FLEXlm v7.2<img src="graphics/arrwrite.gif">FLEXlm Test Program or by double-clicking <code>lmwin.exe</code> in the <code>C:\Program Files\flexlm\v7.2\i86_n3</code> folder.

<p>
  <a name="897205"> </a><img src="graphics/lmwin.gif">

</p>


<p>
  <a name="897206"> </a>
</p>

  <dl>
     <dt> <a name="897207"> </a>By default, the feature that appears in the program's display is "f1." The feature "f1" has a <em>counted</em> license, that is, is has a non-zero license count. It is also a <em>floating</em> license, that is, "f1" can be run on any machine.
  </dl>
  <li><a name="897208"> </a>In <code>lmwin</code>, click the Checkout button. In the status line, you will see that the checkout succeeded.
  <li><a name="897209"> </a>To check the status of the license server with a license checked out, in the Server Status pane of LMTOOLS, click the Perform Status Enquiry button. Scroll down to see output with user, host, and display information about the "f1" license that you just checked out:
  <dl>
     <dt> <a name="897210"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;demo: UP v7.2</CODE>
     <dt> <a name="897211"> </a><CODE>Feature usage info:</CODE>
     <dt> <a name="897212"> </a><CODE>Users of f1: (Total of 4 licenses available)</CODE>
     <dt> <a name="897213"> </a><CODE>&nbsp;&nbsp;&nbsp;"f1" v1.0, vendor: demo</CODE>
     <dt> <a name="897214"> </a><CODE>&nbsp;&nbsp;&nbsp;floating license</CODE>
     <dt> <a name="897215"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daniel myhost myhost (v1.0) (myhost/27000 101), start...</CODE>
     <dt> <a name="907795"> </a><CODE></CODE>
  </dl>
  <li><a name="897218"> </a>If you could examine the tail of the debug log file, <code>C:\Program Files\flexlm\v7.2\i86_n3\lmgrd.dl</code>, you would see something like:
  <dl>
     <dt> <a name="897219"> </a><CODE>19:03:54 (demo) OUT:"f1" daniel@myhost</CODE>
  </dl>
  <li><a name="897220"> </a>In <code>lmwin</code>, click the Checkin button to check the "f1" license back in.
  <li><a name="897221"> </a>Check the server status again to see that now no licenses are checked out.
</ol>

<h4>
  <a name="897222"> </a>3.1.6	 Trying to Check Out an Unlicensed Feature
</h4>

<ol type="1">
  <li><a name="897223"> </a>In <code>lmwin</code>, replace "f1" with "f3" as the feature to check out.
  <li><a name="897224"> </a>Click the Checkout button.
  <li><a name="897226"> </a>You will see a dialog that informs you that the checkout failed because the license server doesn't support this feature. Click OK.

<p>
  <a name="897230"> </a><img src="graphics/noLicense.gif">

</p>


<p>
  <a name="897231"> </a>
</p>

</ol>

<h4>
  <a name="901490"> </a>3.1.7	 Editing the Sample License File
</h4>


<p>
  <a name="901491"> </a>Now you will edit the sample license file to try to give yourself a license for feature "f3."
</p>

<ol type="1">
  <li><a name="901492"> </a>Open <code>license.dat</code> in a text editor.
  <li><a name="901493"> </a>Duplicate the "f1" FEATURE line at the bottom of the file.
  <li><a name="901494"> </a>On the second "f1" FEATURE line, replace <code>f1</code> with <code>f3</code>.
  <li><a name="901495"> </a>Save and close <code>license.dat</code>.
  <li><a name="901496"> </a>Click the Start/Stop/Reread tab in LMTOOLS. Click the ReRead License File button to tell the license server to reread its edited license file.
  <li><a name="901498"> </a>In <code>lmwin</code>, try to check out "f3" again.
  <li><a name="906684"> </a>You will see a dialog that tells you that you still have an error because you added a FEATURE line in a license file and did not generate a correct signature for it. Click OK.
</ol>

<h4>
  <a name="901500"> </a>3.1.8	 Rekeying the License File
</h4>


<p>
  <a name="901501"> </a>You will now generate a license file with valid FEATURE lines for both "f1" and "f3" with <code>lmcrypt</code>.
</p>

<ol type="1">
  <li><a name="901502"> </a>Open a DOS command window and change to the <code>C:\Program Files\flexlm\v7.2\i86_n3</code> folder. In the this folder, type:
<dl>    <dl>
       <dt> <a name="901503"> </a><CODE>lmcrypt license.dat</CODE>
    </dl>
</dl>  <li><a name="901504"> </a>The license file should now resemble:
  <dl>
     <dt> <a name="901555"> </a><CODE>SERVER this_host ANY 27000</CODE>
     <dt> <a name="901556"> </a><CODE>VENDOR demo </CODE>
     <dt> <a name="907219"> </a><CODE>USE_SERVER </CODE>
     <dt> <a name="907220"> </a><CODE>FEATURE f1 demo 1.0 permanent 4 SIGN=E95FD936F845 </CODE>
     <dt> <a name="905089"> </a><CODE>FEATURE f3 demo 1.0 permanent 4 SIGN=E9A1D9763885 </CODE>
  </dl>
  <li><a name="905091"> </a>In LMTOOLS, reread the license file again:
  <li><a name="901511"> </a>In <code>lmwin</code>, try to check out "f3" again. Now that you have a valid license for "f3," you are able to check out a license for it.
  <li><a name="901593"> </a>In <code>lmwin</code>, click the Checkin button to check in the "f3" license.
</ol>

<h4>
  <a name="901597"> </a>3.1.9	 Stopping the Demo License Server
</h4>

<ol type="1">
  <li><a name="897234"> </a>In the Start/Stop/Reread pane of LMTOOLS, click the Stop Server button.
  <li><a name="897236"> </a>Check the server status now that you have stopped the demo license server. You will see:
  <dl>
     <dt> <a name="897237"> </a><CODE>lmgrd is not running: Cannot connect to license server</CODE>
     <dt> <a name="897238"> </a><CODE>The server (lmgrd) has not been started yet, or</CODE>
     <dt> <a name="897239"> </a><CODE>the wrong port@host or license file is being used, or the</CODE>
     <dt> <a name="897240"> </a><CODE>port or hostname in the license file has been changed.</CODE>
  </dl>
  <li><a name="897241"> </a>Look at the license server debug log file at <code>C:\Program Files\flexlm\v7.2\i86_n3\lmgrd.dl</code> to review the activity of the demo license server.
</ol>

<h4>
  <a name="907744"> </a>3.1.10	 Testing an Uncounted License
</h4>


<p>
  <a name="897243"> </a>Remember that you started the demo license server to be able to check out a counted "f1" license. Now you will see the difference in the behavior of "f1" and "f2" now that the demo license server is not running.
</p>

<ol type="1">
  <li><a name="897244"> </a>In <code>lmwin</code>, replace "f3" with "f1" as the feature to check out.
  <li><a name="897245"> </a>Click the Checkout button to try to check out "f1."
  <li><a name="897246"> </a>You cannot check out an "f1" license because the license server is down. and a FLEXlm License Finder dialog appears. Click the Cancel button in the dialog and click OK in the dialog that tells you why the checkout failed.
  <li><a name="897247"> </a>Now replace "f1" with "f2." Remember that the license for "f2" is uncounted and node-locked and is located in <code>demo.lic</code>.
  <li><a name="907242"> </a>Click the Checkout button. Because the license file for "f2" is in the same directory as <code>lmwin.exe</code> and has an extension of <code>.lic</code>, its license is found and used. Because the license for "f2" is uncounted, it does not need a license server to allow it to run. 
  <li><a name="897249"> </a>Click the Checkin button.
  <li><a name="897250"> </a>Close <code>lmwin</code>.
  <li><a name="901623"> </a>You will write over <code>license.dat</code> in the next section, so rename <code>license.dat</code> if you'd like to save its contents. 
</ol>

<h3>
  <a name="897271"> </a>3.2	 Generating and Testing Your Own Licenses
</h3>


<p>
  <a name="897272"> </a>To generate your own licenses, you will use a pre-built demo version of a license generator interface, <code>genlic</code>. Eventually, you'll want to learn how to generate licenses with <code>lmcrypt</code>, but <code>genlic</code> is easier to get started with.
</p>


<p>
  <a name="897276"> </a>For more information, see <a href="all.htm#881880">Section 11.4, "genlic (Windows Only)</a>."
</p>


<h4>
  <a name="908377"> </a>3.2.1	 Adding Your Demo Vendor Keys to lm_code.h
</h4>


<p>
  <a name="908378"> </a>For the demo version of <code>genlic</code> to run correctly, you must enter your valid demo vendor keys into <code>lm_code.h</code>. You do not need to rebuild your demo FLEX<em>lm</em> SDK.
</p>

<ol type="1">
  <li><a name="908382"> </a>Change directories to <code>C:\Program Files\flexlm\v7.2\machind</code>.
  <li><a name="908383"> </a>Double-click <code>lm_code.h</code> to open it in a text editor or in the Microsoft Visual C++ editor. Find the lines similar to the following lines:
  <dl>
     <dt> <a name="908384"> </a><CODE>#define VENDOR_KEY1 0x0</CODE>
     <dt> <a name="908385"> </a><CODE>#define VENDOR_KEY2 0x0</CODE>
     <dt> <a name="908386"> </a><CODE>#define VENDOR_KEY3 0x0</CODE>
     <dt> <a name="908387"> </a><CODE>#define VENDOR_KEY4 0x0</CODE>
     <dt> <a name="908388"> </a><CODE>#define VENDOR_KEY5 0x0</CODE>
  </dl>
  <li><a name="908389"> </a>Replace all five lines with the demo vendor key lines that you received from GLOBEtrotter. If your demo vendor keys have expired, contact your salesperson at GLOBEtrotter Software.
  <li><a name="908396"> </a>Save and close <code>lm_code.h</code>.
</ol>

<h4>
  <a name="897277"> </a>3.2.2	 Test a Run Anywhere License
</h4>


<p>
  <a name="897278"> </a>The <em>run anywhere</em> license that <code>genlic</code> generates is an uncounted license that will run on any computer. Choices of expiration date allow the license to be used for a limited or unlimited amount of time. 
</p>

<ol type="1">
  <li><a name="897279"> </a>Select Start<img src="graphics/arrwrite.gif">Programs<img src="graphics/arrwrite.gif">FLEXlm v7.2<img src="graphics/arrwrite.gif">Evaluation License Generator or double-click <code>genlic.exe</code> in the <code>i86_n3</code> directory.

<p>
  <a name="897282"> </a><img src="graphics/genlicBlank.gif">

</p>


<p>
  <a name="897283"> </a>
</p>

  <li><a name="897284"> </a>Enter the feature name, "f1," in the Feature Name field. Click the Permanent<em> </em>check box to make a non-expiring license. Choose the Run Anywhere radio button to set the License Type. 
  <li><a name="897285"> </a>Click the Make License button. The text of the license file will appear in the display. Notice that this feature is uncounted. (To create multiple FEATURE lines, you would edit the form and click Make License again. Each FEATURE line will be appended to the display. For this example, however, you will add only one FEATURE line.) 
  <li><a name="897286"> </a>Type <code>license.dat</code> in the License File field and click Save to create a license file called <code>license.dat</code> in the <code>i86_n3</code> directory. When the dialog warns that <code>license.dat</code> already exists, click Yes to overwrite the file.
  <li><a name="897287"> </a>Run the program <code>lmwin.exe</code>, if it isn't already running, located in the FLEX<em>lm</em> program group (FLEXlm Test Program). With feature "f1" selected, click the Checkout button. Note that the display shows that the license checkout has succeeded. Remember that "f1" is an uncounted license.
  <li><a name="897291"> </a>To release the license, click the Checkin button.
</ol>

<h4>
  <a name="897292"> </a>3.2.3	 Test a Node-Locked License
</h4>


<p>
  <a name="897293"> </a>The <em>node-locked</em> license that <code>genlic</code> generates is an uncounted license that runs only on a specific machine designated by a machine hostid on the FEATURE line. 
</p>

<ol type="1">
  <li><a name="897294"> </a>Launch <code>genlic</code> if it is not already running, or click the Clear button at the bottom if it is still running from the prior test. 
  <li><a name="897295"> </a>Enter the feature name "f1" in the Feature Name field. Click the Permanent check box to make a non-expiring license. Choose the Node Locked radio button to set the License Type. 
  <li><a name="897296"> </a>Open the Node Lock Host ID choice list and choose the DISK_SERIAL_NUM entry. This is the disk volume serial number for Drive C on your computer.
  <li><a name="897297"> </a>Click the Make License button. The license line will appear in the display. This feature is also uncounted. 
  <li><a name="897298"> </a>Make sure that <code>license.dat</code> is in the License File field. Click Save to create a license file called <code>license.dat</code>. When the dialog warns that <code>license.dat</code> already exists, click Yes to overwrite the file.
  <li><a name="897299"> </a>Run <code>lmwin.exe</code> (if it's not already running). 
  <li><a name="897300"> </a>Click the Checkout and Checkin in the <code>lmwin</code> window to test the license. This license will work only on this computer because you have specified the hostid of DISK_SERIAL_NUM with a value specific to this computer. If you were to run the test application with this license file on another computer, it would not run because that computer would not have this same hostid. 
</ol>

<h4>
  <a name="897301"> </a>3.2.4	 Test a Floating License
</h4>


<p>
  <a name="897302"> </a>A <em>floating</em> license illustrates a type of licensing sometimes called <em>concurrent licensing</em> or <em>server-based licensing</em>. A floating license is counted and can be used by different people on a network as long as the license limit is not exceeded.
</p>

<ol type="1">
  <li><a name="897303"> </a>Launch <code>genlic</code> if it is not already running, or click the Clear button at the bottom if it is still running from the prior test. 
  <li><a name="897304"> </a>Enter the feature name "f1" in the Feature Name field. Click the Permanent check box to make a non-expiring license. Choose the Floating radio button to set the License Type. 
  <li><a name="897305"> </a>In the Number of Licenses field, enter <code>1</code>. In the Server Name field enter the host name of your computer. In the Server Host ID field, pull down the choice list and select Any.
  <li><a name="897306"> </a>Click the Make License button. Three lines (SERVER, VENDOR, and FEATURE) will appear in the display. Note that this license is counted.
  <li><a name="897307"> </a>Make sure that <code>license.dat</code> is in the License File field and then click the Save button to create a license file called <code>license.dat</code>. When the dialog warns that <code>license.dat</code> already exists, click Yes to overwrite the file.
  <li><a name="897308"> </a>Because this license is counted, you must start a license server. In the Start/Stop/Reread tab of LMTOOLS, select the DEMO License Manager and click the Start Server button. Wait a few seconds for the server to start (you can check the server status to make sure it's started).
  <li><a name="897321"> </a>Run <code>lmwin</code> (if it's not already running). Checkout and checkin the license. To test that the server is actually counting the "f1" license, bring up another instance of <code>lmwin</code>. Check out "f1" from the first of the test applications and then try to check out "f1" from the second test application. The license server will deny the second license checkout request. Checkin "f1" from the first test application.
  <li><a name="897322"> </a>Finally, stop the demo license server by clicking the Stop Server button in the Start/Stop/Reread tab of LMTOOLS. Close LMTOOLS, <code>genlic</code>, and the two instances of <code>lmwin</code>.
</ol>

<h3>
  <a name="902269"> </a>3.3	 Evaluating the Counterfeit Resistant Option (CRO)
</h3>


<p>
  <a name="902270"> </a>The Counterfeit Resistant Option uses public-key technology from Certicom to make the signatures on FEATURE/INCREMENT lines more difficult to counterfeit. It is a separately priced add-on to FLEX<em>lm</em> v7.2. However, during your evaluation of FLEX<em>lm</em> v7.2, you can edit one file, rebuild the demo SDK, and evaluate CRO.
</p>


<h4>
  <a name="902277"> </a>3.3.1	 Adding CRO to lm_code.h
</h4>

<ol type="1">
  <li><a name="902278"> </a>In the <code>machind</code> directory, open <code>lm_code.h</code> in a text editor.
  <li><a name="902279"> </a>Find the definition of <code>LM_STRENGTH</code>. It is probably set to LM_STRENGTH_DEFAULT.
  <li><a name="902280"> </a>Redefine <code>LM_STRENGTH</code> to specify the length of your license signature.
  <dl>
     <dt> <a name="902281"> </a><CODE>#define LM_STRENGTH <code><em>strength</em></code></CODE>
  </dl>
  <dl>
     <dt> <a name="902282"> </a>where <code><em>strength</em></code> is one of:

<p>
  <a name="902319"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903251"> </a><strong>strength
<br></strong></td>
    <td><a name="903253"> </a><strong>Bits
<br></strong></td>
    <td><a name="903255"> </a><strong>Number of hex 
<br>characters
<br></strong></td>
  </tr>
  <tr>
    <td><a name="903257"> </a>LM_STRENGTH_113BIT
<br></td>
    <td><a name="903259"> </a>113
<br></td>
    <td><a name="903261"> </a>58
<br></td>
  </tr>
  <tr>
    <td><a name="903263"> </a>LM_STRENGTH_163BIT
<br></td>
    <td><a name="903265"> </a>163
<br></td>
    <td><a name="903267"> </a>84
<br></td>
  </tr>
  <tr>
    <td><a name="903269"> </a>LM_STRENGTH_239BIT
<br></td>
    <td><a name="903271"> </a>239
<br></td>
    <td><a name="903273"> </a>120
<br></td>
  </tr>
</table>




<p>
  <a name="902320"> </a>
</p>

     <dt> <a name="907185"> </a>To demo FLEX<em>lm</em>, you do not need <code>CRO_KEY</code>s, but for a production FLEX<em>lm</em> kit with CRO enabled, you will need to enter <code>CRO_KEY</code>s into <code>lm_code.h</code> (see <a href="all.htm#880997">Section 6.1, "Editing lm_code.h</a>"). 
  </dl>
  <li><a name="902321"> </a>Save and close <code>lm_code.h</code>.
</ol>

<h4>
  <a name="902325"> </a>3.3.2	 Rebuilding the FLEX<em>lm</em> Demo SDK
</h4>


<p>
  <a name="902326"> </a>See <a href="all.htm#881005">Section 6.3, "Building with Microsoft Visual C++,"</a> for instructions to rebuild your FLEX<em>lm</em> kit--however, do not change the vendor name from <code>demo</code> at this time.
</p>


<h4>
  <a name="902327"> </a>3.3.3	 Rekeying the Sample License File
</h4>

<ol type="1">
  <li><a name="902335"> </a>Copy <code>licenseOrig.dat</code> into <code>license.dat</code>.
  <li><a name="906747"> </a>In the <code>i86_n3</code> directory, type:
  <dl>
     <dt> <a name="902336"> </a><CODE>C:\&gt; lmcrypt license.dat</CODE>
  </dl>
  <li><a name="902337"> </a>Open <code>license.dat</code> in a text editor. Depending on the value of <code>LM_STRENGTH</code> that you chose (this example uses LM_STRENGTH_113BIT), you will see something like:
  <dl>
     <dt> <a name="902468"> </a><CODE>SERVER this_host ANY </CODE>
     <dt> <a name="902469"> </a><CODE>VENDOR demo </CODE>
     <dt> <a name="907261"> </a><CODE>USE_SERVER</CODE>
     <dt> <a name="902471"> </a><CODE>FEATURE f1 demo 1.0 permanent 4 SIGN="09F4 8B8B 8597 AB54 \</CODE>
    <dl>
       <dt> <a name="902472"> </a><CODE>C30E 21B4 E91B 1000 F6FE 67A1 86C8 B823 6D6C 6995 EC79" </CODE>

<p>
  <a name="902344"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Each time you run CRO-enabled <code>lmcrypt</code> on a license file, you will generate a different set of signatures for the FEATURE/INCREMENT lines in that license file. The signature field cannot, therefore, be used to determine whether two INCREMENT lines are identical.</FONT><HR WIDTH=75%>

    </dl>
  </dl>
  <li><a name="902345"> </a>Close <code>license.dat</code>.
</ol>

<p>
  <a name="902349"> </a>Now, if you'd like, you can run through the same evaluation of FLEX<em>lm</em> with CRO enabled--FLEX<em>lm</em> runs the same with CRO enabled, the only difference is in the way the signature is generated and authenticated.
</p>


<p>
  <a name="897326"> </a>You have completed the demo of FLEX<em>lm</em>'s pre-built programs on Windows. When you are ready to build your FLEX<em>lm</em> SDK with your production vendor keys, see <a href="all.htm#899664">Chapter&nbsp;6, "Incorporating Production FLEXlm into a Windows Application</a>." If you want to evaluate FLEX<em>lm</em> on UNIX, see <a href="all.htm#897391">Chapter&nbsp;2, "Evaluating FLEXlm on UNIX</a>." Remember to set <code>LM_STRENGTH</code> to an appropriate value before you build your production FLEX<em>lm</em> SDK.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="899784"> </a>Chapter 4 <br>Adding FLEX<em>lm</em> Function Calls Into Your Application
</h2>
<hr>


<p>
  <a name="899792"> </a>To incorporate FLEX<em>lm</em> licensing into your application, you will add FLEX<em>lm</em> function calls to your application program. This chapter will give you some introductory information about the Trivial and Simple APIs. 
</p>


<p>
  <a name="900052"> </a><a href="all.htm#880952">Chapter&nbsp;5, "Incorporating Production FLEXlm into a UNIX Application,"</a> and <a href="all.htm#899664">Chapter&nbsp;6, "Incorporating Production FLEXlm into a Windows Application,"</a> will give you an overview of building your production FLEX<em>lm</em> SDK containing your own vendor daemon and license generators, adding FLEX<em>lm</em> code to your application, building your application with the FLEX<em>lm</em> libraries, and testing your application with a new license file.
</p>


<h3>
  <a name="900940"> </a>4.1	 FLEX<em>lm</em> APIs
</h3>


<p>
  <a name="900944"> </a>The application program interfaces to FLEX<em>lm</em> via a set of routines that request (checkout) and release (checkin) licenses of selected feature(s). 
</p>


<p>
  <a name="900945"> </a>There are four APIs available to the developer: 
</p>

<ul>
  <li><a name="900947"> </a>Trivial API

  <li><a name="900949"> </a>Simple API

  <li><a name="900951"> </a>FLEXible API

  <li><a name="900952"> </a>Java API

</ul>

<p>
  <a name="900956"> </a>GLOBEtrotter recommends using the Trivial API; if, however, the application requires FLEX<em>lm</em> functionality not provided in the Trivial API, use the Simple API. For complete flexibility, use the FLEXible API.
</p>


<p>
  <a name="900960"> </a>In the Trivial and Simple APIs, a licensing "policy" is selected as an argument to the license request call. In these APIs a "heartbeat" function is usually called explicitly by the application, and the policy upon server failure must be programmed into the application.
</p>


<p>
  <a name="900961"> </a>The Simple API must be used instead of the Trivial API when:
</p>

<ul>
  <li><a name="900962"> </a>A single process needs to separately license sub-functionality--that is, when two or more feature names may be checked out.

  <li><a name="900963"> </a>The checkout call needs to be able to checkout more than one license of a feature.

</ul>

<p>
  <a name="900964"> </a>Most commonly, the FLEXible API is required:
</p>

<ul>
  <li><a name="900965"> </a>For asynchronous queuing, especially in GUI-based applications where queueing is required.

  <li><a name="900966"> </a>To obtain a list of users of a given feature.

  <li><a name="900967"> </a>For a vendor-defined hostid.

</ul>

<p>
  <a name="900968"> </a>If your application requires the FLEXible API <em>only</em> for a list of users, you can concurrently use the Simple or Trivial API for licensing and the FLEXible API only for a list of users--this is the recommended solution for this problem.
</p>


<p>
  <a name="900969"> </a>The Simple and Trivial APIs (as well as the Java API) are documented in this guide, while the FLEXible API is documented in detail in the <em>FLEXlm Reference Manual</em>. The Java API is not available for FLEX<em>lm</em> v7.2; the latest version is v7.0.
</p>


<p>
  <a name="900976"> </a>Most of the important functionality and flexibility in FLEX<em>lm</em> is contained in the license file; all license file attributes are available to all APIs.
</p>


<h3>
  <a name="899797"> </a>4.2	 FLEX<em>lm</em> Function Naming Conventions
</h3>


<p>
  <a name="899801"> </a>All FLEX<em>lm</em> client routines and variables adhere to certain naming conventions. These conventions are:
</p>

<ul>
  <li><a name="899802"> </a>Trivial API functions are all uppercase <font  face="Arial" size="2">MACROS</font> defined in <code>lmpolicy.h</code>.

  <li><a name="899803"> </a>Simple API function names start with <font  face="Arial" size="2">lp_</font>. The "p" stands for "policy," since this is policy-based licensing.

  <li><a name="899804"> </a>FLEXible API client routine names start with <font  face="Arial" size="2">lc_</font>.

</ul>

<h3>
  <a name="899806"> </a>4.3	 Installation and Directory Naming for Java
</h3>


<p>
  <a name="899810"> </a>The latest version of the Java API is for FLEX<em>lm</em> v7.0. No special installation of the FLEX<em>lm</em> class files is required. The classes are in the <code>java_01/flexlm</code> directory of the FLEX<em>lm</em> v7.0 main directory. Note that the FLEX<em>lm</em> class files must reside in a directory called <code>flexlm</code>, since they are in a Java package named <font  face="Arial" size="2">flexlm</font>.
</p>


<p>
  <a name="899817"> </a>If you are running Java applications, you must set your <code>CLASSPATH</code> environment variable to include a component reflecting the location of the FLEX<em>lm</em> classes. For example, if you installed the FLEX<em>lm</em> classes into <code>/</code><code><em>a</em></code><code>/</code><code><em>b</em></code><code>/lmgr/v7.0/java_01/flexlm</code>, you would include the following component in your <code>CLASSPATH</code>:
</p>

<dl>  <dl>
     <dt> <a name="899824"> </a><CODE>"/<code><em>a</em></code>/<code><em>b</em></code>/lmgr/v7.0/java_01"</CODE>
  </dl>
</dl>
<p>
  <a name="899828"> </a>If you are setting up the FLEX<em>lm</em> class files for access by an http server, they must reside in a directory called <code>flexlm</code>, again, because the FLEX<em>lm</em> class files are in the <font  face="Arial" size="2">flexlm</font> package.
</p>


<h3>
  <a name="899841"> </a>4.4	 FLEX<em>lm</em> Example Applications
</h3>


<p>
  <a name="899845"> </a>On both UNIX and Windows, the FLEX<em>lm</em> SDK contains the source for an example command-line client application program, <code>lmclient</code>, in the <code>machind</code> directory called <code>lmclient.c</code>. This is a small standalone licensed program using Trivial API macros and is a good place to start to learn how to integrate FLEX<em>lm</em> with your application.
</p>


<p>
  <a name="899849"> </a>For Windows systems, the SDK contains the source for <code>lmwin</code>, an example GUI application program, in <code>machind\lmwin.c</code>. <code>lmwin</code> uses Microsoft Visual C++ to build a slightly more complicated Trivial API example.
</p>


<p>
  <a name="899850"> </a>In the <code>machind</code> directory, you can also find <code>lmsimple.c</code> and <code>lmflex.c</code> which are the sources for application programs that behave like <code>lmclient</code>, but demonstrate function calls of the Simple and FLEXible APIs, respectively.
</p>


<p>
  <a name="899851"> </a>The <code>lmcrypt</code>, <code>makekey</code>, and<code> </code><code>genlic</code><code> </code>programs can be used to generate licenses for your customers, or they can be used as examples of license generation programs. Source to the <code>makekey</code> and <code>lmcrypt</code> programs is in the <code>machind</code> directory.
</p>


<p>
  <a name="899853"> </a>The <code>lmcrypt</code> and <code>makekey</code> programs generate the same signatures on all FLEX<em>lm</em>-supported platforms for all FLEX<em>lm</em> versions, allowing you to create licenses for any supported platform on any other supported platform.
</p>


<p>
  <a name="899864"> </a>The FLEX<em>lm</em> SDK also contains an <code>examples</code> directory at the top level of the hierarchy. The <code>examples</code> directory contains example programs, which have been put in the SDK to illustrate how to perform various operations with FLEX<em>lm</em>. These programs are <strong>not supported</strong> and GLOBEtrotter Software may not include them in future FLEX<em>lm</em> releases.
</p>


<h3>
  <a name="899875"> </a>4.5	 Client Heartbeats and License Server Failures
</h3>


<p>
  <a name="899876"> </a>Your client application will need to communicate regularly with the license server via "heartbeat" calls to ensure that the license server is still running. Programming how the heartbeats occur and what action takes place when the license server is not running are the most important part of incorporating FLEX<em>lm</em> in an application. This is addressed in the following sections:
</p>

<ul>
  <li><a name="899883"> </a><a href="all.htm#881387">Section 7.6, "HEARTBEAT()</a>"

  <li><a name="899887"> </a><a href="all.htm#881524">Section 8.6, "lp_heartbeat()</a>"

  <li><a name="904553"> </a><em>FLEXlm Reference Manual</em>, Section 3.21, "lc_heartbeat()"

</ul>

<h3>
  <a name="900056"> </a>4.6	 License Policies
</h3>


<p>
  <a name="900057"> </a>The Trivial and Simple APIs both require that you specify a license policy. A policy can be modified by ORing a list of optional modifiers. The following license policies are available:
</p>

<ul>
  <li><a name="900058"> </a>LM_RESTRICTIVE

  <li><a name="900059"> </a>LM_QUEUE

  <li><a name="900060"> </a>LM_FAILSAFE

  <li><a name="900061"> </a>LM_LENIENT

</ul>

<h4>
  <a name="900063"> </a>4.6.1	 LM_RESTRICTIVE
</h4>


<p>
  <a name="900064"> </a>With this policy, any failure in the license, checkout, or server will be reported to the calling application as an error. The application decides what action to take with this error--it is not necessary that the application fail to run. For example, the application may report the error and continue running, it may exit, or it may run in a limited mode.
</p>


<h4>
  <a name="900066"> </a>4.6.2	 LM_QUEUE
</h4>


<p>
  <a name="900067"> </a>This policy is the same as LM_RESTRICTIVE, except that the checkout call will wait for a license if the licenses are all currently in use. To the end user, the application will appear to "hang" until the license is available.
</p>


<h4>
  <a name="900069"> </a>4.6.3	 LM_FAILSAFE
</h4>


<p>
  <a name="900070"> </a>With this policy, the application will attempt a checkout, but no checkout failures of any kind will be reported to the calling application. This policy provides "optional" licensing to the user. If the user wants to use licensing, he can, in which case the checkout will succeed. If the user doesn't want to use licensing, or if licensing is for some reason broken, applications will always continue to run.
</p>


<p>
  <a name="900071"> </a>In the case where all licenses are currently in use, the application will still run. The end user could use SAM<em>report</em> to report on historical usage, which will show when licensed use is exceeded. Application users will never be denied usage. Errors that normally make a checkout fail are available as warnings.
</p>


<h4>
  <a name="900076"> </a>4.6.4	 LM_LENIENT
</h4>


<p>
  <a name="900077"> </a>In this policy, if all licenses are in use, the checkout will return a failure status showing that all licenses are in use. For any other error, no error is returned. This is another form of "optional" end user licensing, where the user is not penalized if licensing is not set up or if an operational error occurs. Errors that would normally make a checkout fail are available as warnings.
</p>


<h3>
  <a name="900080"> </a>4.7	 Policy Modifiers
</h3>


<p>
  <a name="900081"> </a>These modifiers are binary ORed ("|") with the main policies, described above. The following policy modifiers are available:
</p>

<ul>
  <li><a name="900082"> </a>LM_MANUAL_HEARTBEAT

  <li><a name="900083"> </a>LM_RETRY_RESTRICTIVE

  <li><a name="900084"> </a>LM_CHECK_BADDATE

  <li><a name="900085"> </a>LM_FLEXLOCK

</ul>

<h4>
  <a name="900088"> </a>4.7.1	 LM_MANUAL_HEARTBEAT
</h4>


<p>
  <a name="900089"> </a>If this policy modifier is not specified, heartbeats, via <font  face="Arial" size="2">HEARTBEAT()</font> or <font  face="Arial" size="2">lp_heartbeat()</font> are automatically sent every two minutes from the application to the server. On UNIX, SIGALRM is used to send the heartbeats.
</p>


<p>
  <a name="900090"> </a>For example:
</p>

<dl>  <dl>
     <dt> <a name="900091"> </a><CODE>LM_RESTRICTIVE | LM_MANUAL_HEARTBEAT</CODE>
  </dl>
</dl>
<p>
  <a name="900092"> </a>indicates that the main policy is LM_RESTRICTIVE, that no automatic heartbeats should be sent to the server, and the application will call <font  face="Arial" size="2">HEARTBEAT()</font> or <font  face="Arial" size="2">lp_heartbeat()</font> directly.
</p>


<p>
  <a name="900093"> </a>Most UNIX applications will require LM_MANUAL_HEARTBEAT, but some simple applications may prefer to have the heartbeats sent automatically. If your application does not send heartbeats to the license server, the application will not know if the license server has been shut down and restarted. If the server is restarted, the old copies of the applications continue running and a (new) full complement of licenses becomes available, making license over-usage possible.
</p>


<h4>
  <a name="900095"> </a>4.7.2	 LM_RETRY_RESTRICTIVE
</h4>


<p>
  <a name="900096"> </a>If this policy modifier is set, the application will exit with a short error message after five failed heartbeat messages. This is not normally recommended, but is useful for some simple applications.
</p>


<h4>
  <a name="900098"> </a>4.7.3	 LM_CHECK_BADDATE
</h4>


<p>
  <a name="900099"> </a>If set, attempts are made to detect whether the user has set the system date back. This should be used in conjunction with setting ls_a_check_baddate to 1 in the <code>machind/lsvendor.c</code> file.
</p>


<h5>
  <a name="900100"> </a>See Also:
</h5>

<ul>
  <li><a name="900104"> </a><em>FLEXlm Reference Manual</em>, Section 6.1.2, "Limited Functionality Demos"

  <li><a name="900108"> </a><em>FLEXlm Reference Manual</em>, Section 9.2.2, "ls_a_check_baddate"

</ul>

<h4>
  <a name="900110"> </a>4.7.4	 LM_FLEXLOCK
</h4>


<p>
  <a name="900114"> </a>If set, FLEX<em>lock</em> functionality is enabled.
</p>


<h5>
  <a name="900115"> </a>See Also:
</h5>

<ul>
  <li><a name="900119"> </a><a href="all.htm#893023">Chapter&nbsp;13, "FLEXlock and License Certificate Manager (Windows Only)</a>

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="880952"> </a>Chapter 5 <br>Incorporating Production FLEX<em>lm</em> into a UNIX Application
</h2>
<hr>


<p>
  <a name="880953"> </a>After you have become familiar with <code>lmgrd</code>, the sample vendor daemon (<code>demo</code>), <code>lmcrypt</code>, and the sample client program, you are ready to build your production FLEX<em>lm</em> SDK and to incorporate the FLEX<em>lm</em> client calls into your own software or into a copy of one of the example source files.
</p>


<h3>
  <a name="899541"> </a>5.1	 Editing lm_code.h
</h3>

<ol type="1">
  <li><a name="899013"> </a>Open <code>lm_code.h</code> in a text editor.
  <li><a name="899489"> </a>Find the five VENDOR_KEY lines. Replace them with your production vendor key lines that you received from GLOBEtrotter. 
  <dl>
     <dt> <a name="899474"> </a><CODE>#define VENDOR_KEY1 0x0</CODE>
     <dt> <a name="899475"> </a><CODE>#define VENDOR_KEY2 0x0</CODE>
     <dt> <a name="899476"> </a><CODE>#define VENDOR_KEY3 0x0</CODE>
     <dt> <a name="899477"> </a><CODE>#define VENDOR_KEY4 0x0</CODE>
     <dt> <a name="899478"> </a><CODE>#define VENDOR_KEY5 0x0</CODE>
  </dl>
  <li><a name="899479"> </a>If you are using CRO, add the two <code>CRO_KEY</code>s that you received from GLOBEtrotter. Otherwise, the <code>CRO_KEY</code>s are unused.
  <li><a name="899512"> </a>Change the <code>VENDOR_NAME</code> to your vendor name. 
  <li><a name="899520"> </a>Change the <code>ENCRYPTION_SEED</code>s to four 32-bit numbers that you make up. Keep the <code>lm_code.h</code> file and the encryption seeds secret. 
  <dl>
     <dt> <a name="899649"> </a><code>lm_code.h</code>, is used to build license generators (<code>lmcrypt</code>, <code>makekey</code>), the vendor daemon, and the <code>lm_new.o</code> file. You do not need the <code>lm_code.h</code> file to build your licensed applications once the <code>lm_new.o</code> file is built. So not all programmers in your company need access to <code>lm_code.h</code>, only the resulting <code>lm_new.o</code> file.
  </dl>
  <li><a name="899174"> </a>If you are using CRO, define <code>LM_STRENGTH</code> to specify the length of your license signature.
  <dl>
     <dt> <a name="899199"> </a><CODE>#define LM_STRENGTH <code><em>strength</em></code></CODE>
  </dl>
  <dl>
     <dt> <a name="899200"> </a>where <code><em>strength</em></code> is one of:

<p>
  <a name="902159"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903554"> </a><strong>strength
<br></strong></td>
    <td><a name="903556"> </a><strong>Bits
<br></strong></td>
    <td><a name="903558"> </a><strong>Number of hex 
<br>characters
<br></strong></td>
  </tr>
  <tr>
    <td><a name="903561"> </a>LM_STRENGTH_113BIT
<br></td>
    <td><a name="903563"> </a>113
<br></td>
    <td><a name="903565"> </a>58
<br></td>
  </tr>
  <tr>
    <td><a name="903568"> </a>LM_STRENGTH_163BIT
<br></td>
    <td><a name="903570"> </a>163
<br></td>
    <td><a name="903572"> </a>84
<br></td>
  </tr>
  <tr>
    <td><a name="903575"> </a>LM_STRENGTH_239BIT
<br></td>
    <td><a name="903577"> </a>239
<br></td>
    <td><a name="903579"> </a>120
<br></td>
  </tr>
  <tr>
    <td><a name="903582"> </a>LM_STRENGTH_DEFAULT
<br></td>
    <td colspan=2 rowspan=1><a name="903584"> </a>Not public-key; SIGN=12 chars.
<br></td>
  </tr>
  <tr>
    <td><a name="903589"> </a>LM_STRENGTH_LICENSE_KEY
<br></td>
    <td colspan=2 rowspan=1><a name="903597"> </a>Uses FLEX<em>lm</em> license key.
<br></td>
  </tr>
</table>




<p>
  <a name="902160"> </a>
</p>

  </dl>
  <li><a name="899534"> </a>Save and close <code>lm_code.h</code>.
</ol>

<h3>
  <a name="899545"> </a>5.2	 Editing the makefile and lsvendor.c
</h3>

<ol type="1">
  <li><a name="899201"> </a>Open <code><em>platform</em></code><code>/makefile</code> in a text editor.
  <li><a name="899592"> </a>Change the vendor daemon name from <code>demo</code> to your own vendor daemon name. Change:
  <dl>
     <dt> <a name="899025"> </a><code>DAEMON = demo</code>
     <dt> <a name="899026"> </a>to:
     <dt> <a name="899027"> </a><code>DAEMON = v</code><code><em>endor</em></code>
     <dt> <a name="899028"> </a>where <code><em>vendor</em></code> is the same as <code>VENDOR_NAME</code> in <code>lm_code.h</code>. Otherwise, after <code>demo</code> is built by <code>make</code>, you'll need to rename it to <code><em>vendor</em></code>, where <code><em>vendor</em></code> is your vendor daemon name.
  </dl>
  <li><a name="899931"> </a>Optional--If your vendor daemon requires some customization (not normally needed), make modifications in <code>machind/lsvendor.c</code>.
</ol>

<h3>
  <a name="899552"> </a>5.3	 Building the Production FLEX<em>lm</em> SDK
</h3>


<p>
  <a name="898462"> </a>Type <code>make</code> in the <code><em>platform</em></code> directory to build your own vendor daemon, <code>lmcrypt</code>, and <code>lm_new.o</code> with your own encryption seeds.
</p>


<h3>
  <a name="899562"> </a>5.4	 Adding FLEX<em>lm</em> Code to Your Application
</h3>


<p>
  <a name="899437"> </a>Modify your application code to call the license manager client routines. If possible, use the Trivial API. Add calls like the following to your application code:
</p>

<dl>  <dl>
     <dt> <a name="899438"> </a><CODE>#include "lmpolicy.h"</CODE>
     <dt> <a name="899439"> </a><CODE>/*...*/</CODE>
     <dt> <a name="899440"> </a><CODE>CHECKOUT(LM_RESTRICTIVE, "myfeature", "1.0", "license.dat");</CODE>
     <dt> <a name="899441"> </a><CODE>/*...*/</CODE>
     <dt> <a name="899442"> </a><CODE>CHECKIN();</CODE>
  </dl>
</dl>
<p>
  <a name="899446"> </a>See <code>lmclient.c</code> or <a href="all.htm#881297">Chapter&nbsp;7, "Trivial API,"</a> for a full description of the parameters).
</p>


<h3>
  <a name="899569"> </a>5.5	 Building Your Application 
</h3>


<p>
  <a name="880976"> </a>Build your application as usual, adding the following files to your link (<code>ld</code> or<em> </em><code>cc</code>) command:
</p>


<p>
  <a name="898527"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="898501"> </a><strong>
<br></strong></td>
    <td><a name="898506"> </a>FLEX<em>lm</em><strong> Object File
<br></strong></td>
    <td><a name="898511"> </a>FLEX<em>lm</em><strong> Client Libraries
<br></strong></td>
  </tr>
  <tr>
    <td><a name="898513"> </a>Standard
<br></td>
    <td><a name="898515"> </a><code>lm_new.o
<br></code></td>
    <td><a name="898518"> </a><code>liblmgr.a
<br></code></td>
  </tr>
  <tr>
    <td><a name="898520"> </a>Add for CRO
<br></td>
    <td><a name="898522"> </a><code>
<br></code></td>
    <td><a name="898525"> </a><code>libcrvs.a
<br></code><a name="898526"> </a><code>libsb.a
<br></code></td>
  </tr>
</table>




<p>
  <a name="898528"> </a>
</p>


<p>
  <a name="898552"> </a>If you get a link error complaining about missing <code>l_n36_buf</code>, the problem is that you forgot to add <code>lm_new.o</code> to your link list.
</p>


<h3>
  <a name="880980"> </a>5.6	 Creating a License File
</h3>

<ol type="1">
  <li><a name="899579"> </a>Open <code><em>platform</em></code><code>/license.dat</code> in a text editor.
  <li><a name="899684"> </a>Modify the SERVER, VENDOR, and FEATURE lines in <code>license.dat</code> to include server information and information for the features that your application checks out. In place of a signature on each FEATURE line, enter <code>SIGN=0</code>. See <a href="all.htm#881928">Chapter&nbsp;12, "The License File,"</a> for information about the allowed fields and syntax of a license file.
  <li><a name="899689"> </a>Save <code>license.dat</code>.
  <li><a name="899668"> </a>Run <code>lmcrypt</code> to calculate the signatures and create a valid license file.
</ol>

<h3>
  <a name="899701"> </a>5.7	 Testing Your Application
</h3>

<ol type="1">
  <li><a name="899705"> </a>Put your application's license file where your application expects to find it.
  <li><a name="899723"> </a>If you have counted licenses, start a license server that uses the application's license file.
  <li><a name="899709"> </a>Start your application and perform a task that checks out one of your licenses.
</ol>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="899664"> </a>Chapter 6 <br>Incorporating Production FLEX<em>lm</em> into a Windows Application
</h2>
<hr>


<p>
  <a name="895397"> </a>After you have become familiar with lmgrd, the sample vendor daemon (demo), and the sample client program, you are ready to build your production FLEX<em>lm</em> SDK and to incorporate the FLEX<em>lm</em> client calls into your own software or into a copy of one of the example source files.
</p>


<p>
  <a name="899730"> </a>On Windows, integration with your C compilers can take some planning. The makefiles have been designed to work with Microsoft Visual C++ v5.0 or greater. Other compilers may work, but will take additional time and effort to get a running product. If you're using any other C compiler or a different language, see <a href="all.htm#900312">Section 6.6, "Alternative: Using the FLEXlm Shared Library (DLL)</a>."
</p>


<p>
  <a name="880991"> </a>In this section, <code>lmwin.exe</code> is used as a sample application. Its source is in <code>machind\lmwin.c</code>.
</p>


<h3>
  <a name="880997"> </a>6.1	 Editing lm_code.h
</h3>

<ol type="1">
  <li><a name="899096"> </a>Change directories to <code>C:\Program Files\flexlm\v7.2\machind</code>.
  <li><a name="899097"> </a>Double-click <code>lm_code.h</code> to open it in a text editor or the Microsoft Visual C++ editor. Find the five VENDOR_KEY lines similar to the following:
  <dl>
     <dt> <a name="899098"> </a><CODE>#define VENDOR_KEY1 0x00000000</CODE>
     <dt> <a name="899099"> </a><CODE>#define VENDOR_KEY2 0x00000000</CODE>
     <dt> <a name="899100"> </a><CODE>#define VENDOR_KEY3 0x00000000</CODE>
     <dt> <a name="899101"> </a><CODE>#define VENDOR_KEY4 0x00000000</CODE>
     <dt> <a name="899102"> </a><CODE>#define VENDOR_KEY5 0x00000000</CODE>
  </dl>
  <li><a name="899004"> </a>Replace these lines with your production vendor key lines that you received from GLOBEtrotter.
  <li><a name="900181"> </a>If you are using CRO, add the two <code>CRO_KEY</code>s that you received from GLOBEtrotter. Otherwise, the <code>CRO_KEY</code>s are unused.
  <li><a name="900185"> </a>Change the <code>VENDOR_NAME</code> to your vendor name. 
  <li><a name="900186"> </a>Change the <code>ENCRYPTION_SEED</code>s to four 32-bit numbers that you make up. Keep the <code>lm_code.h</code> file and the encryption seeds secret. 
  <dl>
     <dt> <a name="900187"> </a><code>lm_code.h</code>, is used to build license generators (<code>lmcrypt.exe</code>, <code>makekey.exe</code>), the vendor daemon, and the <code>lm_new.obj</code> file. You do not need the <code>lm_code.h</code> file to build your licensed applications once the <code>lm_new.obj</code> file is built. So not all programmers in your company need access to <code>lm_code.h</code>, only the resulting <code>lm_new.obj</code> file.
  </dl>
  <li><a name="900189"> </a>If you are using CRO, define <code>LM_STRENGTH</code> to specify the length of your license signature.
  <dl>
     <dt> <a name="900190"> </a><CODE>#define LM_STRENGTH <code><em>strength</em></code></CODE>
  </dl>
  <dl>
     <dt> <a name="900191"> </a>where <code><em>strength</em></code> is one of:

<p>
  <a name="902254"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="903632"> </a><strong>strength
<br></strong></td>
    <td><a name="903634"> </a><strong>Bits
<br></strong></td>
    <td><a name="903636"> </a><strong>Number of hex 
<br>characters
<br></strong></td>
  </tr>
  <tr>
    <td><a name="903639"> </a>LM_STRENGTH_113BIT
<br></td>
    <td><a name="903641"> </a>113
<br></td>
    <td><a name="903643"> </a>58
<br></td>
  </tr>
  <tr>
    <td><a name="903646"> </a>LM_STRENGTH_163BIT
<br></td>
    <td><a name="903648"> </a>163
<br></td>
    <td><a name="903650"> </a>84
<br></td>
  </tr>
  <tr>
    <td><a name="903653"> </a>LM_STRENGTH_239BIT
<br></td>
    <td><a name="903655"> </a>239
<br></td>
    <td><a name="903657"> </a>120
<br></td>
  </tr>
  <tr>
    <td><a name="903660"> </a>LM_STRENGTH_DEFAULT
<br></td>
    <td colspan=2 rowspan=1><a name="903662"> </a>Not public-key; SIGN=12 chars.
<br></td>
  </tr>
  <tr>
    <td><a name="903667"> </a>LM_STRENGTH_LICENSE_KEY
<br></td>
    <td colspan=2 rowspan=1><a name="903669"> </a>Uses FLEX<em>lm</em> license key.
<br></td>
  </tr>
</table>




<p>
  <a name="902255"> </a>
</p>

  </dl>
  <li><a name="900227"> </a>Save and close <code>lm_code.h</code>.
</ol>

<h3>
  <a name="900228"> </a>6.2	 Editing the makefile and lsvendor.c
</h3>

<ol type="1">
  <li><a name="900229"> </a>Open <code>i86_n3\makefile</code> in a text editor.
  <li><a name="900230"> </a>Change the vendor daemon name from <code>demo</code> to your own vendor daemon name. Change:
  <dl>
     <dt> <a name="900231"> </a><code>DAEMON = demo</code>
     <dt> <a name="900232"> </a>to:
     <dt> <a name="900233"> </a><code>DAEMON = </code><code><em>vendor</em></code>
     <dt> <a name="900234"> </a>where <code><em>vendor</em></code> is the same as <code>VENDOR_NAME</code> in <code>lm_code.h</code>. Otherwise, after <code>demo</code> is built by <code>make</code>, you'll need to rename it to <code><em>vendor</em></code>, where <code><em>vendor</em></code> is your vendor daemon name.
  </dl>
  <li><a name="900235"> </a>Optional--If your vendor daemon requires some customization (not normally needed), make modifications in <code>machind/lsvendor.c</code>.
</ol>

<h3>
  <a name="881005"> </a>6.3	 Building with Microsoft Visual C++
</h3>


<h4>
  <a name="898802"> </a>6.3.1	 Setting Up the C Development Environment
</h4>


<p>
  <a name="881006"> </a>Make sure that you have your Microsoft Visual C++ development environment correctly configured. If you don't have this compiler, you'll have to use the FLEXlm DLL (see <a href="all.htm#900330">Section 6.6.1, "Define FLEXLM_DLL</a>"). 
</p>

<ol type="1">
  <li><a name="899370"> </a>Check whether the <code>MSVCDIR</code> environment variable has been set to the main Microsoft Visual C++ folder and that your <code>PATH</code> variable contains the path to the Microsoft Visual C++ <code>bin</code> folder. For example, on Windows 95/98 you might add the following lines to your <code>autoexec.bat</code> file and on Windows NT you might add the following settings to your system environment via the Control Panel:
  <dl>
     <dt> <a name="899371"> </a><CODE>SET MSVCDIR=c:\progra~1\micros~1\vc98</CODE>
     <dt> <a name="899372"> </a><CODE>PATH=%PATH%;c:\progra~1\micros~1\vc98\bin</CODE>
  </dl>
  <li><a name="899373"> </a>If you are running on Windows 95/98, open a command window. Right-click in the upper left corner of the window and select Properties. Click the Memory tab. In the Initial Environment choice list, select 4096. Apply the changes. Close the command window.
  <li><a name="899374"> </a>Reboot your computer.
  <li><a name="899375"> </a>Open a command window. 
  <li><a name="899376"> </a>To set your environment for using Microsoft Visual C++, type:
<dl>    <dl>
       <dt> <a name="899377"> </a><CODE><code>vcvars32</code></CODE>
    </dl>
</dl></ol>

<h4>
  <a name="881008"> </a>6.3.2	 Building the Production FLEX<em>lm</em> SDK
</h4>


<p>
  <a name="899408"> </a>To build your FLEX<em>lm</em> SDK, in the command window, change to the <code>C:\Program Files\flexlm\v7.2\i86_n3</code> folder and type:
</p>

<dl><dl>    <dl>
       <dt> <a name="899409"> </a><CODE><code>build</code></CODE>
    </dl>
</dl></dl>
<p>
  <a name="899410"> </a>A list of files being built is displayed in the command window. This builds <code>lm_new.obj</code>, which contains security information from <code>lm_code.h</code> and is used to build your application, your vendor daemon, as well as the sample applications, <code>lmclient.exe</code> and <code>lmwin.exe</code>. <code>build.bat</code> itself only calls <code>nmake</code>. If you're familiar with <code>nmake</code>, you can run this directly. <code>nmake</code> uses the <code>i86_n3\makefile</code> to build all files which are out of date. If you've just edited <code>lm_code.h</code>, it will rebuild everything except your application.
</p>


<p>
  <a name="881010"> </a>If you've done this correctly, you should be able to generate a license file and use it with the sample applications, <code>lmclient.exe</code> or <code>lmwin.exe</code>.
</p>


<h4>
  <a name="881011"> </a>6.3.3	 Adding FLEX<em>lm</em> Calls to Your Application
</h4>


<p>
  <a name="881012"> </a>Modify your application code to call the license manager client routines. Add calls like the following to your application code:
</p>

<dl>  <dl>
     <dt> <a name="881013"> </a><CODE>#include "lmpolicy.h"</CODE>
     <dt> <a name="881014"> </a><CODE>/*...*/</CODE>
     <dt> <a name="881015"> </a><CODE>if (CHECKOUT(LM_RESTRICTIVE, "myfeature", "1.0", "license.dat"))</CODE>
     <dt> <a name="881016"> </a><CODE>{</CODE>
     <dt> <a name="881017"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PERROR("Checkout failed");</CODE>
     <dt> <a name="886050"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);</CODE>
     <dt> <a name="886051"> </a><CODE>}</CODE>
     <dt> <a name="886052"> </a><CODE>/*...*/</CODE>
     <dt> <a name="886053"> </a><CODE>CHECKIN();</CODE>
  </dl>
</dl>
<p>
  <a name="886057"> </a>See <code>lmclient.c</code> or <a href="all.htm#881297">Chapter&nbsp;7, "Trivial API,"</a> for a full description of the parameters.
</p>


<h4>
  <a name="881027"> </a>6.3.4	 Compiling Your Object File
</h4>


<h5>
  <a name="881028"> </a>Adding the FLEX<em>lm</em> Include Directory
</h5>


<p>
  <a name="881029"> </a>Add <code>"C:\Program files\FLEXlm\v7.2\machind"</code> to your include path. If you use <code>CL</code> on the command line or in a batch file, add <code>/I&nbsp;"C:\Program&nbsp;Files\FLEXlm\v7.2\machind"</code> to your <code>CL</code> command line.
</p>


<p>
  <a name="881030"> </a>If you use the IDE (GUI development environment), add the include directory in Tools<img src="graphics/arrwrite.gif">Options<img src="graphics/arrwrite.gif">Directories. Pick include files from the choice list and add the full path to the <code>machind</code> directory.
</p>


<h5>
  <a name="881031"> </a>Selecting /MT or /MD (Multi-threaded Static or Shared Libraries)
</h5>


<p>
  <a name="881032"> </a>FLEX<em>lm</em> requires multi-threaded libraries. The <code>CL</code> compiler /MT switch indicates the static multi-threaded C library (preferred) and the /MD switch indicates the shared multi-threaded C library. One or the other must be used when compiling. If you indicate /MT, then you must link with <code>libcmt.lib</code> and <code>lmgr.lib</code>. If you indicate /MD, then you must link with <code>msvcrt.lib</code> and <code>lmgr_md.lib</code>. 
</p>


<p>
  <a name="902658"> </a>If you use the command line, make sure /MT (or /MD) is included in the <code>CL</code> command line.
</p>


<p>
  <a name="881034"> </a>If you use the IDE, in Project<img src="graphics/arrwrite.gif">Settings, pick the C/C++ tab. Then make sure that /MT (or /MD) is specified in the switches listed in the bottom window. In more current versions of Microsoft Visual C++, there's a choice list for multi-threaded.
</p>


<h5>
  <a name="881038"> </a>Compiling in the IDE
</h5>

<ol type="1">
  <li><a name="881039"> </a>Make an empty project:
  <dl>
     <dt> <a name="881040"> </a>File <img src="graphics/arrwrite.gif"> New
     <dt> <a name="881041"> </a>Project name: lmwin
     <dt> <a name="881042"> </a>Select Win32 Application.
     <dt> <a name="881043"> </a>Click OK.
  </dl>
  <li><a name="881044"> </a>Add source file.
  <dl>
     <dt> <a name="881045"> </a>Project <img src="graphics/arrwrite.gif"> Add to Project <img src="graphics/arrwrite.gif"> Files...
     <dt> <a name="881046"> </a>C:\Program Files\FLEXlm\v7.2\machind\lmwin.c
  </dl>
  <li><a name="881047"> </a>Add the include directory.
  <dl>
     <dt> <a name="881048"> </a>Tools <img src="graphics/arrwrite.gif"> Options <img src="graphics/arrwrite.gif"> Directories <img src="graphics/arrwrite.gif"> Include Directories
     <dt> <a name="881049"> </a>C:\Program Files\FLEXlm\v7.2\machind
  </dl>
  <li><a name="881050"> </a>Specify multi-threaded.
  <dl>
     <dt> <a name="881051"> </a>(Microsoft Visual C++ v6+): Specify Multi-threaded
     <dt> <a name="881052"> </a>Otherwise: Change /ML or /MT to /MD in the options window.
  </dl>
  <li><a name="881053"> </a>Compile.
  <dl>
     <dt> <a name="881054"> </a>File <img src="graphics/arrwrite.gif"> Recent Files <img src="graphics/arrwrite.gif"> lmwin.c
     <dt> <a name="881055"> </a>Build <img src="graphics/arrwrite.gif"> Compile lmwin.c
  </dl>
</ol>

<h5>
  <a name="902666"> </a>Compiling on the Command Line
</h5>

<dl>  <dl>
     <dt> <a name="902667"> </a><CODE>c:&gt;cl /nologo /c /O1 /I../machind /MT  ../machind/lmwin.c</CODE>
  </dl>
</dl>
<h4>
  <a name="881056"> </a>6.3.5	 Linking the Client Application
</h4>


<h5>
  <a name="881066"> </a>IDE Settings
</h5>


<p>
  <a name="881067"> </a>Change the following settings:
</p>

<ol type="1">
  <li><a name="881068"> </a>Library path
  <dl>
     <dt> <a name="881069"> </a>Tools <img src="graphics/arrwrite.gif"> Options <img src="graphics/arrwrite.gif"> Directories
     <dt> <a name="881070"> </a>Pick the Library Files choice list, and add: 
     <dt> <a name="881071"> </a>C:\Program Files\FLEXlm\v7.2\i86_n3
  </dl>
  <li><a name="881072"> </a>Libraries and options
  <dl>
     <dt> <a name="881073"> </a>Project <img src="graphics/arrwrite.gif"> Settings <img src="graphics/arrwrite.gif"> Link
     <dt> <a name="881074"> </a>Make sure that the <code>/NODEFAULTLIB</code> switch and one of the sets of FLEX<em>lm</em> and Microsoft Visual C++ libraries listed below are included in the list of object/library modules.

<p>
  <a name="898863"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="898909"> </a><strong>
<br></strong></td>
    <td><a name="898914"> </a>FLEX<em>lm</em><strong> 
<br>Object File
<br></strong></td>
    <td><a name="898919"> </a>FLEX<em>lm</em><strong> Client 
<br>Libraries
<br></strong></td>
    <td><a name="898921"> </a><strong>MSVC++
<br></strong><a name="898922"> </a>Libraries
<br></td>
  </tr>
  <tr>
    <td><a name="898925"> </a>Standard
<br></td>
    <td><a name="898928"> </a><code>lm_new.obj
<br></code></td>
    <td><a name="898930"> </a><code>lmgr.lib
<br></code></td>
    <td><a name="898932"> </a><code>libcmt.lib</code> (/MT)
<br><a name="898933"> </a><code>oldnames.lib
<br></code><a name="898934"> </a><code>kernel32.lib
<br></code><a name="898935"> </a><code>user32.lib
<br></code><a name="898936"> </a><code>netapi32.lib
<br></code><a name="898937"> </a><code>advapi32.lib
<br></code><a name="898938"> </a><code>gdi32.lib
<br></code><a name="898939"> </a><code>comdlg32.lib
<br></code><a name="898940"> </a><code>comctl32.lib
<br></code><a name="905473"> </a><code>wsock32.lib
<br></code></td>
  </tr>
  <tr>
    <td><a name="903806"> </a>Add for 
<br>CRO
<br></td>
    <td><a name="903808"> </a><code>
<br></code></td>
    <td><a name="903812"> </a><code>libcrvs.lib
<br></code><a name="903814"> </a><code>libsb.lib
<br></code></td>
    <td><a name="903816"> </a><code>
<br></code></td>
  </tr>
  <tr>
    <td><a name="903790"> </a>Add for 
<br>static 
<br>FLEX<em>lock
<br></em></td>
    <td><a name="903792"> </a>
<br></td>
    <td><a name="903823"> </a><code>flock.lib
<br></code></td>
    <td><a name="903796"> </a>
<br></td>
  </tr>
  <tr>
    <td><a name="898943"> </a>For /MD
<br></td>
    <td><a name="898946"> </a>Replace 
<br><code>lm_new.obj</code> 
<br>with 
<br><code>lm_new_md.
<br>obj</code>
<br></td>
    <td><a name="898948"> </a>Replace Standard 
<br><code>lmgr.lib</code> with 
<br><code>lmgr_md.lib</code>
<br></td>
    <td><a name="898950"> </a>Replace Standard 
<br><code>libcmt.lib</code> with 
<br><code>msvcrt.lib</code> (/MD)
<br></td>
  </tr>
  <tr>
    <td><a name="898960"> </a>For CRO 
<br>/MD
<br></td>
    <td><a name="898963"> </a><code>
<br></code></td>
    <td><a name="903776"> </a>Add to Standard:
<br><a name="903778"> </a><code>libcrvs_md.lib
<br></code><a name="898967"> </a><code>libsb_md.lib
<br></code></td>
    <td><a name="903825"> </a>Replace Standard 
<br><code>libcmt.lib</code> with 
<br><code>msvcrt.lib</code> (/MD)
<br></td>
  </tr>
</table>




<p>
  <a name="886094"> </a>
</p>

  </dl>
  <li><a name="904256"> </a>Link
  <dl>
     <dt> <a name="881081"> </a>Build <img src="graphics/arrwrite.gif"> Build lmwin.exe
  </dl>
</ol>

<h5>
  <a name="898838"> </a>Linking on the Command Line
</h5>


<p>
  <a name="898839"> </a>On the command line, the <code>lmwin</code> link line for a non-CRO, /MT example looks like:
</p>

<dl>  <dl>
     <dt> <a name="898840"> </a><CODE>C:&gt; LINK /nologo /NODEFAULTLIB /out:lmwin.exe lmwin.obj lm_new.obj lmwin.res lmgr.lib oldnames.lib libcmt.lib kernel32.lib user32.lib netapi32.lib advapi32.lib gdi32.lib comdlg32.lib comctl32.lib wsock32.lib</CODE>
  </dl>
</dl>
<p>
  <a name="899073"> </a>If you get a link error complaining about missing <code>l_n36_buf</code>, the problem is that you need to add <code>lm_new.obj</code> to your link list.
</p>


<h3>
  <a name="900286"> </a>6.4	 Creating a License File
</h3>

<ol type="1">
  <li><a name="900287"> </a>Open <code>i86_n3\license.dat</code> in a text editor.
  <li><a name="900288"> </a>Modify the SERVER, VENDOR, and FEATURE lines in <code>license.dat</code> to include server information and information for the features that your application checks out. In place of a signature on each FEATURE line, enter <code>SIGN=0</code>. See <a href="all.htm#881928">Chapter&nbsp;12, "The License File,"</a> for information about the allowed fields and syntax of a license file.
  <li><a name="900292"> </a>Save <code>license.dat</code>.
  <li><a name="900293"> </a>Run <code>lmcrypt.exe</code> to calculate the signatures and create a valid license file.
</ol>

<h3>
  <a name="900294"> </a>6.5	 Testing Your Application
</h3>

<ol type="1">
  <li><a name="900295"> </a>Put your application's license file where your application expects to find it.
  <li><a name="900296"> </a>If you have counted licenses, start a license server that uses the application's license file.
  <li><a name="900297"> </a>Start your application and perform a task that checks out one of your licenses.
</ol>

<h3>
  <a name="900312"> </a>6.6	 Alternative: Using the FLEX<em>lm</em> Shared Library (DLL)
</h3>


<p>
  <a name="900313"> </a>If your application does not use Microsoft Visual C++, the best alternative is to use Microsoft Visual C++ to make your own DLL, linking in the FLEX<em>lm</em> static library.
</p>


<p>
  <a name="900320"> </a>If you cannot make your own DLL, you can use the FLEX<em>lm</em> shared library (FLEXLM_DLL) for supporting alternate languages, like Visual Basic, or a different C compiler, like Borland. Any compiler that can use Windows DLLs can use the FLEXLM_DLL.
</p>


<p>
  <a name="900571"> </a><HR WIDTH=75%><FONT COLOR=RED>Caution:	 Use of the FLEX<em>lm</em> DLL on Windows remains strongly discouraged. However, for companies that choose to use the DLL, the security provided by <code>lm_new.obj</code> is now available with the DLL, and is therefore better at preventing counterfeiting than previous version. Note that this requires using the FLEXible API (<font  face="Arial" size="2">lc_</font><em>xxx</em><font  face="Arial" size="2">()</font>) and linking with a single <code>.obj</code> file. </FONT><HR WIDTH=75%>


<p>
  <a name="900327"> </a>Nearly all the steps for using the shared library are same as in <a href="all.htm#899664">Section 6, "Incorporating Production FLEXlm into a Windows Application</a>." The following sections describe the differences.
</p>


<h4>
  <a name="900330"> </a>6.6.1	 Define FLEXLM_DLL
</h4>


<p>
  <a name="900331"> </a>If you're using the Trivial or Simple API, when compiling your source code, you must make sure the FLEXLM_DLL is defined. You can do this by:
</p>


<p>
  <a name="900348"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="900334"> </a>Command line
<br></td>
    <td><a name="900336"> </a><code>cl /DFLEXLM_DLL
<br></code></td>
  </tr>
  <tr>
    <td><a name="900338"> </a>In the source code
<br></td>
    <td><a name="900343"> </a>Add <code>#define FLEXLM_DLL</code> before any FLEX<em>lm</em> 
<br>headers are included.
<br></td>
  </tr>
  <tr>
    <td><a name="900345"> </a>In the IDE
<br></td>
    <td><a name="900347"> </a>Project<img src="graphics/arrwrite.gif">Settings<img src="graphics/arrwrite.gif">C/C++<img src="graphics/arrwrite.gif"><br>
<br>Preprocessor Definitions<br>
<br>Add FLEXLM_DLL
<br></td>
  </tr>
</table>




<p>
  <a name="900349"> </a>
</p>


<p>
  <a name="900588"> </a>To take advantage of the increased DLL security in v7.2, use the FLEXible API (see the <em>FLEXlm Reference Manual</em>). The only change from previous versions is that you must now add <code>lc_new_job_arg2</code> as the second argument to <font  face="Arial" size="2">lc_new_job()</font>, as in <code>machind/lmflex.c</code>:
</p>

<dl>  <dl>
     <dt> <a name="900589"> </a><CODE>if (lc_new_job(0, lc_new_job_arg2, &amp;code, &amp;lm_job))</CODE>
     <dt> <a name="900590"> </a><CODE>{</CODE>
    <dl>
       <dt> <a name="900591"> </a><CODE>lc_perror(lm_job, "lc_new_job failed"); </CODE>
       <dt> <a name="900592"> </a><CODE>exit(lc_get_errno(lm_job));</CODE>
    </dl>
     <dt> <a name="900593"> </a><CODE>}</CODE>
  </dl>
  </dl>

<p>
  <a name="900594"> </a>You can use <code>lc_new_job_arg2</code> in both DLL and non-DLL code. Then, you must link <code>lm_new.obj </code>into your application. If you cannot link an object file into your application, then you cannot take advantage of this security feature, and you must call <font  face="Arial" size="2">lc_init()</font>, as in the past.
</p>


<h4>
  <a name="900350"> </a>6.6.2	 Link with lmgr327b.lib
</h4>


<p>
  <a name="900353"> </a>Link with <code>lmgr327b.lib</code> instead of <code>lmgr.lib</code>, as outlined in <a href="all.htm#881056">Section 6.3.5, "Linking the Client Application</a>." 
</p>


<h4>
  <a name="900355"> </a>6.6.3	 Ship lmgr327b.dll
</h4>


<p>
  <a name="900356"> </a>Ship <code>lmgr327b.dll</code> with your application. This must be in the same directory as your application or in the user's <code>PATH</code>.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="881297"> </a>Chapter 7 <br>Trivial API
</h2>
<hr>


<h3>
  <a name="881299"> </a>7.1	 Overview of Trivial API Calls
</h3>


<p>
  <a name="881300"> </a>The Trivial API consists of macros that call the Simple API. What makes this API trivial is the simplified arguments to the macros. The only required header file is <code>lmpolicy.h</code>, and no other macros or function calls are needed.
</p>


<p>
  <a name="886154"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906431"> </a><font  face="Arial" size="2"><a href="all.htm#906423">CHECKIN()</a>
<br></font></td>
    <td><a name="906436"> </a>Releases a license and frees all FLEX<em>lm</em> memory.
<br></td>
  </tr>
  <tr>
    <td><a name="886158"> </a><font  face="Arial" size="2"><a href="all.htm#881335">CHECKOUT()</a>
<br></font></td>
    <td><a name="886160"> </a>Acquires a license.
<br></td>
  </tr>
  <tr>
    <td><a name="906438"> </a><font  face="Arial" size="2"><a href="all.htm#881375">ERRSTRING()</a>
<br></font></td>
    <td><a name="906440"> </a>Returns a string describing the most recent error.
<br></td>
  </tr>
  <tr>
    <td><a name="886162"> </a><font  face="Arial" size="2"><a href="all.htm#881387">HEARTBEAT()</a>
<br></font></td>
    <td><a name="886164"> </a>Sends a heartbeat to the server.
<br></td>
  </tr>
  <tr>
    <td><a name="886166"> </a><font  face="Arial" size="2"><a href="all.htm#881401">PERROR()</a>
<br></font></td>
    <td><a name="886168"> </a>Presents current error message to user.
<br></td>
  </tr>
  <tr>
    <td><a name="886201"> </a><font  face="Arial" size="2"><a href="all.htm#881409">PWARN()</a>
<br></font></td>
    <td><a name="886203"> </a>Presents current warning message to user.
<br></td>
  </tr>
  <tr>
    <td><a name="886174"> </a><font  face="Arial" size="2"><a href="all.htm#881417">WARNING()</a>
<br></font></td>
    <td><a name="886176"> </a>Returns a string describing the most recent warning.
<br></td>
  </tr>
</table>




<p>
  <a name="886155"> </a>
</p>


<p>
  <a name="881310"> </a>To use the Trivial API, simply include <code>lmpolicy.h</code> at the top of your source file. With the Trivial API, only one feature can be checked out at a time from a single process.
</p>


<p>
  <a name="881314"> </a>Where possible, this is the preferred FLEX<em>lm</em> API to use in your application.
</p>


<p>
  <a name="881315"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 You cannot mix Trivial API calls with either Simple or FLEXible API calls.</FONT><HR WIDTH=75%>


<h3>
  <a name="881316"> </a>7.2	 Trivial API Example Program
</h3>


<p>
  <a name="886228"> </a>The following is a complete example of the FLEX<em>lm</em> calls required in an application which uses the Trivial API:
</p>

<dl>  <dl>
     <dt> <a name="881321"> </a><CODE>#include "lmpolicy.h"</CODE>
     <dt> <a name="881322"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*...*/</CODE>
     <dt> <a name="881323"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CHECKOUT(LM_RESTRICTIVE, "myfeature", "1.0", "license.dat"))</CODE>
     <dt> <a name="881324"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="881325"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PERROR("Checkout failed");</CODE>
     <dt> <a name="881326"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(-1);</CODE>
     <dt> <a name="881327"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="881328"> </a><CODE>/*</CODE>
     <dt> <a name="881329"> </a><CODE>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkout succeeded. Actual application code here</CODE>
     <dt> <a name="881330"> </a><CODE>&nbsp;*/</CODE>
     <dt> <a name="881331"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*...*/</CODE>
     <dt> <a name="881332"> </a><CODE></CODE>
     <dt> <a name="881333"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CHECKIN();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Done with "myfeature", check it back in. */</CODE>
  </dl>
</dl>
<h3>
  <a name="906423"> </a>7.3	 CHECKIN()
</h3>


<h5>
  <a name="906424"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="906425"> </a><CODE>(void) CHECKIN()</CODE>
  </dl>
</dl>
<h5>
  <a name="906426"> </a>Description
</h5>


<p>
  <a name="906427"> </a>Releases the license for the feature and frees memory associated with the checkout.
</p>


<h3>
  <a name="881335"> </a>7.4	 CHECKOUT()
</h3>


<h5>
  <a name="881336"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881338"> </a><CODE><code><em>status</em></code> = CHECKOUT(<code><em>policy</em></code>, <code><em>feature</em></code>, <code><em>version</em></code>, <code><em>license_file_path</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881339"> </a>Description
</h5>


<p>
  <a name="881340"> </a>Acquires a license for a feature.
</p>


<h5>
  <a name="881341"> </a>Parameters
</h5>


<p>
  <a name="886229"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886233"> </a><code>(int) </code><code><em>policy
<br></em></code></td>
    <td><a name="886235"> </a>See <a href="all.htm#900056">Section 4.6, "License Policies</a>." Example: 
<br>LM_RESTRICTIVE.
<br></td>
  </tr>
  <tr>
    <td><a name="886237"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="886239"> </a>The feature name to check out.
<br></td>
  </tr>
  <tr>
    <td><a name="886241"> </a><code>(char *) </code><code><em>version
<br></em></code></td>
    <td><a name="886243"> </a>The version of the feature to check out. This is 
<br>a string in floating-point format (e.g., 
<br>12345.123). If the license in the license file 
<br>has the same version number or a higher 
<br>version number, the checkout will succeed.
<br><a name="886269"> </a>GLOBEtrotter recommends that this version 
<br>number be a license version level and <em>not</em> the 
<br>application's version number. This version 
<br>number should only be changed when you 
<br>want old licenses to no longer work with a 
<br>new version of the software.
<br></td>
  </tr>
  <tr>
    <td><a name="886245"> </a><code>(char *) 
<br></code><code><em>license_file_path
<br></em></code></td>
    <td><a name="886247"> </a>The default location for the license file. 
<br><a name="886279"> </a>If 0, this argument is unused.
<br></td>
  </tr>
</table>




<p>
  <a name="886230"> </a>
</p>


<h5>
  <a name="886305"> </a>Return
</h5>


<p>
  <a name="886314"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886308"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="886313"> </a>0 if successful; otherwise, the FLEX<em>lm</em> error 
<br>number.
<br></td>
  </tr>
</table>




<p>
  <a name="886315"> </a>
</p>


<p>
  <a name="881349"> </a>The application will look in the following places for the license file: 
</p>

<ul>
  <li><a name="886285"> </a>Location specified by the <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> and/or <code>LM_LICENSE_FILE</code> environment variable or registry settings.

  <li><a name="886286"> </a><code><em>license_file_path</em></code> specified here

</ul>

<p>
  <a name="886287"> </a>Upon success, the path to the license file used is set in <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> in the registry on Windows (<code>\HKEY_LOCAL_MACHINE\SOFTWARE\FLEXlm License Manager</code>) and <code>$HOME/.flexlmrc</code> on UNIX. 
</p>


<h5>
  <a name="881359"> </a>See also
</h5>

<ul>
  <li><a name="881363"> </a><a href="all.htm#900056">Section 4.6, "License Policies</a>"

  <li><a name="881367"> </a><a href="all.htm#900080">Section 4.7, "Policy Modifiers</a>"

</ul>

<h3>
  <a name="881375"> </a>7.5	 ERRSTRING()
</h3>


<h5>
  <a name="881376"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881377"> </a><CODE><code><em>string</em></code> = ERRSTRING()</CODE>
  </dl>
</dl>
<h5>
  <a name="881378"> </a>Description
</h5>


<p>
  <a name="881382"> </a>Returns a string describing the last FLEX<em>lm</em> error.
</p>


<h5>
  <a name="881383"> </a>Return
</h5>


<p>
  <a name="886318"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886322"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886324"> </a>An explanatory string.
<br></td>
  </tr>
</table>




<p>
  <a name="886319"> </a>
</p>


<h3>
  <a name="881387"> </a>7.6	 HEARTBEAT()
</h3>


<h5>
  <a name="881388"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881389"> </a><CODE><code><em>status</em></code> = HEARTBEAT()</CODE>
  </dl>
</dl>
<h5>
  <a name="881390"> </a>Description
</h5>


<p>
  <a name="881391"> </a>Exchanges heartbeat messages with the server. If the server goes down and later comes back up, <font  face="Arial" size="2">HEARTBEAT()</font><em> </em>will automatically reconnect and check out the license. On failure, returns the number of failed attempts to reconnect to the server. On failure, applications should at a minimum notify the user of the failure. For a restrictive policy, applications may exit after a certain number of failures. In addition, applications may want to exit if reconnections succeed more than three or four times in a relatively short period (e.g., ten minutes), which may indicate a user restarting the license server in an attempt to acquire extra licenses. Do not call <font  face="Arial" size="2">CHECKOUT()</font> on failure from <font  face="Arial" size="2">HEARBEAT()</font>--this is not necessary and will cause problems if attempted.
</p>


<p>
  <a name="881392"> </a><font  face="Arial" size="2">HEARTBEAT()</font> should not be called unless LM_MANUAL_HEARTBEAT is set in the <font  face="Arial" size="2">CHECKOUT()</font> call. If LM_MANUAL_HEARTBEAT is not set, then <font  face="Arial" size="2">HEARTBEAT()</font> is called automatically.
</p>


<h5>
  <a name="881393"> </a>Return
</h5>


<p>
  <a name="886330"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886334"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="886336"> </a>0 if successful; otherwise, it returns the 
<br>number of failed attempts to reconnect to the 
<br>server.
<br></td>
  </tr>
</table>




<p>
  <a name="886331"> </a>
</p>


<h5>
  <a name="881395"> </a>See also
</h5>

<ul>
  <li><a name="881399"> </a><a href="all.htm#900088">Section 4.7.1, "LM_MANUAL_HEARTBEAT</a>"

</ul>

<h3>
  <a name="881401"> </a>7.7	 PERROR()
</h3>


<h5>
  <a name="881402"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881403"> </a><CODE>(void) PERROR(<code><em>string</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881404"> </a>Description
</h5>


<p>
  <a name="881405"> </a>Presents <code><em>string</em></code> and a description of the most recent error to the user. On Windows this appears in a dialog; on other systems, it prints to stderr.
</p>


<h5>
  <a name="881406"> </a>Parameters
</h5>


<p>
  <a name="886342"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886346"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886348"> </a>A string describing the error context.
<br></td>
  </tr>
</table>




<p>
  <a name="886343"> </a>
</p>


<h3>
  <a name="881409"> </a>7.8	 PWARN()
</h3>


<h5>
  <a name="881410"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881411"> </a><CODE>(void) PWARN(<code><em>string</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881412"> </a>Description
</h5>


<p>
  <a name="881413"> </a>Presents <code><em>string</em></code> and a description of the most recent warning to the user. On Windows this appears in a dialog; on other systems, it prints to stderr. This is useful with policy set to LM_LENIENT or LM_FAILSAFE. Nothing is printed if there is no warning.
</p>


<h5>
  <a name="881414"> </a>Parameters
</h5>


<p>
  <a name="886354"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886358"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886360"> </a>A string describing the error context.
<br></td>
  </tr>
</table>




<p>
  <a name="886355"> </a>
</p>


<h3>
  <a name="881417"> </a>7.9	 WARNING()
</h3>


<h5>
  <a name="881418"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881419"> </a><CODE><code><em>string</em></code> = WARNING()</CODE>
  </dl>
</dl>
<h5>
  <a name="881420"> </a>Description
</h5>


<p>
  <a name="881424"> </a>Returns a string describing the last FLEX<em>lm</em> warning.
</p>


<h5>
  <a name="881425"> </a>Return
</h5>


<p>
  <a name="886370"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886374"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886376"> </a>An explanatory string. This is useful with 
<br>policy set to LM_LENIENT or 
<br>LM_FAILSAFE.
<br></td>
  </tr>
</table>




<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="881428"> </a>Chapter 8 <br>Simple API
</h2>
<hr>


<p>
  <a name="881430"> </a>The Simple API can do nearly everything the FLEXible API can do. Use this API if your application requires checking out more than one feature name at a time or if you need to acquire more than one license for a feature.
</p>


<p>
  <a name="881431"> </a>This API requires that you include the <code>lmpolicy.h</code> header file.
</p>


<h3>
  <a name="881432"> </a>8.1	 Simple API Library Routines
</h3>


<p>
  <a name="886416"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906485"> </a><font  face="Arial" size="2"><a href="all.htm#906499">lp_checkin()</a>
<br></font></td>
    <td><a name="906490"> </a>Releases a license and frees all FLEX<em>lm</em> memory.
<br></td>
  </tr>
  <tr>
    <td><a name="886420"> </a><font  face="Arial" size="2"><a href="all.htm#881471">lp_checkout()</a>
<br></font></td>
    <td><a name="886422"> </a>Acquires a license.
<br></td>
  </tr>
  <tr>
    <td><a name="906492"> </a><font  face="Arial" size="2"><a href="all.htm#881510">lp_errstring()</a>
<br></font></td>
    <td><a name="906494"> </a>Returns a string describing the most recent error.
<br></td>
  </tr>
  <tr>
    <td><a name="886424"> </a><font  face="Arial" size="2"><a href="all.htm#881524">lp_heartbeat()</a>
<br></font></td>
    <td><a name="886426"> </a>Sends a heartbeat to the server.
<br></td>
  </tr>
  <tr>
    <td><a name="886428"> </a><font  face="Arial" size="2"><a href="all.htm#881548">lp_perror()</a>
<br></font></td>
    <td><a name="886430"> </a>Presents current error message to user.
<br></td>
  </tr>
  <tr>
    <td><a name="886432"> </a><font  face="Arial" size="2"><a href="all.htm#881557">lp_pwarn()</a>
<br></font></td>
    <td><a name="886434"> </a>Presents current warning message to user.
<br></td>
  </tr>
  <tr>
    <td><a name="886444"> </a><font  face="Arial" size="2"><a href="all.htm#881566">lp_warning()</a>
<br></font></td>
    <td><a name="886446"> </a>Returns a string describing the most recent 
<br>warning.
<br></td>
  </tr>
</table>




<p>
  <a name="886417"> </a>
</p>


<p>
  <a name="881442"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 You cannot mix Simple API calls with either Trivial or FLEXible API calls.</FONT><HR WIDTH=75%>


<h3>
  <a name="881443"> </a>8.2	 Simple API Example Program
</h3>


<p>
  <a name="881447"> </a>The following is a complete example of the FLEX<em>lm</em> calls required in an application that uses the Simple API. The primary differences between this and the Trivial API example are:
</p>

<ul>
  <li><a name="881448"> </a>The setup is a bit more complicated.

  <li><a name="881449"> </a>The args to <font  face="Arial" size="2">lp_checkout()</font> are more complicated than to <font  face="Arial" size="2">CHECKOUT()</font>.

  <li><a name="881450"> </a>You can check out more than one feature simultaneously, or more than one license of a feature (although neither of these are illustrated in the example).

  <dl>
     <dt> <a name="881451"> </a><CODE>#include "lmpolicy.h"</CODE>
     <dt> <a name="881452"> </a><CODE>LP_HANDLE *lp_handle;</CODE>
     <dt> <a name="881453"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*...*/</CODE>
     <dt> <a name="881454"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp_checkout(LPCODE, LM_RESTRICTIVE|LM_MANUAL_HEARTBEAT,</CODE>
     <dt> <a name="881455"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"myfeature","1.0", 1, "license.dat", &amp;lp_handle))</CODE>
     <dt> <a name="886493"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</CODE>
     <dt> <a name="881457"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, "Checkout failed: %s",</CODE>
     <dt> <a name="881458"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp_errstring(lp_handle));</CODE>
     <dt> <a name="881459"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(-1);</CODE>
     <dt> <a name="881460"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</CODE>
     <dt> <a name="881461"> </a><CODE>/*</CODE>
     <dt> <a name="881462"> </a><CODE>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkout succeeded. Actual application code here</CODE>
     <dt> <a name="881463"> </a><CODE>&nbsp;*/</CODE>
     <dt> <a name="881464"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*...*/</CODE>
     <dt> <a name="881465"> </a><CODE>/*</CODE>
     <dt> <a name="881466"> </a><CODE>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Done with "myfeature", check it back in.</CODE>
     <dt> <a name="881467"> </a><CODE>&nbsp;*/</CODE>
     <dt> <a name="881468"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp_checkin(lp_handle);</CODE>
     <dt> <a name="881469"> </a><CODE></CODE>
  </dl>
</ul>

<h3>
  <a name="906499"> </a>8.3	 lp_checkin()
</h3>


<h5>
  <a name="906500"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="906501"> </a><CODE>(void) lp_checkin(lp_handle)</CODE>
  </dl>
</dl>
<h5>
  <a name="906502"> </a>Description
</h5>


<p>
  <a name="906503"> </a>Releases a license, and frees memory associated with the corresponding checkout. <font  face="Arial" size="2">lp_checkin()</font> should be called even if the checkout fails, in order to free associated memory and resources.
</p>


<h5>
  <a name="906504"> </a>Parameter
</h5>


<p>
  <a name="906510"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="906507"> </a><code>(LP_HANDLE *) lp_handle
<br></code></td>
    <td><a name="906509"> </a>The handle from the <font  face="Arial" size="2">lp_checkout()</font> 
<br>call.
<br></td>
  </tr>
</table>




<p>
  <a name="906511"> </a>
</p>


<h3>
  <a name="881471"> </a>8.4	 lp_checkout()
</h3>


<h5>
  <a name="881472"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881473"> </a><CODE>#include "lmpolicy.h"</CODE>
     <dt> <a name="881474"> </a><CODE>LP_HANDLE *lp_handle;</CODE>
     <dt> <a name="881475"> </a><CODE><code><em>status</em></code> = lp_checkout(LPCODE, <code><em>policy</em></code>, <code><em>feature</em></code>, <code><em>version</em></code>, <code><em>num_lic</em></code>,</CODE>
     <dt> <a name="886496"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code><em>license_file_path</em></code>, &amp;lp_handle)</CODE>
  </dl>
</dl>
<h5>
  <a name="881478"> </a>Description
</h5>


<p>
  <a name="881479"> </a>Acquires a license for a feature.
</p>


<h5>
  <a name="881480"> </a>Parameters
</h5>


<p>
  <a name="886498"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886502"> </a><code>(LPCODE_HANDLE *) LPCODE
<br></code></td>
    <td><a name="886504"> </a>From the <code>lmpolicy.h</code> include file. 
<br>Use the literal <code>LPCODE</code>.
<br></td>
  </tr>
  <tr>
    <td><a name="886506"> </a><code>(int) </code><code><em>policy
<br></em></code></td>
    <td><a name="886508"> </a>See <a href="all.htm#900056">Section 4.6, "License Policies</a>." 
<br>Example: LM_RESTRICTIVE.
<br></td>
  </tr>
  <tr>
    <td><a name="886510"> </a><code>(char *) </code><code><em>feature
<br></em></code></td>
    <td><a name="886512"> </a>The desired feature name to check 
<br>out.
<br></td>
  </tr>
  <tr>
    <td><a name="886514"> </a><code>(char *) </code><code><em>version
<br></em></code></td>
    <td><a name="886516"> </a>The version of the feature to check 
<br>out. This is a string in floating-point 
<br>format (e.g., 12345.123). If the 
<br>license in the license file has the 
<br>same version number or a higher 
<br>version number, the checkout will 
<br>succeed.
<br><a name="886579"> </a>GLOBEtrotter recommends that this 
<br>version number be a license version 
<br>level and <em>not</em> the application's 
<br>version number. This version 
<br>number should only be changed 
<br>when you want old licenses to no 
<br>longer work with a new version of 
<br>the software
<br></td>
  </tr>
  <tr>
    <td><a name="886518"> </a><code>(int) </code><code><em>num_lic
<br></em></code></td>
    <td><a name="886520"> </a>The number of licenses to check out. 
<br>Usually this number is 1.
<br></td>
  </tr>
  <tr>
    <td><a name="886522"> </a><code>(char *) 
<br></code><code><em>license_file_path
<br></em></code></td>
    <td><a name="886524"> </a>The expected location of the license 
<br>file. The application will look in the 
<br>following places for the license file: 
<br>the location specified by the 
<br><code><em>VENDOR</em></code><code>_LICENSE_FILE</code> and/or 
<br><code>LM_LICENSE_FILE</code> environment 
<br>and/or registry variables, this default 
<br>location, then the FLEX<em>lm</em> default 
<br>(<code>/usr/local/flexlm/licenses/
<br>license.dat</code> for UNIX or 
<br><code>C:\flexlm\license.dat</code> for 
<br>PCs). It is highly recommended that 
<br>the expected location of the license 
<br>file be set to a place in your 
<br>product's installation hierarchy. The 
<br>application may need to do some 
<br>work to determine the exact path at 
<br>runtime.
<br><a name="886596"> </a>If 0, this argument is unused. 
<br></td>
  </tr>
  <tr>
    <td><a name="886526"> </a><code>pointer to <br>
<br>(LP_HANDLE *) lp_handle
<br></code></td>
    <td><a name="886605"> </a>This is the return handle, and is used 
<br>for subsequent calls that apply to 
<br>this checkout, e.g., <font  face="Arial" size="2">lp_checkin()</font>, 
<br><font  face="Arial" size="2">lp_errstring()</font>, etc. If <font  face="Arial" size="2">lp_checkout()</font> is 
<br>called more than once, separate 
<br><code>lp_handle</code> variables must be 
<br>declared and used, and the 
<br>corresponding handle must be used 
<br>with the other <font  face="Arial" size="2">lp_</font><em>xxx</em><font  face="Arial" size="2">()</font> (Simple API) 
<br>calls.
<br></td>
  </tr>
</table>




<p>
  <a name="886553"> </a>
</p>


<p>
  <a name="881495"> </a>Upon success, the path to the license file used is set in <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> in the registry on Windows (<code>\HKEY_LOCAL_MACHINE\SOFTWARE\FLEXlm License Manager</code>) and <code>$HOME/.flexlmrc</code> on UNIX (v7+).
</p>


<h5>
  <a name="881496"> </a>Return
</h5>


<p>
  <a name="886612"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886616"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="886618"> </a>0 if successful; otherwise, the FLEX<em>lm</em> error 
<br>number.
<br></td>
  </tr>
</table>




<p>
  <a name="886613"> </a>
</p>


<p>
  <a name="904478"> </a>To check out two features:
</p>

<dl>  <dl>
     <dt> <a name="904479"> </a><CODE>LP_HANDLE *lp_handle1;</CODE>
     <dt> <a name="904483"> </a><CODE>LP_HANDLE *lp_handle2;</CODE>
     <dt> <a name="904484"> </a><CODE>lp_checkout(LPCODE, LM_RESTRICTIVE, "f1", "1.0", 1,</CODE>
    <dl>
       <dt> <a name="904500"> </a><CODE>"a/b/c/license.dat", &amp;lp_handle1);</CODE>
    </dl>
     <dt> <a name="904492"> </a><CODE>lp_checkout(LPCODE, LM_RESTRICTIVE, "f2", "1.0", 1, </CODE>
    <dl>
       <dt> <a name="904507"> </a><CODE>"a/b/c/license.dat", &amp;lp_handle2);</CODE>
    </dl>
  </dl>
</dl>
<h3>
  <a name="881510"> </a>8.5	 lp_errstring()
</h3>


<h5>
  <a name="881511"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881512"> </a><CODE><code><em>string</em></code> = lp_errstring(lp_handle)</CODE>
  </dl>
</dl>
<h5>
  <a name="881513"> </a>Description
</h5>


<p>
  <a name="881517"> </a>Returns a string describing the previous FLEX<em>lm</em> error.
</p>


<h5>
  <a name="881518"> </a>Parameter
</h5>


<p>
  <a name="886642"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886646"> </a><code>(LP_HANDLE *) lp_handle
<br></code></td>
    <td><a name="886648"> </a>The handle from the <font  face="Arial" size="2">lp_checkout()</font> 
<br>call.
<br></td>
  </tr>
</table>




<p>
  <a name="886643"> </a>
</p>


<h5>
  <a name="881520"> </a>Return
</h5>


<p>
  <a name="886651"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886655"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886657"> </a>Error description.
<br></td>
  </tr>
</table>




<p>
  <a name="886652"> </a>
</p>


<h3>
  <a name="881524"> </a>8.6	 lp_heartbeat()
</h3>


<h5>
  <a name="881525"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881526"> </a><CODE><code><em>status</em></code> = lp_heartbeat(lp_handle, <code><em>num_reconnects</em></code>, <code><em>num_minutes</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881527"> </a>Description
</h5>


<p>
  <a name="881528"> </a>Exchanges heartbeat messages with the server. If the server goes down and later comes back up, <font  face="Arial" size="2">lp_heartbeat()</font><em> </em>will automatically reconnect and check the license out. On failure, returns the number of failed attempts to reconnect to the server. On failure, applications should at a minimum notify the user of the failure. For a restrictive policy, applications may exit after a certain number of failures. In addition, applications may want to exit if reconnections succeed more than three or four times in a relatively short period (e.g. ten minutes), which may indicate a user restarting the license server in an attempt to acquire extra licenses.
</p>


<p>
  <a name="881529"> </a><font  face="Arial" size="2">lp_heartbeat()</font> should not be called unless LM_MANUAL_HEARTBEAT is set in the <font  face="Arial" size="2">lp_checkout()</font> call. If LM_MANUAL_HEARTBEAT is not set, then <font  face="Arial" size="2">lp_heartbeat()</font> is called automatically by the FLEX<em>lm</em> client library.
</p>


<h5>
  <a name="881535"> </a>Parameters
</h5>


<p>
  <a name="886665"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886669"> </a><code>(LP_HANDLE *) lp_handle
<br></code></td>
    <td><a name="886671"> </a>The handle from the <font  face="Arial" size="2">lp_checkout()</font> 
<br>call.
<br></td>
  </tr>
  <tr>
    <td><a name="886673"> </a><code>(int *) </code><code><em>num_reconnects
<br></em></code></td>
    <td><a name="886675"> </a>The number of reconnections in the 
<br>last <code><em>num_minutes</em></code> minutes. This value 
<br>is returned. If set to 0, no value is 
<br>returned.
<br></td>
  </tr>
  <tr>
    <td><a name="886677"> </a><code>(int) </code><code><em>num_minutes
<br></em></code></td>
    <td><a name="886679"> </a>Number of minutes for 
<br><code><em>num_reconnects</em></code>. If 0, 
<br><code><em>num_reconnects</em></code> is not returned.
<br></td>
  </tr>
</table>




<p>
  <a name="886666"> </a>
</p>


<h5>
  <a name="881539"> </a>Return
</h5>


<p>
  <a name="881540"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886703"> </a><code>(int) </code><code><em>status
<br></em></code></td>
    <td><a name="886708"> </a>0 if successful; otherwise, it returns the number 
<br>of failed attempts to reconnect to the server.
<br></td>
  </tr>
</table>




<p>
  <a name="886700"> </a>
</p>


<h5>
  <a name="881542"> </a>See also
</h5>

<ul>
  <li><a name="881546"> </a><a href="all.htm#900088">Section 4.7.1, "LM_MANUAL_HEARTBEAT</a>"

</ul>

<h3>
  <a name="881548"> </a>8.7	 lp_perror()
</h3>


<h5>
  <a name="881549"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881550"> </a><CODE>(void) lp_perror(lp_handle, <code><em>string</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881551"> </a>Description
</h5>


<p>
  <a name="881552"> </a>Presents <code><em>string</em></code> and a description of the most recent error to the user. On Windows this appears in a dialog; on other systems, it prints to stderr.
</p>


<h5>
  <a name="881553"> </a>Parameters
</h5>


<p>
  <a name="886715"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886719"> </a><code>(LP_HANDLE *) lp_handle
<br></code></td>
    <td><a name="886721"> </a>The handle from the <font  face="Arial" size="2">lp_checkout()</font> 
<br>call.
<br></td>
  </tr>
  <tr>
    <td><a name="886723"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886725"> </a>A string describing the error context.
<br></td>
  </tr>
</table>




<p>
  <a name="886716"> </a>
</p>


<h3>
  <a name="881557"> </a>8.8	 lp_pwarn()
</h3>


<h5>
  <a name="881558"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881559"> </a><CODE>(void) lp_pwarn(lp_handle, <code><em>string</em></code>)</CODE>
  </dl>
</dl>
<h5>
  <a name="881560"> </a>Description
</h5>


<p>
  <a name="881561"> </a>Presents <code><em>string</em></code> and a description of the most recent warning to the user. On Windows this appears in a dialog; on other systems, it prints to stderr. This is useful with policy set to LM_LENIENT or LM_FAILSAFE. Nothing is printed if there is no warning.
</p>


<h5>
  <a name="881562"> </a>Parameters
</h5>


<p>
  <a name="886731"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886735"> </a><code>(LP_HANDLE *) lp_handle
<br></code></td>
    <td><a name="886737"> </a>The handle from the <font  face="Arial" size="2">lp_checkout()</font> 
<br>call.
<br></td>
  </tr>
  <tr>
    <td><a name="886739"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886741"> </a>A string describing the error context.
<br></td>
  </tr>
</table>




<p>
  <a name="886732"> </a>
</p>


<h3>
  <a name="881566"> </a>8.9	 lp_warning()
</h3>


<h5>
  <a name="886749"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="881568"> </a><CODE><code><em>string</em></code> = lp_warning(lp_handle)</CODE>
  </dl>
</dl>
<h5>
  <a name="881569"> </a>Description
</h5>


<p>
  <a name="881573"> </a>Returns a string describing the last FLEX<em>lm</em> warning.
</p>


<h5>
  <a name="881574"> </a>Parameters
</h5>


<p>
  <a name="886750"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886754"> </a><code>(LP_HANDLE *) lp_handle
<br></code></td>
    <td><a name="886756"> </a>The handle from the <font  face="Arial" size="2">lp_checkout()</font> 
<br>call.
<br></td>
  </tr>
</table>




<p>
  <a name="886751"> </a>
</p>


<h5>
  <a name="881576"> </a>Return
</h5>


<p>
  <a name="886763"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="886767"> </a><code>(char *) </code><code><em>string
<br></em></code></td>
    <td><a name="886769"> </a>An explanatory string. This is useful with policy 
<br>set to LM_LENIENT or LM_FAILSAFE.
<br></td>
  </tr>
</table>




<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="881579"> </a>Chapter 9 <br>Java API
</h2>
<hr>


<p>
  <a name="896391"> </a>The Java implementation of the FLEX<em>lm</em> client library allows applets and applications written in Java to use FLEX<em>lm</em> licensing. The Java API is similar to the Simple API. The Java API is not available for FLEX<em>lm</em> v7.2; the latest FLEX<em>lm</em> version that supports the Java API is v7.0.
</p>


<p>
  <a name="896398"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 All FLEX<em>lm</em> class files are in the <font  face="Arial" size="2">flexlm</font> package. Any of your Java classes which invoke FLEX<em>lm</em> methods must use:<br><code>import flexlm.*;</code> </FONT><HR WIDTH=75%>


<h3>
  <a name="896403"> </a>9.1	 license Class
</h3>


<p>
  <a name="896405"> </a>The <font  face="Arial" size="2">license</font> class has the following constructor and instance methods:
</p>


<p>
  <a name="896464"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896408"> </a><font  face="Arial" size="2"><a href="all.htm#896466">license ()</a>
<br></font></td>
    <td><a name="896410"> </a><font  face="Arial" size="2">license</font> class constructor.
<br></td>
  </tr>
  <tr>
    <td><a name="906552"> </a><font  face="Arial" size="2"><a href="all.htm#906562">checkin()</a>
<br></font></td>
    <td><a name="906557"> </a>Releases a license and frees all FLEX<em>lm</em> 
<br>memory.
<br></td>
  </tr>
  <tr>
    <td><a name="896412"> </a><font  face="Arial" size="2"><a href="all.htm#896511">checkout()</a>
<br></font></td>
    <td><a name="896414"> </a>Acquires a license.
<br></td>
  </tr>
  <tr>
    <td><a name="896423"> </a><font  face="Arial" size="2"><a href="all.htm#896570">get_errstring()</a>
<br></font></td>
    <td><a name="896425"> </a>Returns a string describing the most recent 
<br>error.
<br></td>
  </tr>
  <tr>
    <td><a name="896427"> </a><font  face="Arial" size="2"><a href="all.htm#896592">get_major_errcode()</a>
<br></font></td>
    <td><a name="896432"> </a>Returns the FLEX<em>lm</em> major error code.
<br></td>
  </tr>
  <tr>
    <td><a name="896434"> </a><font  face="Arial" size="2"><a href="all.htm#896608">get_minor_errcode()</a>
<br></font></td>
    <td><a name="896439"> </a>Returns the FLEX<em>lm</em> minor error code.
<br></td>
  </tr>
  <tr>
    <td><a name="896441"> </a><font  face="Arial" size="2"><a href="all.htm#896627">getDisplay()</a>
<br></font></td>
    <td><a name="896443"> </a>Allows display name to sent to the license 
<br>server in connection with a license checkout 
<br>and checkin.
<br></td>
  </tr>
  <tr>
    <td><a name="896445"> </a><font  face="Arial" size="2"><a href="all.htm#896650">getHostname()</a>
<br></font></td>
    <td><a name="896447"> </a>Overrides host name sent to the license server 
<br>in connection with a license checkout and 
<br>checkin.
<br></td>
  </tr>
  <tr>
    <td><a name="896449"> </a><font  face="Arial" size="2"><a href="all.htm#896667">getUsername()</a>
<br></font></td>
    <td><a name="896451"> </a>Allows user name to sent to the license server 
<br>in connection with a license checkout and 
<br>checkin.
<br></td>
  </tr>
  <tr>
    <td><a name="896453"> </a><font  face="Arial" size="2"><a href="all.htm#896691">heartbeat()</a>
<br></font></td>
    <td><a name="896455"> </a>Sends a heartbeat to the license server.
<br></td>
  </tr>
  <tr>
    <td><a name="896457"> </a><font  face="Arial" size="2"><a href="all.htm#896720">ok()</a>
<br></font></td>
    <td><a name="896459"> </a>Checks whether major error code indicates a 
<br>checkout failure.
<br></td>
  </tr>
  <tr>
    <td><a name="896461"> </a><font  face="Arial" size="2"><a href="all.htm#896734">warning()</a>
<br></font></td>
    <td><a name="896463"> </a>Returns a string describing the most recent 
<br>warning.
<br></td>
  </tr>
</table>




<p>
  <a name="896465"> </a>
</p>


<h4>
  <a name="896466"> </a>9.1.1	 license ()
</h4>


<h5>
  <a name="896467"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896468"> </a><CODE>public license(<code><em>vendor</em></code>, <code><em>d1</em></code>, <code><em>d2</em></code>, <code><em>k1</em></code>, <code><em>k2</em></code>, <code><em>k3</em></code>, <code><em>k4</em></code>) </CODE>
  </dl>
</dl>
<h5>
  <a name="896469"> </a>Description
</h5>


<p>
  <a name="896470"> </a>Constructor that creates an instance of the <font  face="Arial" size="2">license</font> class, using the specified vendor name, encryption seeds, and vendor keys.
</p>


<h5>
  <a name="896471"> </a>Parameters
</h5>


<p>
  <a name="896501"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896474"> </a><code>String </code><code><em>vendor
<br></em></code></td>
    <td><a name="896476"> </a>Vendor daemon name
<br></td>
  </tr>
  <tr>
    <td><a name="896478"> </a><code>int </code><code><em>d1
<br></em></code></td>
    <td><a name="896480"> </a>XOR of <code><em>VENDOR_KEY5</em></code> and 
<br><code><em>ENCRYPTION_SEED1
<br></em></code></td>
  </tr>
  <tr>
    <td><a name="896482"> </a><code>int </code><code><em>d2
<br></em></code></td>
    <td><a name="896484"> </a>XOR of <code><em>VENDOR_KEY5</em></code> and 
<br><code><em>ENCRYPTION_SEED2
<br></em></code></td>
  </tr>
  <tr>
    <td><a name="896486"> </a><code>int </code><code><em>k1
<br></em></code></td>
    <td><a name="896488"> </a><code><em>VENDOR_KEY1
<br></em></code></td>
  </tr>
  <tr>
    <td><a name="896490"> </a><code>int </code><code><em>k2
<br></em></code></td>
    <td><a name="896492"> </a><code><em>VENDOR_KEY2
<br></em></code></td>
  </tr>
  <tr>
    <td><a name="896494"> </a><code>int </code><code><em>k3
<br></em></code></td>
    <td><a name="896496"> </a><code><em>VENDOR_KEY3
<br></em></code></td>
  </tr>
  <tr>
    <td><a name="896498"> </a><code>int </code><code><em>k4
<br></em></code></td>
    <td><a name="896500"> </a><code><em>VENDOR_KEY4
<br></em></code></td>
  </tr>
</table>




<p>
  <a name="896505"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Vendor keys are issued to you by GLOBEtrotter. The encryption seeds are 32-bit numbers you make up and keep secret. See the FLEX<em>lm</em> QuickStart for more information.</FONT><HR WIDTH=75%>


<p>
  <a name="896509"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 It is wise not to store your encryption seeds in variables, but rather to mention them only in an expression where they are XORed with <code><em>VENDOR_KEY5</em></code>. Given that expressions are evaluated at compile time, this makes it harder for somebody to discover your encryption seeds by decompiling your classes.</FONT><HR WIDTH=75%>


<h4>
  <a name="906562"> </a>9.1.2	 checkin()
</h4>


<h5>
  <a name="906563"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="906564"> </a><CODE>public void checkin()</CODE>
  </dl>
</dl>
<h5>
  <a name="906565"> </a>Description
</h5>


<p>
  <a name="906566"> </a>Checks in (releases) the licenses acquired with <font  face="Arial" size="2">checkout()</font>.
</p>


<h5>
  <a name="906567"> </a>Parameters
</h5>


<p>
  <a name="906568"> </a>None.
</p>


<h5>
  <a name="906569"> </a>Return
</h5>


<p>
  <a name="906570"> </a>None.
</p>


<h4>
  <a name="896511"> </a>9.1.3	 checkout()
</h4>


<h5>
  <a name="896512"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896513"> </a><CODE>public int checkout(<code><em>policy</em></code>, <code><em>feature</em></code>, <code><em>version</em></code>,</CODE>
    <dl>
       <dt> <a name="896514"> </a><CODE><code><em>num_lic</em></code>, <code><em>license_file_path</em></code>);</CODE>
    </dl>
  </dl>
</dl>
<h5>
  <a name="896515"> </a>Description
</h5>


<p>
  <a name="896516"> </a>Acquires a license for a feature.
</p>


<h5>
  <a name="896517"> </a>Parameters
</h5>


<p>
  <a name="896546"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896520"> </a><code>int </code><code><em>policy
<br></em></code></td>
    <td><a name="896525"> </a>See <a href="all.htm#900056">Section 4.6, "License Policies,"</a> for a list 
<br>of valid policies. Example: 
<br>LM.RESTRICTIVE.
<br></td>
  </tr>
  <tr>
    <td><a name="896527"> </a><code>String </code><code><em>feature
<br></em></code></td>
    <td><a name="896529"> </a>The feature name to be checked out.
<br></td>
  </tr>
  <tr>
    <td><a name="896531"> </a><code>String </code><code><em>version
<br></em></code></td>
    <td><a name="896533"> </a>The version of the feature to check out. This is 
<br>a string in floating-point format (e.g., 
<br>12345.123). If the license in the license file 
<br>has the same version number, or a higher 
<br>version number, the checkout will succeed.
<br><a name="896537"> </a>GLOBEtrotter recommends that this version 
<br>number be a license version level and not the 
<br>application's version number. This version 
<br>number should only be changed when you 
<br>want old licenses to no longer work with a 
<br>new version of the software.
<br></td>
  </tr>
  <tr>
    <td><a name="896539"> </a><code>int </code><code><em>num_lic
<br></em></code></td>
    <td><a name="896541"> </a>The number of licenses to check out. Usually 
<br>this is number is 1.
<br></td>
  </tr>
  <tr>
    <td><a name="896543"> </a><code>String 
<br></code><code><em>license_file_path
<br></em></code></td>
    <td><a name="896545"> </a>The location of the license file. This may be a 
<br>file name, a <code>[</code><code><em>port</em></code><code>]@</code><code><em>host</em></code> specification, or a 
<br>colon-separated list of file names and/or 
<br><code>[</code><code><em>port</em></code><code>]@</code><code><em>host</em></code> specifications. Note that there 
<br>is no Java equivalent for environment 
<br>variables, so <code>LM_LICENSE_FILE</code> and 
<br><code><em>VENDOR</em></code><code>_LICENSE_FILE</code> are not used in the 
<br>Java version.
<br></td>
  </tr>
</table>




<p>
  <a name="896547"> </a>
</p>


<h5>
  <a name="896548"> </a>Return
</h5>


<p>
  <a name="896557"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896551"> </a><code>int
<br></code></td>
    <td><a name="896553"> </a>0 if successful; otherwise, use 
<br><font  face="Arial" size="2">get_major_errcode()</font> to get the FLEX<em>lm</em> major 
<br>error number.
<br></td>
  </tr>
</table>




<p>
  <a name="896558"> </a>
</p>


<h4>
  <a name="896570"> </a>9.1.4	 get_errstring()
</h4>


<h5>
  <a name="896571"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896572"> </a><CODE>public String get_errstring()</CODE>
  </dl>
</dl>
<h5>
  <a name="896573"> </a>Description
</h5>


<p>
  <a name="896577"> </a>Get the string corresponding to the most recent FLEX<em>lm</em> major and minor error codes. It is appropriate to use this string in an error message issued to the user.
</p>


<h5>
  <a name="896578"> </a>Return
</h5>


<p>
  <a name="896590"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896581"> </a><code>String
<br></code></td>
    <td><a name="896586"> </a>String describing the most recent FLEX<em>lm</em> error. 
<br>The returned string contains a text string 
<br>describing the error, a major numeric error code 
<br>corresponding to the error, and a minor numeric 
<br>error code which indicates to GLOBEtrotter 
<br>technical support exactly where in the source 
<br>code the error occurred.
<br></td>
  </tr>
</table>




<p>
  <a name="896591"> </a>
</p>


<h4>
  <a name="896592"> </a>9.1.5	 get_major_errcode()
</h4>


<h5>
  <a name="896593"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896594"> </a><CODE>public int get_major_errcode()</CODE>
  </dl>
</dl>
<h5>
  <a name="896595"> </a>Description
</h5>


<p>
  <a name="896599"> </a>Get major FLEX<em>lm</em> error code. The major and minor error codes appear in the string returned by the <font  face="Arial" size="2">get_errstring()</font> method. These codes correspond to the LM.* error codes (statically referenced in the <font  face="Arial" size="2">LM</font> class).
</p>


<h5>
  <a name="896600"> </a>Return
</h5>


<p>
  <a name="896606"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896603"> </a><code>int
<br></code></td>
    <td><a name="896605"> </a>Major error code.
<br></td>
  </tr>
</table>




<p>
  <a name="896607"> </a>
</p>


<h4>
  <a name="896608"> </a>9.1.6	 get_minor_errcode()
</h4>


<h5>
  <a name="896609"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896610"> </a><CODE>public int get_minor_errcode()</CODE>
  </dl>
</dl>
<h5>
  <a name="896611"> </a>Description
</h5>


<p>
  <a name="896615"> </a>Get minor FLEX<em>lm</em> error code. The major and minor error codes appear in the string returned by the <font  face="Arial" size="2">get_errstring()</font> method. These codes are meaningful only to GLOBEtrotter.
</p>


<h5>
  <a name="896619"> </a>Return
</h5>


<p>
  <a name="896625"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896622"> </a><code>int
<br></code></td>
    <td><a name="896624"> </a>Minor error code.
<br></td>
  </tr>
</table>




<p>
  <a name="896626"> </a>
</p>


<h4>
  <a name="896627"> </a>9.1.7	 getDisplay()
</h4>


<h5>
  <a name="896628"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896629"> </a><CODE>public String getDisplay()</CODE>
  </dl>
</dl>
<h5>
  <a name="896630"> </a>Description
</h5>


<p>
  <a name="896631"> </a>For overriding the display sent to the license server and used in the license server's log files in connection with checkouts and checkins associated with this instance.
</p>


<p>
  <a name="896638"> </a>The FLEX<em>lm</em> display name is by default a constant in FLEX<em>lm</em> for Java. It is "" (a null string). This value may be overridden by subclassing the FLEX<em>lm</em> <font  face="Arial" size="2">license</font> class and overriding this method.
</p>


<h5>
  <a name="896642"> </a>Return
</h5>


<p>
  <a name="896648"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896645"> </a><code>String
<br></code></td>
    <td><a name="896647"> </a>New display value.
<br></td>
  </tr>
</table>




<p>
  <a name="896649"> </a>
</p>


<h4>
  <a name="896650"> </a>9.1.8	 getHostname()
</h4>


<h5>
  <a name="896651"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896652"> </a><CODE>public String getHostname()</CODE>
  </dl>
</dl>
<h5>
  <a name="896653"> </a>Description
</h5>


<p>
  <a name="896654"> </a>For overriding the host name sent to the license server and used in the license server's log files in connection with checkouts and checkins associated with this instance.
</p>


<p>
  <a name="896655"> </a>The host name is determined at runtime via the <font  face="Arial" size="2">getLocalHost()</font> method in the <font  face="Arial" size="2">java.net.InetAddress</font> class. This value may be overridden by subclassing the FLEX<em>lm</em> <font  face="Arial" size="2">license</font> class and overriding this method.
</p>


<h5>
  <a name="896659"> </a>Return
</h5>


<p>
  <a name="896665"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896662"> </a><code>String
<br></code></td>
    <td><a name="896664"> </a>New host name value.
<br></td>
  </tr>
</table>




<p>
  <a name="896666"> </a>
</p>


<h4>
  <a name="896667"> </a>9.1.9	 getUsername()
</h4>


<h5>
  <a name="896668"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896669"> </a><CODE>public String getUsername()</CODE>
  </dl>
</dl>
<h5>
  <a name="896670"> </a>Description
</h5>


<p>
  <a name="896671"> </a>For overriding the user name sent to the license server and used in the license server's log files in connection with checkouts and checkins associated with this instance.
</p>


<p>
  <a name="896678"> </a>The FLEX<em>lm</em> user name is by default a constant in FLEX<em>lm</em> for Java. It is "JavaUser." This value may be overridden by subclassing the FLEX<em>lm</em> <font  face="Arial" size="2">license</font> class and overriding this method.
</p>


<h5>
  <a name="896682"> </a>Return
</h5>


<p>
  <a name="896688"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896685"> </a><code>String
<br></code></td>
    <td><a name="896687"> </a>New user name value.
<br></td>
  </tr>
</table>




<p>
  <a name="896689"> </a>
</p>


<h4>
  <a name="896691"> </a>9.1.10	 heartbeat()
</h4>


<h5>
  <a name="896692"> </a>syntax
</h5>

<dl>  <dl>
     <dt> <a name="896693"> </a><CODE>public int heartbeat(<code><em>num_reconnects</em></code>, <code><em>num_minutes</em></code>) </CODE>
  </dl>
</dl>
<h5>
  <a name="896694"> </a>Description
</h5>


<p>
  <a name="896695"> </a>Exchanges heartbeat messages with the server. If the server goes down and later comes back up, <font  face="Arial" size="2">heartbeat()</font> will automatically reconnect and check the license out. On failure, returns the number of failed attempts to reconnect to the server. On failure, applications should at least notify the user of the failure. For a restrictive policy, applications may exit after a certain number of failures. In addition, applications may want to exit if reconnections succeed more than three or four times in a relatively short period (e.g., ten minutes), which may indicate a user restarting the license server in an attempt to acquire extra licenses.
</p>


<p>
  <a name="896699"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 There is no automatic heartbeat in FLEX<em>lm</em> for Java; the <font  face="Arial" size="2">heartbeat()</font> method <em>must</em> be called periodically by your Java code.</FONT><HR WIDTH=75%>


<h5>
  <a name="896700"> </a>Parameters
</h5>


<p>
  <a name="896710"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896703"> </a><code>int[] </code><code><em>num_reconnects
<br></em></code></td>
    <td><a name="896705"> </a>An array of length 1, or null. If non-null, 
<br>the number of reconnects in the last 
<br><code><em>num_minutes</em></code> minutes is returned in the 
<br>0'th element of this array. 
<br></td>
  </tr>
  <tr>
    <td><a name="896707"> </a><code>int </code><code><em>num_minutes
<br></em></code></td>
    <td><a name="896709"> </a>Number of minutes over which to count 
<br>reconnections attempts.
<br></td>
  </tr>
</table>




<p>
  <a name="896711"> </a>
</p>


<h5>
  <a name="896712"> </a>Return
</h5>


<p>
  <a name="896718"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896715"> </a><code>int
<br></code></td>
    <td><a name="896717"> </a>0 if successful; otherwise the number of failed 
<br>reconnect attempts since the last successful 
<br>heartbeat response was received. Note that if the 
<br>license policy is LM.RETRY_RESTRICTIVE, 
<br>the application exits after five unsuccessful 
<br>heartbeat attempts.
<br></td>
  </tr>
</table>




<p>
  <a name="896719"> </a>
</p>


<h4>
  <a name="896720"> </a>9.1.11	 ok()
</h4>


<h5>
  <a name="896721"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896722"> </a><CODE>public boolean ok()</CODE>
  </dl>
</dl>
<h5>
  <a name="896723"> </a>Description
</h5>


<p>
  <a name="896724"> </a>Checks whether major error code indicates a checkout failure. This can be used as an alternative to checking the integer values returned by other methods.
</p>


<h5>
  <a name="896725"> </a>Return
</h5>


<p>
  <a name="896731"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896728"> </a><code>boolean
<br></code></td>
    <td><a name="896730"> </a>True if the major error code does not indicate a 
<br>checkout failure; false if the major error code 
<br>indicates a checkout failure.
<br></td>
  </tr>
</table>




<p>
  <a name="896732"> </a>
</p>


<h4>
  <a name="896734"> </a>9.1.12	 warning()
</h4>


<h5>
  <a name="896735"> </a>Syntax
</h5>

<dl>  <dl>
     <dt> <a name="896736"> </a><CODE>public String warning()</CODE>
  </dl>
</dl>
<h5>
  <a name="896737"> </a>Description
</h5>


<p>
  <a name="896741"> </a>Returns a description of the most recent FLEX<em>lm</em> error, or null if no error has occurred. Similar to <font  face="Arial" size="2">get_errstring()</font>, but useful when the policy is LM.LENIENT or LM.FAILSAFE, and the result of <font  face="Arial" size="2">get_errstring()</font> is null. It is appropriate to use this string in an error message issued to the user.
</p>


<h5>
  <a name="896742"> </a>Return
</h5>


<p>
  <a name="896751"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="896745"> </a><code>String
<br></code></td>
    <td><a name="896750"> </a>Description of most recent FLEX<em>lm</em> error.
<br></td>
  </tr>
</table>




<p>
  <a name="896752"> </a>
</p>


<h3>
  <a name="896753"> </a>9.2	 LM Class
</h3>


<p>
  <a name="896754"> </a>All constants in the <font  face="Arial" size="2">LM</font> class are declared <code>public static final int</code>.
</p>


<h4>
  <a name="896756"> </a>9.2.1	 License Policies
</h4>


<p>
  <a name="896757"> </a>These values are used in the <code><em>policy</em></code> argument in the <font  face="Arial" size="2">checkout()</font> method. The meaning of these policies can be found in <a href="all.htm#900056">Section 4.6, "License Policies</a>."
</p>


<p>
  <a name="896761"> </a>The four policies available in the Java API are: 
</p>

<ul>
  <li><a name="896762"> </a>LM.RESTRICTIVE

  <li><a name="896763"> </a>LM.QUEUE

  <li><a name="896764"> </a>LM.LENIENT

  <li><a name="896765"> </a>LM.FAILSAFE

</ul>

<p>
  <a name="896766"> </a>The one policy modifier, which can be ORed with the policy, is LM.RETRY_RESTRICTIVE. Note that the Java license policies substitute a "." in place of the leading "_" that is found in the policies of the Trivial and Simple APIs.
</p>


<p>
  <a name="896770"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The LM_MANUAL_HEARTBEAT policy modifier from non-Java FLEX<em>lm</em> is not implemented in FLEX<em>lm</em> for Java; all heartbeats are manual in FLEX<em>lm</em> for Java.</FONT><HR WIDTH=75%>


<h4>
  <a name="896777"> </a>9.2.2	 Error Codes
</h4>


<p>
  <a name="896784"> </a>See Appendix D of the <em>FLEXlm Reference Manual</em> for a list of FLEX<em>lm</em> error codes.
</p>


<h3>
  <a name="896786"> </a>9.3	 Java and Security
</h3>


<p>
  <a name="896790"> </a>There are special security considerations for companies using FLEX<em>lm</em> for Java, since Java applications can be relatively easily decompiled. For this reason we recommend that licenses and license servers for Java applications be different than non-Java applications. Otherwise, compromising security through a Java application would imply compromised security for non-Java applications.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="895616"> </a>Chapter 10 <br>License Servers
</h2>
<hr>


<p>
  <a name="895617"> </a>A license server comprises a license manager daemon (<code>lmgrd</code>) process and one or more vendor daemon processes. License server refers to these processes, not the computer on which they run. 
</p>


<p>
  <a name="895645"> </a>If you ship counted licenses, your customers will need to run a license server. Therefore, you will ship them a copy of the standard <code>lmgrd</code> available from GLOBEtrotter and your customized vendor daemon. This chapter also discusses the machine(s) on which your customers will be running license server(s). 
</p>


<h3>
  <a name="895619"> </a>10.1	 lmgrd
</h3>


<p>
  <a name="881710"> </a>The purpose of <code>lmgrd</code> is to:
</p>

<ul>
  <li><a name="881712"> </a>Start and maintain all the vendor daemons listed in the VENDOR lines of the license file(s)

  <li><a name="881713"> </a>Refer application checkout (or other) requests to the correct vendor daemon

  <li><a name="881714"> </a>Establish and maintain communications between redundant server machines

</ul>

<p>
  <a name="906118"> </a><code>lmgrd</code> is a standard component of FLEX<em>lm</em> that neither requires nor allows vendor customization. The license manager daemon allows the license file location and a few other parameters to be set by the end user. These options are set by command-line arguments when starting <code>lmgrd</code>. 
</p>


<h4>
  <a name="906119"> </a>10.1.1	 Upgrading lmgrd
</h4>


<p>
  <a name="906124"> </a>Please recommend to your customers that they always run <code>lmgrd</code> built with the newest version of FLEX<em>lm</em>, even if your vendor daemon and client application do not contain the newest version. The current version of <code>lmgrd</code> is available from http://www.globetrotter.com/lmgrd.htm. 
</p>


<h4>
  <a name="906121"> </a>10.1.2	 Starting lmgrd
</h4>


<p>
  <a name="897965"> </a>The most common command line for <code>lmgrd</code> is:
</p>

<dl>  <dl>
     <dt> <a name="881719"> </a><CODE>lmgrd -c <code><em>license_file_list</em></code> -l <code><em>debug_log_path</em></code> [-2 -p] </CODE>
    <dl>
       <dt> <a name="895658"> </a><CODE>[-x lmdown|lmremove]</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="881720"> </a>If <code><em>license_file_list</em></code> is more than once license file, it needs to be a list separated by colons on UNIX or semi-colons on Windows. If a directory is specified, <code>*.lic</code> in that directory is used.
</p>


<p>
  <a name="881723"> </a>A complete description of <code>lmgrd</code> options is contained in the <em>FLEXlm Reference Manual</em>.
</p>


<h4>
  <a name="897974"> </a>10.1.3	 Switching the Debug Log File on UNIX
</h4>


<p>
  <a name="897978"> </a>The FLEX<em>lm</em> daemons write an ASCII debug log file on stdout. There are several processes in a parent-child hierarchy which are sharing the same file pointer, so this log file cannot be changed after the vendor daemons have been started, since each process has a copy of the current offset, etc.
</p>


<p>
  <a name="897979"> </a>There is another way to switch the log file output data; however, this involves piping the stdout of <code>lmgrd</code> to a shell script that appends each line to a file. This is done as follows:
</p>


<p>
  <a name="897980"> </a>Instead of the "normal" startup:
</p>

<dl>  <dl>
     <dt> <a name="897982"> </a><CODE>lmgrd &gt; LOG</CODE>
  </dl>
</dl>
<p>
  <a name="897983"> </a>Start <code>lmgrd</code> this way:
</p>

<dl>  <dl>
     <dt> <a name="897984"> </a><CODE>lmgrd -z | sh -c 'while read line; do echo "$line" &gt;&gt; LOG ; done'</CODE>
  </dl>
</dl>
<p>
  <a name="897985"> </a>With this startup method, the output file <code>LOG</code> can be renamed and a new log file will be created. You could even make <code>LOG</code> a symbolic link and change the value of the link to "switch" the log file. The messages that are written by the daemons are described in the <em>FLEXlm End Users Guide</em>.
</p>


<h3>
  <a name="897969"> </a>10.2	 Configuring Your Vendor Daemon
</h3>


<p>
  <a name="881728"> </a>You have configured and built a <code>demo</code> vendor daemon if you followed the QuickStart installation procedures and <a href="all.htm#897391">Chapter&nbsp;2, "Evaluating FLEXlm on UNIX</a>." To build your own vendor daemon, you must supply the following information:
</p>

<ul>
  <li><a name="881736"> </a>Your encryption seeds

  <li><a name="881740"> </a>Your FLEX<em>lm</em> production vendor keys

  <li><a name="881741"> </a>The name of your vendor daemon -- <code>VENDOR_NAME</code> in <code>lm_code.h</code>

</ul>

<p>
  <a name="886983"> </a>Although normally not required, your vendor daemon may require customization by editing <code>lsvendor.c</code><em>.</em>
</p>


<p>
  <a name="886985"> </a>The makefile will create <code>lm_new.o</code> on UNIX (<code>lm_new.obj</code> on Windows) and then build your vendor daemon, <code>lmclient</code> (the sample client application), and the license generators (<code>lmcrypt</code> and <code>makekey</code>). One of the functions of <code>lm_new.o</code> is to remove the vendor name and encryption seeds from the executables; they are constructed at runtime.
</p>


<h4>
  <a name="881750"> </a>10.2.1	 Building Your Vendor Daemon--UNIX Systems
</h4>


<p>
  <a name="881755"> </a>To build your vendor daemon, edit <code>lm_code.h</code> (and <code>lsvendor.c</code>, if needed). Assuming that the FLEX<em>lm</em> SDK is in <code>/usr/gsi/flexlm/v7.2)</code>, type:
</p>

<dl>  <dl>
     <dt> <a name="881756"> </a><CODE><code>cd /usr/gsi/flexlm/v7.2/</code><code><em>platform</em></code></CODE>
     <dt> <a name="881758"> </a><CODE><code>make</code></CODE>
  </dl>
</dl>
<h4>
  <a name="881763"> </a>10.2.2	 Building Your Vendor Daemon--Windows Systems
</h4>


<p>
  <a name="881764"> </a>To build your vendor daemon, edit <code>lm_code.h</code> (and <code>lsvendor.c</code>, if needed). Assuming that the FLEX<em>lm</em> SDK is in <code>C:\Program&nbsp;Files\flexlm\v7.2\</code>), type:
</p>

<dl>  <dl>
     <dt> <a name="881768"> </a><CODE>C:&gt; cd \Program Files\flexlm\v7.2\i86_n3</CODE>
     <dt> <a name="881769"> </a><CODE>C:&gt; build</CODE>
  </dl>
</dl>
<h3>
  <a name="881780"> </a>10.3	 Upgrading Your Vendor Daemon
</h3>


<p>
  <a name="906170"> </a>Improvements are made in each release of FLEX<em>lm</em>, therefore, we recommend distributing an upgraded vendor daemon to your customers soon after each version of FLEX<em>lm</em> is released. Upgrading your vendor daemon is a simple process--you need only rebuild your FLEX<em>lm</em> SDK, you do not have to rebuild your application.
</p>


<p>
  <a name="906197"> </a>To find the current version of your vendor daemon, vendor, you can type:
</p>

<dl>  <dl>
     <dt> <a name="906198"> </a><CODE><code><em>vendor</em></code> -v</CODE>
  </dl>
</dl>
<p>
  <a name="906205"> </a>or
</p>

<dl>  <dl>
     <dt> <a name="906209"> </a><CODE>lmutil lmver <code><em>vendor</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="906180"> </a>These steps assume that the only change you are making is to upgrade your vendor daemon. To rebuild your vendor daemon:
</p>

<ol type="1">
  <li><a name="906194"> </a>Download and install the latest version of FLEX<em>lm</em> from GLOBEtrotter. 
  <li><a name="906216"> </a>Open <code>lm_code.h</code> and edit it to match your previous <code>lm_code.h</code> settings: Replace the <code>VENDOR_KEY</code>s with the production vendor key lines that you received from GLOBEtrotter, enter <code>ENCRYPTION_SEED</code>s (four 32-bit numbers that you make up), and change the <code>VENDOR_NAME</code> to your vendor name. If you are using CRO, add the two <code>CRO_KEY</code>s that you received from GLOBEtrotter and define <code>LM_STRENGTH</code> to specify the length of your license signature. Remember to keep the <code>lm_code.h</code> file and the encryption seeds secret. 
  <li><a name="906320"> </a>Rebuild your FLEX<em>lm</em> SDK with the edited <code>lm_code.h</code>. This rebuilds your vendor daemon, as well as other files in the SDK.
  <li><a name="906327"> </a>Provide a convenient way for your customers to get your new vendor daemon.
</ol>

<h3>
  <a name="906222"> </a>10.4	 Server Node Configuration
</h3>


<p>
  <a name="895725"> </a>FLEX<em>lm</em> supports:
</p>

<ul>
  <li><a name="895794"> </a>Single license server nodes

  <li><a name="895799"> </a>Redundancy via a license file list

  <li><a name="895800"> </a>Three-server redundancy

</ul>

<p>
  <a name="898173"> </a>If all the end user's data is on a single file server, then there is no need for redundant servers, and GLOBEtrotter Software recommends the use of a single server node for the FLEX<em>lm</em> daemons. If the end user's data is split among two or more server nodes and work is still possible when one of these nodes goes down or off the network, then multiple server nodes can be employed. 
</p>


<p>
  <a name="898268"> </a>In all cases, an effort should be made to select stable systems as server nodes; in other words, do not pick systems that are frequently rebooted or shut down for one reason or another. Multiple server nodes can be any supported server nodes--it is not required that they be the same architecture or operating system.
</p>


<h4>
  <a name="895709"> </a>10.4.1	 Redundancy Via a License File List
</h4>


<p>
  <a name="898212"> </a>Redundancy via a license file list is implemented by each end user setting an <code>LM_LICENSE_FILE</code> or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> environment variable. This type of redundancy is best explained by example. If ten licenses are desired for both "f1" and "f2," you would issue your customer two license files with a count of 5 for each of "f1" and "f2," each keyed to a different license server node. The license server nodes can be physically distant. 
</p>


<p>
  <a name="898323"> </a>The license files would look like:
</p>


<p>
  <a name="898213"> </a>License 1 for "chicago"
</p>

<dl>  <dl>
     <dt> <a name="898214"> </a><CODE>SERVER chicago 17007ea8 1700</CODE>
     <dt> <a name="905138"> </a><CODE>DAEMON xyzd /etc/mydaemon</CODE>
     <dt> <a name="905139"> </a><CODE>FEATURE f1 xyzd 1.000 01-jan-2005 5 SIGN=26C7DD9CD665 </CODE>
     <dt> <a name="905140"> </a><CODE>FEATURE f2 xyzd 1.000 01-jan-2005 5 SIGN=0739D2F78CE4 </CODE>
  </dl>
</dl>
<p>
  <a name="898218"> </a>License 2 for "tokyo"
</p>

<dl>  <dl>
     <dt> <a name="898219"> </a><CODE>SERVER tokyo 17007ea8 1700</CODE>
     <dt> <a name="898220"> </a><CODE>DAEMON xyzd /etc/mydaemon</CODE>
     <dt> <a name="898221"> </a><CODE>FEATURE f1 xyzd 1.000 01-jan-2005 5 SIGN=16BE40E1DAEE </CODE>
     <dt> <a name="898292"> </a><CODE>FEATURE f2 xyzd 1.000 01-jan-2005 5 SIGN=6DB6F3E40E61 </CODE>
  </dl>
</dl>
<p>
  <a name="898293"> </a>The user in Chicago could set <code>LM_LICENSE_FILE</code> or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> to: 
</p>

<dl>  <dl>
     <dt> <a name="898294"> </a><CODE>1700@chicago:1700@tokyo </CODE>
  </dl>
</dl>
<p>
  <a name="898231"> </a>The user in Tokyo could set <code>LM_LICENSE_FILE</code> or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> to: 
</p>

<dl>  <dl>
     <dt> <a name="898232"> </a><CODE>1700@tokyo:1700@chicago</CODE>
  </dl>
</dl>
<p>
  <a name="898233"> </a>The application attempts to check out licenses from the first license server in the list; if that fails for any reason, the second license server is tried. This type of redundancy can be used to balance the usage of licenses across several license server nodes.
</p>


<h4>
  <a name="895699"> </a>10.4.2	 Three-Server Redundant Servers
</h4>


<p>
  <a name="895853"> </a>FLEX<em>lm</em> supports a set of three license servers to be used in a redundant manner. If any two of the three license servers are up and running (two out of three license servers is referred to as a <em>quorum</em>), the system is functional and hands out its total complement of licenses. 
</p>


<p>
  <a name="895778"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Note that the use of two license servers is strongly discouraged, because a set of redundant server nodes with only two server nodes gives you two points of failure--you must always have both server nodes running.</FONT><HR WIDTH=75%>


<p>
  <a name="895747"> </a>When redundant servers are started, they elect a <em>master, </em>which performs all licensing operations. The other two servers are there to provide a secure licensing mechanism in the event of hardware failure or if the master server node needs to be rebooted. Should the master fail, if two servers are still running, one of the remaining two will be elected master, and licensing operations will continue. 
</p>


<p>
  <a name="898261"> </a>These three-server redundant servers should have excellent communications and should be on the same subnet. Often this means that the three servers should be located physically close to each other. This form of redundancy requires that the servers exchange heartbeats periodically, and poor communications can cause poor performance. Redundant servers should never be configured with slow communications or dial-up links.
</p>


<p>
  <a name="898244"> </a>Three-server redundancy does not provide load-balancing of licenses because with three-server redundancy, only one of the three servers is master, capable of issuing licenses. Because all clients must contact the master, all clients must have reliable networking to a single node.
</p>


<h5>
  <a name="881803"> </a>Generating a License File for Redundant Servers
</h5>


<p>
  <a name="881804"> </a>To generate a license file that uses redundant servers, three servers must be specified when the license is created. Unlike independent servers, each SERVER line will require a port number, which can be any number from 1024 to 32000 which is unused at the end-user site. 
</p>


<p>
  <a name="881807"> </a>The order of SERVER lines in the license file (for redundant servers) specifies the end user's desired selection order for the master server node. If the order of the SERVER lines do not agree in all license files, FLEX<em>lm</em> uses alphabetical order to determine the master and the following messages are generated in the debug log file:
</p>

<dl>  <dl>
     <dt> <a name="881811"> </a><CODE>6/26 11:00 (lmgrd) License File SERVER line order mismatch.</CODE>
     <dt> <a name="881812"> </a><CODE>6/26 11:00 (lmgrd) Using alphabetical order </CODE>
  </dl>
</dl>
<p>
  <a name="881813"> </a>If the server order does not match, the daemons will come up initially, but reconnection in the event of license server node failure may not work, depending on which node fails and who was the master before the failure. If the automatic failover in the event of node failure is important, have the customer ensure that the order of the server lines is consistent on all license server nodes.
</p>


<p>
  <a name="881814"> </a>When only two of the three license server nodes are up, it is possible for the client application to experience a timeout before connecting to the license server. Specifically, if the first license server in the license file is down, the client application will timeout before attempting to connect to the second server in the license file. This timeout is set to ten seconds by default, so there will be a ten-second delay before the license is granted. If the first license server node is to be down for a while, the order of the SERVER lines in the license file which the client application reads could be changed to avoid this timeout.
</p>


<h4>
  <a name="898133"> </a>10.4.3	 Comparing License File List to Three-Server Redundancy
</h4>


<h5>
  <a name="898134"> </a>Are there any drawbacks to using the license file list for redundancy?
</h5>


<p>
  <a name="898135"> </a>Yes. By default, once a <em>license job</em> has successfully checked out a license from one host, all subsequent checkouts must be satisfied from the same license server node. If the application requires more than one license, this could result in a license denial when the license is available on another server. An application can bypass this restriction if it is coded with the use of multiple FLEX<em>lm</em> license jobs. Therefore, your customers may need to know whether your application is programmed in this manner.
</p>


<p>
  <a name="898139"> </a>If the application supports license queueing, all licenses are queued only from the first host in the license file list.
</p>


<p>
  <a name="898140"> </a>Finally, if one license server in the list becomes unavailable, some licenses will be unavailable.
</p>


<h5>
  <a name="898141"> </a>When is it recommended to use a license file list for redundancy rather than true redundant servers? 
</h5>

<ul>
  <li><a name="898142"> </a>When there's less system administration available to monitor license servers. 

  <li><a name="898143"> </a>When load-balancing is needed for clients located far apart, e.g., London and Tokyo. You can make servers available locally, with remote servers available as backup.

  <li><a name="898144"> </a>License file list is more forgiving if one of the license server nodes goes down.

  <li><a name="898145"> </a>It's not limited to three servers (any number will work). For wide-area networks, local servers can be specified first, with remote servers available as backup.

  <li><a name="898146"> </a>Clients do not require reliable networking to a single node with a license file list, so this is recommended where networking itself requires redundancy.

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="881816"> </a>Chapter 11 <br>Software Vendor Utility Programs
</h2>
<hr>


<h3>
  <a name="881819"> </a>11.1	 makekey
</h3>


<p>
  <a name="881823"> </a>The FLEX<em>lm</em> SDK includes the <code>makekey</code> utility program used for the creation of license files. <code>makekey</code> is the easiest way to get started, because it asks a few questions and creates a correct license file. Once you have become familiar with the license file format, which is described in detail in the <em>FLEXlm Reference Manual</em>, you may want to use the <code>lmcrypt</code> utility to generate your signatures from a template file.
</p>


<p>
  <a name="881828"> </a><code>makekey</code> is a standalone license file generator. <code>makekey</code> can be used as-is to generate license files for your customers or it can be used as an example for you to create your own customized license file generation program. If customizing, note that the essential function call is <font  face="Arial" size="2">lc_cryptstr()</font>. 
</p>


<p>
  <a name="881830"> </a><code>makekey</code> asks a number of questions and then generates the license file for the specific end user.
</p>


<p>
  <a name="881831"> </a><code>makekey</code> allows you to enter all data for a customer's license file from scratch or use an existing customer license file to update the feature lines.
</p>


<p>
  <a name="881832"> </a>The license file is left in the current directory with the name <code>license.dat</code>.
</p>

<dl>  <dl>
     <dt> <a name="896223"> </a><CODE>makekey [-verfmt { 2 | 3 | 4 | 5 | 5_1 | 6 | 6_1 | 7 | 7_1 }] \</CODE>
    <dl>
       <dt> <a name="901074"> </a><CODE>[-maxlen <code><em>n</em></code>]</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="881833"> </a>Licenses can be generated to be compatible with older versions (i.e., not using any of the features of the newer versions) by using the <code>-verfmt</code> argument.
</p>


<p>
  <a name="896226"> </a>Licenses can have shorter or longer lines with the <code>-maxlen</code> argument. This is normally used to generate files with short lines so they'll be less likely to have newlines inserted by mailers. For this a length of 50 is common.
</p>


<h3>
  <a name="881842"> </a>11.2	 lmcrypt
</h3>


<p>
  <a name="881843"> </a>Once you know the format of the license file FEATURE or INCRMENT lines that you need to create, <code>lmcrypt</code> is an easier way to create your signatures than <code>makekey</code>. <code>lmcrypt</code> replaces the signature, which can be simply <code>SIGN=0</code>, in a license file with the correct signature, which is then ready to ship to a customer. To use <code>lmcrypt</code>, you need to either understand the FLEX<em>lm</em> license file syntax or use an example license file. Examples are available in the <code>examples/licenses</code> directory.
</p>


<p>
  <a name="881848"> </a>Usage:
</p>

<dl>  <dl>
     <dt> <a name="881849"> </a><CODE>lmcrypt [<code><em>files</em></code>][-i <code><em>infile</em></code>] [-o <code><em>outfile</em></code>] [-maxlen <code><em>n</em></code>] [-e <code><em>errfile</em></code>]</CODE>
    <dl>
       <dt> <a name="896255"> </a><CODE>[-verfmt { <code>2 | 3 | 4 | 5 | 5_1 | 6 | 6_1 | 7 | 7_1 }</code>] </CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="881850"> </a>If no input file is specified, or if specified as "<code>-</code>" or stdin, standard input is used. If no output file is specified, or if specified as "<code>-</code>"<code> </code>or stdout, standard output is used. <code><em>files</em></code> are read and written back in place. If no file arguments are specified, <code>lmcrypt</code> reads stdin and writes stdout. All signatures are recomputed. <code>lmcrypt</code> will only work on lines that have a daemon name matching the vendor's daemon name.
</p>


<p>
  <a name="887001"> </a>If this is not possible, an error is produced, and the affected license line is left unaltered.
</p>


<p>
  <a name="896283"> </a>The maximum line length is controlled with the <code>-maxlen</code> argument. A value of 50 is commonly used to make shorter lines less subject to mailers inserting newlines. Licenses can be generated to be compatible with older versions by using the <code>-verfmt</code> argument.
</p>


<p>
  <a name="887005"> </a>The simplest way to use <code>lmcrypt</code> is:
</p>

<ol type="1">
  <li><a name="887006"> </a>Copy an existing good file to another name, say, <code>newlicense</code>.
  <li><a name="887007"> </a>Edit <code>newlicense</code>, and make any desired changes, such as changing the feature name, or number of licenses, or adding new features, and save the file.
  <li><a name="881856"> </a>Change the existing signature on each FEATURE line to <code>SIGN=0</code>.
  <li><a name="901088"> </a>Type the following:
<dl>    <dl>
       <dt> <a name="881857"> </a><CODE>lmcrypt newlicense</CODE>
    </dl>
</dl>  <dl>
     <dt> <a name="881858"> </a><code>newlicense</code> is then filled with correct signatures and is usable by a customer. Comments are passed through unaltered.
  </dl>
</ol>
<p>
  <a name="881860"> </a>See <code>lmcrypt.c</code> in the <code>machind</code> directory.
</p>


<h5>
  <a name="881861"> </a>Error Returns
</h5>


<p>
  <a name="881862"> </a>Errors are printed to stderr, or as specified with <code>-e</code>. Most errors will prevent generation of signatures and the text will be output unchanged from the input. An example of error reporting: If <code>-e</code> is not used, the error messages also appear at the top of the output file.
</p>


<p>
  <a name="881863"> </a>Input:
</p>

<dl>  <dl>
     <dt> <a name="881864"> </a><CODE>FEATURE f1 demo 1.a50 01-jan-2005 uncounted HOSTID=08002b32b161 \</CODE>
    <dl>
       <dt> <a name="901109"> </a><CODE>SIGN=0</CODE>
    </dl>
  </dl>
  </dl>

<p>
  <a name="881865"> </a>Error reported:
</p>

<dl>  <dl>
     <dt> <a name="881866"> </a><CODE>stdin:line 1:Bad version number - must be floating point number, with no letters</CODE>
  </dl>
</dl>
<h5>
  <a name="881867"> </a>See also
</h5>

<ul>
  <li><a name="881871"> </a><a href="all.htm#881928">Chapter&nbsp;12, "The License File</a>"

</ul>

<h3>
  <a name="881873"> </a>11.3	 makepkg
</h3>


<p>
  <a name="881875"> </a>The <code>makepkg</code> utility is similar to <code>makekey</code> and is used to make PACKAGE lines for license files. The reason this utility is separate from <code>makekey</code> is that you will often want to ship PACKAGE lines with your product and issue enabling FEATURE or INCREMENT lines later when the product is sold to individual customers.
</p>


<p>
  <a name="881876"> </a>The source for <code>makepkg</code>, <code>makepkg.c</code>, is in the <code>machind</code> directory. You are encouraged to modify this source as needed.
</p>


<p>
  <a name="881877"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 PACKAGE lines can also be created with the <code>lmcrypt</code> utility, but not with <code>makekey</code>.</FONT><HR WIDTH=75%>


<h3>
  <a name="881880"> </a>11.4	 genlic (Windows Only)
</h3>


<p>
  <a name="881881"> </a><code>genlic</code> is a visual license generation program provided with the SDK. After experimenting with the license files that come with the demo, you may wish to generate you own license files using <code>genlic</code>. While <code>genlic</code> can generate most common license types, it cannot generate every license type which FLEX<em>lm</em> supports. The range of license types which <code>genlic</code> can generate has been limited in order to make it easier for you to get started. If you need a license which <code>genlic</code> cannot generate, you will need to use <code>lmcrypt</code><em> or the </em><font  face="Arial" size="2">lc_cryptstr()</font> function. 
</p>


<p>
  <a name="890206"> </a><img src="graphics/genlic.gif">

</p>


<p>
  <a name="909048"> </a>
</p>


<p>
  <a name="909054"> </a>You must edit <code>lm_code.h</code> and insert your demo vendor codes to use <code>genlic</code>. If you don't, <code>genlic</code> will not run. 
</p>


<p>
  <a name="881886"> </a>To use <code>genlic</code>, fill out the form for the type of license you want, then click the Make License button. The text of the license file will appear in the window. To create multiple features, edit the form and click Make License again. Each feature will be appended to the window. Click Save to save your work.
</p>


<p>
  <a name="881887"> </a>The main screen contains the following:
</p>


<p>
  <a name="887016"> </a><strong>Feature Name</strong> -- Name of the feature to be licensed. Characters must be alphanumeric and/or "_".
</p>


<p>
  <a name="887021"> </a><strong>Expiration Date</strong> -- Date the license will expire. Valid date format is <code><em>dd</em></code>-<code><em>mmm</em></code>-<code><em>yyyy</em></code> (for example, 01-nov-2007 or 30-dec-2007). If the Permanent box is checked, the license will never expire and it has the date of 1-jan-0 (or the keyword "permanent") in the license file.
</p>


<p>
  <a name="881890"> </a><strong>License Type</strong> -- Any of the four following license types selected by clicking a check box:
</p>

<dl>  <dl>
     <dt> <a name="881891"> </a><strong>Floating</strong> -- Anyone on the network can use the licensed software, up to the allowed number of licenses. The floating license type requires the following fields:
     <dt> <a name="881892"> </a>Number of Licenses -- Total number of licenses that can be checked out at any given time.
     <dt> <a name="881893"> </a>Server Name -- Name of the license server.
     <dt> <a name="881894"> </a>Server Host ID -- Ethernet address or Disk Volume Serial Number of the license server. The information for your machine is available in the drop-down menu.
     <dt> <a name="881895"> </a><strong>Demo</strong><strong> </strong>-- The licensed software will run on any system (it uses "DEMO" as the hostid). The licensed software is in DEMO mode.
     <dt> <a name="881896"> </a><strong>Node Locked</strong> -- The licensed software can only run on one particular computer. The node-locked license requires the following field:
     <dt> <a name="881897"> </a>Node Locked Host ID -- Ethernet address, Dongle ID, or Disk Volume Serial Number of a particular system on the network (workstation). This information for your system is available in the drop-down menu.
     <dt> <a name="881898"> </a><strong>Run Anywhere</strong><strong> </strong>-- The licensed software will run on any system (it uses ANY as the hostid). The licensed software is in normal mode. (The difference between the "ANY" and "DEMO" hostid is that the licensed software can check for demo feature lines and then alter the behavior as desired.)
  </dl>
</dl>
<p>
  <a name="881899"> </a><strong>Number of Licenses</strong> -- License count.
</p>


<p>
  <a name="907908"> </a><strong>Server Name</strong> -- Host name of the license server machine.
</p>


<p>
  <a name="907909"> </a><strong>Server Hostid</strong> -- Choice list that contains different types of hostids for the license server machine. Entry can also be edited.
</p>


<p>
  <a name="907916"> </a><strong>Node-Locked Host ID</strong> -- Choice list that contains different types of hostids for the license server machine. Entry can also be edited.
</p>


<p>
  <a name="907892"> </a><strong>License File</strong> -- Name and path to the license file. To activate the browse feature, leave the field blank and click on the Save button.
</p>


<p>
  <a name="881900"> </a><strong>Make License</strong> button-- Generate a FEATURE line without saving to a file.
</p>


<p>
  <a name="881901"> </a><strong>Save</strong> button -- Write the licenses window to a license file.
</p>


<p>
  <a name="881902"> </a><strong>Clear</strong> button -- Reset the content of the licenses window.
</p>


<p>
  <a name="881903"> </a><strong>Quit</strong> button -- Exits the program.
</p>


<p>
  <a name="881904"> </a><strong>Advanced</strong> tab -- Settings concerning the vendor information and license server data.
</p>

<dl>  <dl>
     <dt> <a name="881905"> </a><strong>Version</strong> -- Feature's version that is supported by the current license file.
     <dt> <a name="881906"> </a><strong>Start Date </strong>-- Date the current license file will take effect. This date will be authenticated.
     <dt> <a name="881907"> </a><strong>Use Decimal Format</strong><strong> </strong>-- This allows you to generate the decimal format of the license file (easier to read numbers over the telephone).
     <dt> <a name="907930"> </a><strong>Add Compatible License Key</strong> -- If the <code>LM_STRENGTH</code> setting in <code>lm_code.h</code> allows it, can be checked to generate both a license key and a SIGN= signature on a FEATURE line. All <code>LM_STRENGTH</code> settings but LM_STRENGTH_LICENSE_KEY allow both to be calculated. Useful for migrating to CRO. 
     <dt> <a name="881908"> </a><strong>License Sharing</strong><strong> </strong>-- This allows you to specify how multiple license requests share licenses.
     <dt> <a name="881909"> </a>None<strong> </strong>-- Disable license sharing feature (default).
     <dt> <a name="881910"> </a>User<strong> </strong>-- Allows multiple copies with the same user to share the same license.
     <dt> <a name="881911"> </a>Host -- Allows multiple copies on the same computer to share the same license.
     <dt> <a name="881912"> </a>User and Host -- Allows multiple copies of the same user on one computer to share the same license.
     <dt> <a name="881913"> </a>Site<strong> </strong>-- Allows any system on the network to share the same feature (unlimited use at one site).
  </dl>
</dl>
<p>
  <a name="881914"> </a><strong>Vendor Info (optional)</strong> -- Information that can be recorded on the license line.
</p>


<p>
  <a name="881915"> </a><strong>Optional</strong> tab --
</p>

<dl>  <dl>
     <dt> <a name="881916"> </a><strong>TCP Port</strong> -- Optional port number (&gt;1024 and &lt;64000) to use on the SERVER line.
     <dt> <a name="881920"> </a><strong>SPX Address</strong> -- If using a FLEX<em>lm</em> Novell server, port number for IPX/SPX protocol to use on the SERVER line.
     <dt> <a name="881921"> </a><strong>Vendor Name</strong> -- "demo" by default. This is used in the VENDOR line. The name will change with modification to <code>lm_code.h</code> for <code>VENDOR_NAME </code><code><em>vendor</em></code>.
     <dt> <a name="881923"> </a><strong>Vendor Daemon Path </strong>-- Path to the vendor daemon. This is used in the VENDOR line.

<p>
  <a name="881924"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 After the advanced or optional features are saved, they will be used for all future license files until they are changed.</FONT><HR WIDTH=75%>

  </dl>
</dl>
<h3>
  <a name="881925"> </a>11.5	 Integrating the License Certificate Manager
</h3>


<p>
  <a name="881926"> </a>The License Certificate Manager supports automatic downloading and installation of license files over the Internet. This is enabled by default. It can be disabled using the FLEXible API, as described in the <em>FLEXlm Reference Manual</em>.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="881928"> </a>Chapter 12 <br>The License File
</h2>
<hr>


<h3>
  <a name="881931"> </a>12.1	 Format of the License File
</h3>


<p>
  <a name="881932"> </a>A license file consists of the following sections:
</p>


<p>
  <a name="881933"> </a>SERVER/VENDOR lines
</p>

<dl>  <dl>
     <dt> <a name="895894"> </a>These lines appear in the license file if a license server is used (that is, if any features are <em>counted</em>). The SERVER line(s) contain information about the node(s) where <code>lmgrd</code> is running. The vendor-specific VENDOR line(s) contain information about the vendor daemon(s) that run on the license server node(s).
  </dl>
</dl>
<p>
  <a name="881935"> </a>USE_SERVER line
</p>

<dl>  <dl>
     <dt> <a name="895917"> </a>A USE_SERVER line, if used, usually follows the SERVER line and indicates that a client application should not process the rest of the license file itself, but should check out the license directly from the license server. GLOBEtrotter recommends the use of a USE_SERVER line, particularly where performance is important.
  </dl>
</dl>
<p>
  <a name="881936"> </a>FEATURE lines
</p>

<dl>  <dl>
     <dt> <a name="895923"> </a>This section consists of any combination of FEATURE, INCREMENT, UPGRADE, or PACKAGE lines. This section is required in the license file read by <code>lmgrd</code>. This section is also required in the license file read by a client application, unless a USE_SERVER line is used.
  </dl>
</dl>
<p>
  <a name="881937"> </a>Comment lines
</p>

<dl>  <dl>
     <dt> <a name="895930"> </a>Comment lines should begin with a "#" character. However, in practice, all lines not beginning with a FLEX<em>lm</em> reserved keyword are considered comments.
  </dl>
</dl>
<p>
  <a name="881941"> </a>Long lines can be broken up. It is customary to use a "\" line continuation character, but in v7+ this is not required, particularly because newlines are often added by emailers.
</p>


<p>
  <a name="881942"> </a>Vendors and license administrators will read the license file to understand how the licensing will behave, e.g., what features are licensed, the number of licenses, and whether these licenses are node-locked. The options are very broad for what can be specified in a license file.
</p>


<p>
  <a name="881943"> </a>End users often need to edit a few fields in the license file. Nearly all of the file is authenticated; if the authenticated portions are edited by the license administrator, an LM_BADCODE error will result.
</p>


<p>
  <a name="891615"> </a>The only data items in the license file that are editable by the end user are:
</p>

<ul>
  <li><a name="891629"> </a>Host names on SERVER lines

  <li><a name="891640"> </a>(Optional) port numbers on SERVER or VENDOR lines

  <li><a name="891618"> </a>(Optional) path names on VENDOR lines

  <li><a name="891619"> </a>(Optional) options file path names on VENDOR lines

  <li><a name="895943"> </a>(Optional) Lowercase <code><em>keyword</em></code>=<code><em>value</em></code> pairs on FEATURE lines

</ul>

<p>
  <a name="895944"> </a>Any amount of white space can separate the components of license file lines; data can be entered via any plain text editor. Vendors can therefore distribute license data via fax or telephone.
</p>


<p>
  <a name="881960"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 The SERVER hostid(s) and everything on a FEATURE line (except the vendor daemon name and lowercase <code><em>keyword</em></code>=<code><em>value</em></code> pairs) are input to the authentication algorithm to generate the signature for that FEATURE line.</FONT><HR WIDTH=75%>


<p>
  <a name="881965"> </a>The license file format is documented in detail in the <em>FLEXlm Reference Manual</em>.
</p>


<h4>
  <a name="881967"> </a>12.1.1	 Example License File
</h4>


<p>
  <a name="881968"> </a>The following example illustrates the license file for a single vendor with two features and a set of three server nodes, any two of which must be running for the system to function:
</p>

<dl>  <dl>
     <dt> <a name="881971"> </a><CODE>SERVER pat 17003456 27009</CODE>
     <dt> <a name="887034"> </a><CODE>SERVER lee 17004355 27009</CODE>
     <dt> <a name="887035"> </a><CODE>SERVER terry 17007ea8 27009</CODE>
     <dt> <a name="887036"> </a><CODE>VENDOR demo</CODE>
     <dt> <a name="891912"> </a><CODE>FEATURE f1 demo 1.0 1-jan-2005 10 SIGN=1AEEFC8F9003</CODE>
     <dt> <a name="891913"> </a><CODE>FEATURE f2 demo 1.0 1-jan-2005 10 SIGN=0A7E8C4F561F</CODE>
  </dl>
</dl>
<h3>
  <a name="891916"> </a>12.2	 Locating the License File
</h3>


<p>
  <a name="881975"> </a>Client applications use the following rules for locating a license file:
</p>

<ol type="1">
  <li><a name="881977"> </a>If either the <code>LM_LICENSE_FILE</code> or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> (where <code><em>VENDOR</em></code> is the ISV's vendor daemon name) environment variable is set, they are used. <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> is used first. <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> is used only by products from <code><em>VENDOR</em></code> and by <code>lmutil</code> and LMTOOLS.
  <li><a name="881978"> </a>The environment variables <code>LM_LICENSE_FILE</code> and/or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> can also be set in the Windows registry or, on UNIX, in <code>$HOME/.flexlmrc</code>. The Windows registry is in <code>\HKEY_LOCAL_MACHINE\SOFTWARE\FLEXlm License Manager</code>. These locations are also automatically set upon successful checkout.
  <li><a name="881979"> </a>The license location(s) can be set the <font  face="Arial" size="2">CHECKOUT()</font> or <font  face="Arial" size="2">lp_checkout()</font> calls. This is searched after <code>LM_LICENSE_FILE</code> and/or <code><em>VENDOR</em></code><code>_LICENSE_FILE</code>.
  <li><a name="881985"> </a>FLEX<em>lm</em> utilities accept <code>-c </code><code><em>license_file_path</em></code> argument, which specifies the license path(s). If this is set, the environment variables are ignored.
  <li><a name="881986"> </a>If none of the other locations are specified, then a "backup"/default location is used. Relying on this default location is not recommended.
  <dl>
     <dt> <a name="881987"> </a>UNIX:
  </dl>
  <dl>
     <dt> <a name="881988"> </a><CODE>/usr/local/flexlm/licenses/license.dat</CODE>
  </dl>
  <dl>
     <dt> <a name="881989"> </a>Windows: 
  </dl>
  <dl>
     <dt> <a name="881990"> </a><CODE>C:\flexlm\license.dat</CODE>

<p>
  <a name="881991"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 In practice, use of the default location is discouraged, because it is not searched if the applications specifies a different default, or the user has a license-path environment variable set. For example, the default location, which may have successfully worked for an application, will fail once the environment variable <code>LM_LICENSE_FILE</code> is set (unless, of course, <code>LM_LICENSE_FILE</code> includes the default location).</FONT><HR WIDTH=75%>

  </dl>
</ol>

<h4>
  <a name="881992"> </a>12.2.1	 License Specification
</h4>


<p>
  <a name="881993"> </a>Wherever a license path can be specified, it can consist of:
</p>

<ul>
  <li><a name="881994"> </a>A single file.

  <li><a name="881995"> </a>A list of files, separated by a colon on UNIX, a semi-colon on Windows.

  <li><a name="881996"> </a>A directory, where <code><em>dir</em></code><code>/*.lic</code> are used in alphabetical order, as if specified like a license file list.

  <li><a name="881998"> </a><code>@</code><code><em>host</em></code>, where <code><em>host</em></code> is the host name of the license server, when the SERVER has no port number, or the number is between 27000 and 27009. (New in v6--unsupported in older versions.)

  <li><a name="882000"> </a><code><em>port</em></code><code>@</code><code><em>host</em></code>, where <code><em>port</em></code> is the port number and <code><em>host</em></code> is the host name that come from the SERVER line.

  <li><a name="882003"> </a>The actual license file text, with <code>START_LICENSE\n</code> as a prefix, and <code>\nEND_LICENSE</code> as suffix, where the embedded newlines are required. While awkward to specify in most shells, this is most useful inside a program.

</ul>

<p>
  <a name="882005"> </a>Examples:
</p>

<ul>
  <li><a name="891958"> </a>Only one file is specified.

<dl>    <dl>
       <dt> <a name="882006"> </a><CODE>setenv LM_LICENSE_FILE license.lic</CODE>
    </dl>
</dl>  <li><a name="891965"> </a><code>license.dat</code> and <code>/</code><code><em>a</em></code><code>/</code><code><em>b</em></code><code>/</code><code><em>vendor</em></code><code>/licenses/*.lic</code> are used.

<dl>    <dl>
       <dt> <a name="882008"> </a><CODE>setenv LM_LICENSE_FILE license.dat:/<code><em>a</em></code>/<code><em>b</em></code>/<code><em>vendor</em></code>/licenses</CODE>
    </dl>
</dl>  <li><a name="891972"> </a>If the server is running on the same system on a default port, <code>@localhost</code> will find it. After that it looks for <code>./*.lic</code><em> </em>and <code>/</code><code><em>vendor</em></code><code>/licenses/*.lic</code>.

<dl>    <dl>
       <dt> <a name="882010"> </a><CODE>setenv LM_LICENSE_FILE @localhost:.:/<code><em>vendor</em></code>/licenses</CODE>

<p>
  <a name="882012"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 Before v5, both the client and server needed to read the <em>same</em> license file, since the client passes the signature from the FEATURE line to the vendor daemon. With FLEX<em>lm</em> v5+, <code><em>port</em></code><code>@</code><code><em>host</em></code> or USE_SERVER solves this problem, since the client never reads the license file FEATURE lines in these cases.</FONT><HR WIDTH=75%>

    </dl>
</dl></ul>
<h3>
  <a name="882021"> </a>12.3	 Hostids for FLEX<em>lm</em>-Supported Machines
</h3>


<p>
  <a name="895466"> </a>A <em>hostid</em> is a means used to uniquely identify a specific machine. When you create a license with FLEX<em>lm</em>, you bind this license to a hostid. This binding allows only the authorized user(s) to run your software. The binding is created when you generate the <em>license file</em> for your customer. <a href="all.htm#882077">Section 12.4.1, "Simple Uncounted License,"</a> and <a href="all.htm#882140">Section 12.4.3, "Simple Floating (Counted) License,"</a> are two good examples of license files you might create to authorize your customer to run your software.
</p>


<p>
  <a name="895531"> </a>FLEX<em>lm</em> uses different machine identifications for different machine architectures. For example, all Sun Microsystems machines have a unique integer hostid, whereas all DEC machines do not. The program <code>lmhostid</code> will print the exact hostid that FLEX<em>lm</em> expects to use on any given machine. The <em>FLEXlm Reference Manual</em> lists alternate methods of determining the hostid for common machine architectures.
</p>


<p>
  <a name="895479"> </a>On the PC platforms, FLEX<em>lm </em>supports the following types of hostids:
</p>

<ul>
  <li><a name="895486"> </a>Intel CPU ID (Pentium III+ and FLEX<em>lm</em> v7.0d+ required). This hostid is probably preferable where available, but since this turned off by default, the user must enable it using BIOS Setup.

  <li><a name="895487"> </a>Disk Volume Serial Number (<code>DISK_SERIAL_NUM=</code>)

  <li><a name="895490"> </a>FLEXid hardware key, often called a <em>dongle</em> (<code>FLEXID=</code>)

  <li><a name="895491"> </a>Ethernet address, default (twelve hex characters, e.g., 1234567890ab)

</ul>

<p>
  <a name="895492"> </a>The decision to use a particular hostid is made in the license file. You do not need to do anything in your application to decide which hostid type to use. For more hostid information refer to the <em>FLEXlm Reference Manual</em>. 
</p>


<h3>
  <a name="889125"> </a>12.4	 Types of License Files
</h3>


<p>
  <a name="882070"> </a>Depending on the information in this file, the contents will be interpreted differently by FLEX<em>lm</em>. The license file supports network licensing, node locking, network licensing on a limited set of hosts, and demo/evaluation software.
</p>


<p>
  <a name="882074"> </a>Following are license file examples, starting with the simplest. In the examples, the changes from the previous example are in <strong>bold</strong> text.
</p>


<h4>
  <a name="882077"> </a>12.4.1	 Simple Uncounted License
</h4>


<p>
  <a name="882113"> </a><img src="graphics/uncounted.gif">

</p>


<p>
  <a name="887042"> </a>
</p>

<ul>
  <li><a name="882114"> </a>Uncounted licenses have unlimited use on the hostid specified. Uncounted licenses require no server.

  <li><a name="882115"> </a>When the expiration date is "permanent" (or if a date is specified with a year of "0"), the license never expires. 

  <li><a name="882116"> </a>This license supports versions 0.0 through 2.0 (inclusive).

</ul>

<h4>
  <a name="882117"> </a>12.4.2	 Expiring Demo License
</h4>


<p>
  <a name="891748"> </a><img src="graphics/demo.gif">

</p>


<p>
  <a name="891754"> </a>
</p>

<ul>
  <li><a name="882135"> </a>This license expires on 3 March, 2005.

  <li><a name="891661"> </a>For a license which expires after 1999, use all four year digits, e.g. "1-jan-2001."

  <li><a name="891662"> </a>The "DEMO" hostid indicates that this license allows "f0" to run on any system. In addition, the client application can also detect that it is in demo mode, and could behave differently.

</ul>

<h4>
  <a name="882140"> </a>12.4.3	 Simple Floating (Counted) License
</h4>

<dl>  <dl>
     <dt> <a name="882142"> </a><CODE><strong>SERVER speedy 08002b32b161 </strong></CODE>
     <dt> <a name="887051"> </a><CODE><strong>VENDOR demo</strong></CODE>
     <dt> <a name="887052"> </a><CODE><strong></strong>FEATURE f1 demo 2.0 permanent <strong>9</strong> SIGN=DBCC10416777</CODE>
  </dl>
</dl><ul>
  <li><a name="882143"> </a>SERVER and VENDOR lines required.

  <li><a name="882144"> </a>Unexpiring.

  <li><a name="882145"> </a>Floating -- runs on any node. No hostid on FEATURE line.

  <li><a name="882146"> </a>Limited to nine concurrent licenses.

  <li><a name="882147"> </a>Server restricted to hostid "08002b32b161." To remove this restriction, use hostid of "ANY" (e.g., SERVER speedy ANY 2837)<code>.</code>

</ul>

<p>
  <a name="882148"> </a>The breakdown of the SERVER and VENDOR lines is illustrated here:
</p>


<p>
  <a name="882172"> </a><img src="graphics/serverVendor.gif">

</p>


<p>
  <a name="887053"> </a>
</p>

<ul>
  <li><a name="882173"> </a>Host name can be changed by the end user. If host name is <code>this_host</code>, clients running on the same node as the server will work fine. Clients on other nodes will fail unless the host name is changed, or the clients use <code>@</code><code><em>host</em></code> (or <code><em>port</em></code><code>@</code><code><em>host</em></code> if a port number is specified on the SERVER line) to find the server.

  <li><a name="882174"> </a><code>lmgrd</code> uses the <code>PATH</code> environment variable, or the current directory to find the vendor daemon binary.

  <li><a name="882175"> </a>Nothing else can be changed on these two lines. Everything else is authenticated by the signature.

</ul>

<h4>
  <a name="882178"> </a>12.4.4	 INCREMENT
</h4>

<dl>  <dl>
     <dt> <a name="882180"> </a><CODE>SERVER speedy 08002b32b161</CODE>
     <dt> <a name="888136"> </a><CODE>VENDOR demo</CODE>
     <dt> <a name="888138"> </a><CODE><strong>INCREMENT</strong> f1 demo 2.0 permanent <strong>1</strong> SIGN=2B8F621C172C</CODE>
     <dt> <a name="887069"> </a><CODE><strong>INCREMENT</strong> f1 demo 2.0 permanent <strong>2</strong> SIGN=2B9F124C142C</CODE>
  </dl>
</dl><ul>
  <li><a name="887070"> </a>INCREMENT -- the server adds up licenses for all lines for the same feature name. The concurrent usage limit is 3 (1 + 2).

  <li><a name="887071"> </a>The first INCREMENT line could be a FEATURE line and the behavior would be the same.

  <li><a name="887072"> </a>INCREMENT lines must differ in some way -- otherwise only one will be used.

</ul>

<h4>
  <a name="887073"> </a>12.4.5	 INCREMENT, Node-Locked
</h4>

<dl>  <dl>
     <dt> <a name="887074"> </a><CODE>SERVER speedy 08002b32b161</CODE>
     <dt> <a name="887080"> </a><CODE>VENDOR demo</CODE>
     <dt> <a name="887081"> </a><CODE>INCREMENT f1 demo 2.0 permanent 1 HOSTID=80029a3d \</CODE>
    <dl>
       <dt> <a name="905198"> </a><CODE>SIGN=7B9F02AC0645 </CODE>
    </dl>
     <dt> <a name="887082"> </a><CODE>INCREMENT f1 demo 2.0 permanent 2 HOSTID=778da450 \</CODE>
    <dl>
       <dt> <a name="891785"> </a><CODE>SIGN=6BAFD2BC1C3D </CODE>
    </dl>
  </dl>
  </dl>
<ul>
  <li><a name="882187"> </a>One license is available on hostid "80029a3d."

  <li><a name="882188"> </a>Two licenses are available on "778da450."

  <li><a name="882189"> </a>The server tracks these licenses independently, in separate <em>pools</em>.

  <li><a name="882190"> </a>This behavior <em>only</em> works with INCREMENT, not FEATURE, because with FEATURE, the server only recognizes the first FEATURE line for a given feature name.

</ul>

<h4>
  <a name="882192"> </a>12.4.6	 Mixed Floating (Counted) and Uncounted
</h4>

<dl>  <dl>
     <dt> <a name="882194"> </a><CODE>SERVER speedy 08002b32b161</CODE>
     <dt> <a name="887083"> </a><CODE><strong>VENDOR demo</strong></CODE>
     <dt> <a name="887084"> </a><CODE><code></code>FEATURE f1 demo 2.0 permanent 1 HOSTID=80029a3d SIGN=7B9F02AC0645 </CODE>
     <dt> <a name="887085"> </a><CODE>INCREMENT f1 demo 2.0 permanent 2 HOSTID=778da45 SIGN=6BAFD2BC1C3D </CODE>
     <dt> <a name="887089"> </a><CODE><strong>FEATURE f0 demo 2.0 permanent uncounted HOSTID=554066fa \</strong></CODE>
    <dl>
       <dt> <a name="891792"> </a><CODE><strong>SIGN=AB0CC0C16807</strong></CODE>
    </dl>
  </dl>
</dl><ul>
  <li><a name="882195"> </a>Checkouts of "f0," since it is <em>uncounted</em>, may not communicate with the server -- they only verify that the client is on node "554066fa" and that the version is &lt;= 2.0. If USE_SERVER is specified, or either <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> or <code>LM_LICENSE_FILE</code> is set to <code>@</code><code><em>host</em></code> (or <code><em>port</em></code><code>@</code><code><em>host</em></code> if a port number is specified on the SERVER line), then checkouts do require a server and their usage is logged.

  <li><a name="882197"> </a>The "f0" line does not require the SERVER or VENDOR lines, and in fact could reside in another license file altogether.

</ul>

<h4>
  <a name="882198"> </a>12.4.7	 Optional FEATURE Attributes
</h4>

<dl>  <dl>
     <dt> <a name="882200"> </a><CODE>SERVER speedy 08002b32b161</CODE>
     <dt> <a name="887090"> </a><CODE>VENDOR demo</CODE>
     <dt> <a name="887091"> </a><CODE>INCREMENT f1 demo 2.0 permanent 4 SIGN=DBCC10416777</CODE>
     <dt> <a name="887092"> </a><CODE>INCREMENT f1 demo 2.0 permanent 3 SIGN=BBDC1081492A</CODE>
     <dt> <a name="887093"> </a><CODE>UPGRADE f1 demo 2.0 3.0 permanent 5 SIGN=3B8C60B10227</CODE>
     <dt> <a name="891832"> </a><CODE>FEATURE pkg2 demo 1.0 permanent 1 HOSTID=12345678 \</CODE>
    <dl>
       <dt> <a name="891833"> </a><CODE><strong>VENDOR_STRING=vd</strong> <strong>OVERDRAFT=1 \</strong></CODE>
       <dt> <a name="891834"> </a><CODE><strong>DUP_GROUP=UHD ISSUER=issuer NOTICE=notice\</strong></CODE>
       <dt> <a name="891835"> </a><CODE><strong>START=1-jan-2005 vendor_info=vi dist_info=di\</strong></CODE>
       <dt> <a name="887098"> </a><CODE><strong>user_info=ui asset_info=ai ck=161 </strong>SIGN=BB9C4071436D</CODE>
    </dl>
  </dl>
</dl><ul>
  <li><a name="882213"> </a>Most optional attributes are in <code><em>keyword</em></code>=<code><em>value</em></code> format.


<p>
  <a name="890286"> </a><img src="graphics/keywordValue.gif">

</p>


<p>
  <a name="891858"> </a>
</p>

  <li><a name="903385"> </a>The values of the following keywords, which are printed in lowercase by the license generators, can be modified by the user and are <em>not</em> part of the signature: asset_info, dist_info, user_info, vendor_info, and ck.

</ul>

<h5>
  <a name="882216"> </a>Attributes in Detail
</h5>


<p>
  <a name="882217"> </a><code>VENDOR_STRING=vd</code>
</p>

<dl>  <dl>
     <dt> <a name="882218"> </a>The vendor-defined string is used for customization by the vendor, often to license subfeatures.
  </dl>
</dl>
<p>
  <a name="882219"> </a><code>HOSTID=FLEXID=8-12345678</code>
</p>

<dl>  <dl>
     <dt> <a name="882220"> </a>Use locked to hostid "FLEXID=8-12345678" (a node with the hardware key with id 8-12345678 attached).
  </dl>
</dl>
<p>
  <a name="882221"> </a><code>OVERDRAFT=1</code> 
</p>

<dl>  <dl>
     <dt> <a name="882222"> </a>Usage is limited to license count (1) plus OVERDRAFT (1) = 2. The application can detect this state, and it is logged in the report log file.
  </dl>
</dl>
<p>
  <a name="882223"> </a><code>DUP_GROUP=UHD</code>
</p>

<dl>  <dl>
     <dt> <a name="882224"> </a>All usage by the same user on the same host and display are counted as a single use.
  </dl>
</dl>
<p>
  <a name="882225"> </a><code>START=1-jan-2000</code>
</p>

<dl>  <dl>
     <dt> <a name="882226"> </a>Optional start date.
  </dl>
</dl>
<p>
  <a name="882227"> </a><code>ISSUER=issuer NOTICE=notice vendor_info=vi dist_info=di\</code>
</p>

<dl>  <dl>
     <dt> <a name="882228"> </a><code>user_info=ui asset_info=ai</code>
     <dt> <a name="882232"> </a>Unused by FLEX<em>lm</em>. Can be used for customization by vendor or end user.
  </dl>
</dl>
<p>
  <a name="882233"> </a><code>ck=161</code>
</p>

<dl>  <dl>
     <dt> <a name="901122"> </a>A checksum, used by the <code>lmcksum</code> utility to validate the line.
  </dl>
</dl>
<p>
  <a name="901126"> </a>See the <em>FLEXlm Reference Manual</em> for complete information about FEATURE line keywords.
</p>


<h4>
  <a name="901128"> </a>12.4.8	 PACKAGE 
</h4>

<dl>  <dl>
     <dt> <a name="882237"> </a><CODE><strong>PACKAGE pkg demo 1.0 COMPONENTS="c1 c2 c3 c4 c5 c6 c7 c8" \</strong></CODE>
    <dl>
       <dt> <a name="887112"> </a><CODE><strong>SIGN=504091605DCF</strong></CODE>
    </dl>
     <dt> <a name="887113"> </a><CODE>FEATURE pkg demo 1.0 permanent uncounted HOSTID=778da450 \</CODE>
    <dl>
       <dt> <a name="887114"> </a><CODE>SIGN=DB5CC00101A7</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="882238"> </a>The two lines above are a more efficient way of delivering:
</p>

<dl>  <dl>
     <dt> <a name="882239"> </a><CODE>FEATURE c1 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=D03F02432106 </CODE>
     <dt> <a name="891867"> </a><CODE>FEATURE c2 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=99375F40FD85 </CODE>
     <dt> <a name="891872"> </a><CODE>FEATURE c3 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=68FAC130DB90 </CODE>
     <dt> <a name="891874"> </a><CODE>FEATURE c4 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=D3D617E2075A </CODE>
     <dt> <a name="891876"> </a><CODE>FEATURE c5 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=5A91D6EFB68C </CODE>
     <dt> <a name="891878"> </a><CODE>FEATURE c6 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=8F75798EB975 </CODE>
     <dt> <a name="891880"> </a><CODE>FEATURE c7 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=790545E90575 </CODE>
     <dt> <a name="891882"> </a><CODE>FEATURE c8 demo 1.0 permanent uncounted HOSTID=778da450 SIGN=9EE9E788087F </CODE>
  </dl>
</dl><ul>
  <li><a name="882240"> </a>The FEATURE line <em>enables</em> the PACKAGE line.

  <li><a name="882241"> </a>The components all inherit information from the enabling FEATURE line. In this example, they all inherit the expiration date, number of licenses, and hostid.

  <li><a name="882242"> </a>The enabling FEATURE line must match the name, version, and vendor name of the PACKAGE line.

  <li><a name="882243"> </a>The PACKAGE line is usually shipped with the product, since it contains no customer-specific fields.

  <li><a name="882244"> </a>PACKAGE lines can be shipped in a separate file that never needs user editing, so long as the file is include in the license file list.

</ul>

<h4>
  <a name="882246"> </a>12.4.9	 SUITE
</h4>

<dl>  <dl>
     <dt> <a name="882247"> </a><CODE>PACKAGE <strong>office</strong> demo 1.0 <strong>OPTIONS=SUITE</strong> \</CODE>
    <dl>
       <dt> <a name="882248"> </a><CODE>COMPONENTS="<strong>write paint draw</strong>" SIGN=00504091605D </CODE>
    </dl>
     <dt> <a name="882249"> </a><CODE>FEATURE <strong>office</strong> demo 1.0 permanent 3 SIGN=DB5CC00101A7</CODE>
  </dl>
</dl><ul>
  <li><a name="882250"> </a>There is no equivalent in FEATURE lines for this behavior.

  <li><a name="882251"> </a>The client application checks out both a component feature, and, automatically, a copy of a feature called "office." Without OPTIONS=SUITE, this additional checkout would not occur.

  <li><a name="882252"> </a>A feature called "office" is created, in addition to all the components.

  <li><a name="882253"> </a>This license file indicates that after <em>any</em> three licenses of any of the components are used, no further licenses are available for checkout. Without the OPTIONS=SUITE qualifier, there would be three licenses of <em>each</em> of the three components.

</ul>

<h3>
  <a name="882254"> </a>12.5	 License in a Buffer
</h3>


<p>
  <a name="882255"> </a>The license file does not need to be located on disk--it can be specified in the program itself. The license path in <font  face="Arial" size="2">CHECKOUT()</font>, or <font  face="Arial" size="2">lp_checkout()</font> can specify the actual license, as in this example:
</p>

<dl>  <dl>
     <dt> <a name="882256"> </a><CODE>CHECKOUT(LM_RESTRICTIVE, "f1", "1.0", </CODE>
    <dl>
       <dt> <a name="887125"> </a><CODE>"START_LICENSE\n\<br>FEATURE f1 demo 1.0 permanent \<br>uncounted HOSTID=ANY \<br>VENDOR_STRING=\"Acme Inc\" SIGN=50A35101C0F3\n\<br>END_LICENSE");</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="882257"> </a>The license must begin with <code>START_LICENSE\n</code> and end with <code>\nEND_LICENSE</code>, where the embedded newlines are required.
</p>


<p>
  <a name="882258"> </a>This can also be a license file list; as in the following example:
</p>

<dl>  <dl>
     <dt> <a name="882259"> </a><CODE>CHECKOUT(LM_RESTRICTIVE, "f1", "1.0", </CODE>
    <dl>
       <dt> <a name="887126"> </a><CODE>"<code><em>path/to/license.dat</em></code>:START_LICENSE\n\<br>FEATURE f1 demo 1.0 permanent \<br>uncounted HOSTID=ANY \<br>VENDOR_STRING=\"Acme Inc\" SIGN=50A35101C0F3\nEND_LICENSE"</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="882260"> </a>In this example, <code><em>path/to/license.dat</em></code> is first in the list, followed by the license in the string.
</p>


<p>
  <a name="882261"> </a>Specifying a license in a buffer is particularly useful when selling libraries if a separate license file is not desirable, or as a final "failsafe" license in the event that the license server is not running.
</p>


<h3>
  <a name="882263"> </a>12.6	 Decimal Format Licenses
</h3>


<p>
  <a name="882264"> </a>Licenses can be represented in decimal format, to make license delivery easier for customers without access to email. Decimal has the advantage that it's simpler to type in, and often the licenses are much shorter. There are notable exceptions, however, which are explained below.
</p>


<p>
  <a name="882265"> </a>To generate a decimal format license, use the <code>-decimal</code> arg for <code>lmcrypt</code> or <code>makekey</code><code>.</code>
</p>


<p>
  <a name="882266"> </a>To convert an existing license to decimal, use <code>lmcrypt</code> <code>-decimal</code> or
</p>

<dl>  <dl>
     <dt> <a name="882268"> </a><CODE>lminstall -i <em>infile </em>-o <em>outfile</em> -odecimal</CODE>
  </dl>
</dl>
<p>
  <a name="882269"> </a>If needed, decimal lines can be mixed with readable format lines.
</p>


<p>
  <a name="882271"> </a>End users will normally use the <code></code><code>lminstall</code> command to install decimal format licenses. Note that <code>lminstall</code> converts the decimal lines to readable format. <code>lminstall</code> does not, however, know where your application expects to find the license file. You will need to make the license file location clear to the user. Please see the <em>FLEXlm Reference Manual</em> for a more complete description of the decimal format. Refer to the <em>FLEXlm End Users Guide</em> for more information on <code>lminstall</code>.
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="893023"> </a>Chapter 13 <br>FLEX<em>lock</em> and License Certificate Manager (Windows Only)
</h2>
<hr>


<p>
  <a name="893027"> </a>FLEX<em>lock</em> makes it easy to add "try before you buy" licensing to a product that uses FLEX<em>lm</em>. The License Certificate Manager (LCM) is a web-based system for downloading and installing license files. A software vendor can use FLEX<em>lock</em> with LCM to provide a fully automated "try before you buy" program to its customers.
</p>


<h3>
  <a name="893031"> </a>13.1	 FLEX<em>lock</em>
</h3>


<p>
  <a name="882285"> </a>When you enable FLEX<em>lock</em> in one of your FLEX<em>lm</em>-licensed products, FLEX<em>lock</em> automatically allows the user a trial period after the initial installation along with warnings and dialogs explaining the evaluation system. At the completion of the trial period, the user has the option to stop using or to purchase the product. After purchasing your product, the user is given a license file that will enable your product to run in a normal FLEX<em>lm</em> manner.
</p>


<p>
  <a name="882286"> </a>To use the FLEX<em>lock</em> functionality, you need to:
</p>

<ol type="1">
  <li><a name="887159"> </a>Determine the operation and parameters of the "try before you buy" functionality.
  <li><a name="887163"> </a>Run <code>flsetup.exe</code> to define these FLEX<em>lock</em> parameters and create the FLEX<em>lock</em> distribution file, <code>fldata.ini</code>.
  <li><a name="904034"> </a>Enable FLEX<em>lock</em> functionality in your program.
  <li><a name="904037"> </a>Link your application with a FLEX<em>lm</em> library and the FLEX<em>lock</em> library.
  <li><a name="904063"> </a>Ship <code>fldata.ini</code> and <code>flrsrc.dll</code> with your application. 
</ol>

<h4>
  <a name="893114"> </a>13.1.1	 FLEX<em>lock</em> Security
</h4>


<p>
  <a name="903863"> </a>We've made every effort to make the FLEX<em>lock</em> feature secure. However, due to the type of security technology used for FLEX<em>lock</em>, it is less secure than the rest of FLEX<em>lm</em>. It is possible, but not ethical, for a user to "reset" FLEX<em>lock</em> to re-evaluate the product, but there are some built-in deterrents:
</p>

<ul>
  <li><a name="903866"> </a>Resetting FLEX<em>lock</em> requires tampering with the registry which many users will be reluctant or unable to do.

  <li><a name="903868"> </a>If FLEX<em>lock</em> is "reset" for re-evaluation, the user will continually get popup FLEX<em>lock</em> reminders which are an annoyance.

  <li><a name="903870"> </a>The popups also serve as a deterrent to companies that are usually law-abiding in that they make the theft somewhat public.

</ul>

<p>
  <a name="904368"> </a>Using FLEX<em>lock</em> with the dynamic libraries (<code>lmgr327b.dll</code> and <code>flcflxa.dll</code>) is a significant security risk because these could be replaced by a hacker.
</p>


<h4>
  <a name="882297"> </a>13.1.2	 The FLEX<em>lock</em> Configuration Editor
</h4>


<p>
  <a name="882298"> </a>To define the operation of FLEX<em>lock</em> features, you must run the <code>flsetup.exe</code> program and generate the <code>fldata.ini</code> file. <code>flsetup.exe</code> allows developers to quickly define:
</p>


<p>
  <a name="882299"> </a>The type of product trial including:
</p>

<ul>
  <li><a name="882300"> </a>Fixed number of days

  <li><a name="882301"> </a>Fixed numbers of executions

  <li><a name="882302"> </a>Expiration on a fixed date

</ul>

<p>
  <a name="882303"> </a>How to behave when the trial expires:
</p>

<ul>
  <li><a name="882304"> </a>Don't run

  <li><a name="882305"> </a>Run with a warning

</ul>

<p>
  <a name="893178"> </a>Message displayed:
</p>

<ul>
  <li><a name="882306"> </a>When the product is first executed

  <li><a name="882307"> </a>During the trial phase

  <li><a name="882308"> </a>When the trial phase expires, including instructions on how to purchase the product

</ul>

<p>
  <a name="882309"> </a>Product's Attributes:
</p>

<ul>  <ul>
    <li><a name="882310"> </a>Product name
    <li><a name="882311"> </a>Company name
    <li><a name="882312"> </a>Copyright notice
  </ul>
</ul>
<p>
  <a name="887215"> </a>After configuring these parameters and saving the file, run the File<img src="graphics/arrwrite.gif">Create Distribution Files. This generates the <code>fldata.ini</code> file that will need to be shipped with the product. A DLL file will need to be shipped with the application as well (see <a href="all.htm#882315">Section 13.1.4, "Linking Your Application with FLEXlm Libraries</a>"). 
</p>


<h4>
  <a name="893139"> </a>13.1.3	 Enabling FLEX<em>lock</em> Functionality in Your Code
</h4>


<p>
  <a name="893143"> </a>To enable the functionality of the FLEX<em>lock</em> you will need to specify to FLEX<em>lm</em> that you will be permitting this functionality.
</p>


<p>
  <a name="893147"> </a>If you are using either the Trivial or Simple API, specify an additional license policy of LM_FLEXLOCK to your checkout call, for example:
</p>

<dl>  <dl>
     <dt> <a name="893148"> </a><CODE>LM_USE_FLEXLOCK();</CODE>
     <dt> <a name="904272"> </a><CODE>CHECKOUT(LM_RESTRICTIVE | LM_FLEXLOCK, "myfeature", "1.0", </CODE>
    <dl>
       <dt> <a name="893149"> </a><CODE>"license.dat");</CODE>
    </dl>
  </dl>
</dl>
<p>
  <a name="904283"> </a>The <font  face="Arial" size="2">LM_USE_FLEXLOCK()</font> macro can be used with the Trivial, Simple, or FLEXible API.
</p>


<p>
  <a name="893150"> </a>For additional security, use LM_A_FLEXLOCK_INSTALL_ID and LM_A_FLEXLOCK in the FLEXible API.
</p>


<p>
  <a name="895388"> </a>If your application checks out more than one feature and you want to use FLEX<em>lock</em>, or if you want your application to check whether it is licensed with FLEX<em>lock</em>, you will need to use the FLEXible API (see Section 2.7, "FLEXlock," in the <em>FLEXlm Reference Manual</em>.
</p>


<h4>
  <a name="882315"> </a>13.1.4	 Linking Your Application with FLEX<em>lm</em> Libraries
</h4>


<h5>
  <a name="904098"> </a>Linking with the FLEX<em>lm</em> Static Library
</h5>


<p>
  <a name="904195"> </a>If you link your FLEX<em>lock</em>-enabled application with <code>lmgr.lib</code>, you will also need to link with <code>flock.lib</code>. You will ship <code>fldata.ini</code> and <code>flrsrc.dll</code> to your customers with your application. These files should be placed in the same directory as your program executable. 
</p>


<h5>
  <a name="904121"> </a>Linking with the FLEX<em>lm</em> Dynamic Library
</h5>


<p>
  <a name="904135"> </a>Using the dynamic FLEX<em>lm</em> library with FLEX<em>lock</em> is not recommended because it is a security risk. 
</p>


<p>
  <a name="904409"> </a>If you link your FLEX<em>lock</em>-enabled application dynamically with FLEX<em>lm</em>, do not use the <font  face="Arial" size="2">LM_USE_FLEXLOCK()</font> macro before your FLEX<em>lock</em> checkout call. You will link with <code>lmgr327b.lib</code> and will ship <code>fldata.ini</code> and <code>flcflxa.dll</code> in addition to <code>lmgr327b.dll</code> to your customers with your application. These files should be placed in the same directory as your program executable. 
</p>


<h3>
  <a name="904091"> </a>13.2	 License Certificate Manager (LCM)
</h3>


<p>
  <a name="882316"> </a>LCM uses GTweb<em>Licensing</em> to obtain a license file over the Internet and have it automatically installed on a user's system (without the need for copying and pasting). An application automatically supports LCM if <code>lcmflxa.dll</code> is shipped with the application. 
</p>


<p>
  <a name="882317"> </a>When a license is unavailable for an application, a dialog appears. One of the options presented in the dialog is to download a license from the Internet. If a user selects this option, the user is prompted for a URL and key. 
</p>


<p>
  <a name="882319"> </a>The default URL for the LCM is <code>www.globetrotter.com/</code><code><em>vendor</em></code>, where <code><em>vendor</em></code> is your vendor daemon name. This default URL can be changed with the FLEXible API (see LM_A_LCM_URL in the <em>FLEXlm Reference Manual</em>). 
</p>


<p>
  <a name="893215"> </a>To demo the LCM, use the <code>lmclient</code> sample program with feature "lcm."
</p>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="882320"> </a>Chapter 14 <br>Integration Guidelines
</h2>
<hr>


<p>
  <a name="882324"> </a>The following sections describe some things to consider when you integrate FLEX<em>lm</em> into your software application. 
</p>


<h3>
  <a name="893287"> </a>14.1	 Single Server vs. Redundant Servers 
</h3>


<p>
  <a name="893288"> </a>You will have to help your end user decide how many license server machines to run, as the signatures are partially derived from the list of license server machine hostids in a license file. See <a href="all.htm#906222">Section 10.4, "Server Node Configuration,"</a> for guidelines about setting up license servers.
</p>


<h3>
  <a name="882325"> </a>14.2	 Where to Install FLEX<em>lm</em> Components
</h3>


<p>
  <a name="882329"> </a>When your software's installation procedure installs FLEX<em>lm</em> components at an end user's site, there are some things you should keep in mind:
</p>

<ul>
  <li><a name="882330"> </a>All license server executables (<code>lmgrd</code> and vendor daemons) should be <em>local</em> on the machine(s) that will run them. A corollary of this is that you should not run license servers on diskless nodes.

  <li><a name="882331"> </a>There should be a <em>local copy</em> of the license file on each server node. It is fine to NFS-mount the license file for client access, but each license server node should have a local copy. A better approach is to have each user set either the <code><em>VENDOR</em></code><code>_LICENSE_FILE</code> or <code>LM_LICENSE_FILE</code> environment variable to<em> </em><code>@</code><code><em>host</em></code><em> </em>(or <code><em>port</em></code><code>@</code><code><em>host</em></code> if a port number is specified on the SERVER line). In fact, for large license files, <code>@</code><code><em>host</em></code> is more efficient, because it doesn't need to read the license file. For more information, see <a href="all.htm#891916">Section 12.2, "Locating the License File</a>."

  <li><a name="882340"> </a>If a user configures a three-server redundant server, a copy of <code>lmgrd</code>, your vendor daemon, and the license file(s) should be placed on the disk of <em>each</em> license server node.

</ul>

<h3>
  <a name="882354"> </a>14.3	 Reissuing Customer Licenses for Hostid Changes
</h3>


<p>
  <a name="907633"> </a>It is common for a customer to ask to get a valid license file reissued in order to run the license server on a different machine. There is no mechanism in FLEX<em>lm</em> to prevent the original license from working after the license has been reissued. In your license agreement with your customer, we recommend that you state that after a license file is reissued with a new hostid, the old license file is not to be used. Issuing annually expiring licenses can help minimize the impact of undiscarded license files. You may want to limit the number of free hostid changes you make to a customer. 
</p>


<h3>
  <a name="907629"> </a>14.4	 Keeping Your Software Secure
</h3>


<p>
  <a name="882361"> </a>No software is completely secure and FLEX<em>lm</em> is no exception. While GLOBEtrotter Software has made every effort to ensure the integrity of FLEX<em>lm</em>, all points of attack can never be anticipated. 
</p>


<h4>
  <a name="900490"> </a>14.4.1	 Counterfeit Resistant Option (CRO)
</h4>


<p>
  <a name="900494"> </a>FLEX<em>lm</em> offers a Counterfeit Resistant Option (CRO), which is a separately priced add-on. Without CRO, FLEX<em>lm</em> utilizes the standard FLEX<em>lm</em> license key, which uses a proprietary, non-public-key digital signature method. CRO offers a standard public-key system which is recognized by the security community, and recommended for US government work (with US government export approval). The system comes from Certicom (http://www.certicom.com) and uses Elliptical Curve Cryptography.
</p>


<p>
  <a name="900501"> </a>What is the difference between the CRO SIGN= signature and the standard FLEX<em>lm</em> license key? The standard FLEX<em>lm</em> license key is easier to crack and it is more likely that a license file might some day be counterfeited. To date, the current version of the standard FLEX<em>lm</em> license key has not been compromised. However, with the CRO signature, the possibility of counterfeiting becomes more remote. 
</p>


<p>
  <a name="900511"> </a>First you must decide whether you want to use CRO. The evaluation vendor keys include CRO, so you can test CRO with the demo SDK, although by default the demo does not enable CRO. You have to redefine <code>LM_STRENGTH</code> in <code>machind/lm_code.h</code> for CRO to be tested.
</p>


<p>
  <a name="900512"> </a>If you decide that you want to use CRO, then you have to decide what length signature (SIGN=) attribute you want by setting the <code>LM_STRENGTH</code> value in <code>machind/lm_code.h</code>: 
</p>

<ul>
  <li><a name="900513"> </a>LM_STRENGTH_DEFAULT--12 characters (non-public-key)

  <li><a name="900514"> </a>LM_STRENGTH_113BIT--58 characters

  <li><a name="900515"> </a>LM_STRENGTH_163BIT--84 characters

  <li><a name="900516"> </a>LM_STRENGTH_239BIT--120 characters

</ul>

<p>
  <a name="900520"> </a>If you set <code>LM_STRENGTH_113</code> to <code>_239</code> bit, you must rebuild the FLEX<em>lm</em> SDK, using <code>make</code> in the <code><em>platform</em></code> directory (e.g., <code>sun4_u5</code>), or <code>nmake</code> on Windows. 
</p>


<p>
  <a name="900630"> </a>Information about migrating to CRO from a previous version of FLEX<em>lm</em> can be found in Appendix F, "Migrating to the Counterfeit Resistant Option," in the <em>FLEXlm Reference Manual</em>. Information about implementing CRO for new FLEX<em>lm</em> customers can be found in <a href="all.htm#880952">Chapter&nbsp;5, "Incorporating Production FLEXlm into a UNIX Application,"</a> and <a href="all.htm#899664">Chapter&nbsp;6, "Incorporating Production FLEXlm into a Windows Application</a>."
</p>


<h4>
  <a name="900529"> </a>14.4.2	 FLEX<em>lm</em> Points of Vulnerability
</h4>


<p>
  <a name="900547"> </a>The following list shows known points of vulnerability in FLEX<em>lm</em> in increasing order of difficulty to break. GLOBEtrotter Software also maintains a list of techniques for making your implementation more secure--please contact GLOBEtrotter technical support (support@globes.com) for a description of these techniques.
</p>


<h5>
  <a name="900543"> </a>Easy to Break
</h5>

<ul>
  <li><a name="882370"> </a>Running a debugger on application code if it is released with unstripped executables (on UNIX) or as a debug version (on Windows).

</ul>

<h5>
  <a name="882371"> </a>Difficult to Break, Depending on License Policy in Application
</h5>

<ul>
  <li><a name="882372"> </a>Killing the daemons, because a dead daemon is detected by the client heartbeat. If, however, you do not use one of the built-in timers and you do not call a heartbeat function, then your software protection could be bypassed by someone who kills the daemons each time that the application reaches the maximum license limit, because the application would never detect that the daemon went down.

  <dl>
     <dt> <a name="882373"> </a>To reduce the potential for theft by killing and restarting daemons:
  </dl>
  <ul>
    <li><a name="882374"> </a>Call a heartbeat function at least every 120 seconds (but not more often than every 30 seconds).
    <li><a name="882375"> </a>If reconnection is attempted, notify the user and take whatever action is appropriate.
  </ul>
</ul>

<h5>
  <a name="882376"> </a>Very Difficult to Break
</h5>

<ul>
  <li><a name="882381"> </a>Guessing the signatures that belong in the license file. FLEX<em>lm</em>'s authentication algorithm takes the user-visible data fields (number of licenses, expiration date, version number, vendor-defined string, feature name, hostids of all servers, plus any optional authenticated fields) and combines them with the vendor's private encryption seeds to produce a signature. 

  <li><a name="882385"> </a>Writing a new daemon that emulates your vendor daemon. FLEX<em>lm</em> encrypts the traffic between client and vendor daemon to make this point of attack much more difficult.

  <li><a name="882386"> </a>Running the debugger on a stripped (UNIX) or a non-debug (Windows) executable. This requires someone to find the FLEX<em>lm</em> calls without any symbol table knowledge.

</ul>

<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="882390"> </a>Chapter 15 <br>End-User License Administration
</h2>
<hr>


<h3>
  <a name="882395"> </a>15.1	 End-User Options File
</h3>


<p>
  <a name="882397"> </a>For complete syntax and descriptions of end-user options, see the <em>FLEXlm End Users Guide</em>.
</p>


<p>
  <a name="897936"> </a>End users can customize software usage via a vendor daemon options file. An options file allows the end user to reserve licenses for specified users or groups of users, to allow or disallow software usage to certain people, to set software timeouts, and to start a report log that can be read by SAM<em>report</em>. 
</p>


<p>
  <a name="893379"> </a>The vendor daemon options file can be specified on the VENDOR line in the license file as follows:
</p>

<dl>  <dl>
     <dt> <a name="882402"> </a><CODE>VENDOR <code><em>vendor</em></code> [<code><em>vendor_daemon_path</em></code>] [<code><em>options_file_path</em></code>]</CODE>
  </dl>
</dl>
<p>
  <a name="882403"> </a>If the path to the vendor daemon is not specified on the VENDOR line, the path to the options file must be preceded by <code>options=</code>:
</p>

<dl>  <dl>
     <dt> <a name="893384"> </a><CODE>VENDOR <code><em>vendor</em></code> [options=<code><em>options_file_path</em></code>]</CODE>
  </dl>
</dl>
<p>
  <a name="897832"> </a>If the vendor daemon is v6+, the options file does not need to be specified if the options file is both:
</p>

<ol type="1">
  <li><a name="882404"> </a>Named <code><em>vendor</em></code><code>.opt</code>
  <li><a name="882405"> </a>Located in the same directory as the license file
</ol>

<p>
  <a name="897868"> </a>The following options keywords are available:
</p>

<ul>
  <li><a name="897869"> </a>EXCLUDE

  <li><a name="897870"> </a>EXCLUDEALL

  <li><a name="897871"> </a>GROUP

  <li><a name="897872"> </a>HOST_GROUP

  <li><a name="897873"> </a>INCLUDE

  <li><a name="897874"> </a>INCLUDEALL

  <li><a name="897875"> </a>LINGER

  <li><a name="897876"> </a>MAX

  <li><a name="897877"> </a>MAX_OVERDRAFT

  <li><a name="897883"> </a>NOLOG

  <li><a name="897884"> </a>REPORTLOG

  <li><a name="897885"> </a>RESERVE

  <li><a name="897886"> </a>TIMEOUT

  <li><a name="897887"> </a>TIMEOUTALL

</ul>

<p>
  <a name="897893"> </a>The TIMEOUT option allows an idle license to return to the free pool for use by another user. TIMEOUT requires that the application not send heartbeats when it is idle. Therefore, for the TIMEOUT option to work, the application must support it. If FLEX<em>lm</em> timers are disabled, then the application must regularly call a heartbeat function when active, and not call a heartbeat function when inactive. If a heartbeat function is not called regularly when active, the TIMEOUT option can cause the client to lose its license. If the application uses FLEX<em>lm</em> timers (LM_MANUAL_HEARTBEAT not set), a TIMEOUT specification will be ineffective. 
</p>


<h3>
  <a name="882540"> </a>15.2	 License Administration Tools
</h3>


<p>
  <a name="898083"> </a>Syntax and detailed descriptions of <code>lmutil</code> commands can be found in the <em>FLEXlm End Users Guide</em>.
</p>


<p>
  <a name="882542"> </a>On UNIX, all license administration tools are contained in the single executable <code>lmutil</code>. <code>lmutil</code> behavior is determined by its first argument, or its <code>argv[0]</code> name. <code>lmutil</code> renamed to <code>lmstat</code> will behave the same as <code>lmutil lmstat</code>. When you installed your FLEX<em>lm</em> SDK, the installation created hard links from <code>lmutil</code> to each <code>lmutil</code> program names listed. FLEX<em>lm</em>. You should also create these hard links when your software is installed on your customer's system.
</p>


<p>
  <a name="894777"> </a>On Windows, <code>lmutil.exe</code>, a command-line program similar to <code>lmutil</code> on UNIX, is provided. A utility is invoked with <code>lmutil.exe </code><code><em>function</em></code>, where <code><em>function</em></code> is <code>lmstat</code>, <code>lmdiag</code>, etc. A tool interface called LMTOOLS<code></code> is also provided on Windows with the same functionality as <code>lmutil.exe</code>. 
</p>


<p>
  <a name="894724"> </a><code>lmutil</code> and <code>lmutil.exe</code> contain the following utility programs:
</p>

<ul>
  <li><a name="894727"> </a><code>lmcksum</code> -- Prints license checksums.

  <li><a name="897996"> </a><code>lmdiag</code> -- Diagnoses license checkout problems.

  <li><a name="894729"> </a><code>lmdown</code> -- Gracefully shuts down all license daemons (both <code>lmgrd</code> and all vendor daemons) on the license server node (or on all three nodes in the case of three-server redundant servers). 

  <li><a name="894730"> </a><code>lmhostid</code> -- Reports the hostid of a system.

  <li><a name="894731"> </a><code>lminstall</code> -- Converts license files between different formats.

  <li><a name="895040"> </a><code>lmnewlog</code> -- Moves existing report log information to a new file name and starts a new report log file with existing file name.

  <li><a name="894732"> </a><code>lmremove</code> -- Releases a hung license to the pool of free licenses.

  <li><a name="894733"> </a><code>lmreread</code> -- Causes the license daemons to reread the license file and start any new vendor daemons. 

  <li><a name="894734"> </a><code>lmstat</code> -- Displays the status of a license server.

  <li><a name="894735"> </a><code>lmswitchr</code> -- Switches the report log to a new file name. 

  <li><a name="894752"> </a><code>lmver</code> -- Reports the FLEX<em>lm</em> version of a library or binary file. If no file name is specified, <code>lmver</code> looks for the <code>liblmgr.a</code> library file to detect its version.

</ul>

<p>
  <a name="894838"> </a>All FLEX<em>lm</em> utilities take the following arguments:
</p>


<p>
  <a name="894848"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="894845"> </a><code>-c </code><code><em>license_file_path
<br></em></code></td>
    <td><a name="894847"> </a>Operate on this license file.
<br></td>
  </tr>
  <tr>
    <td><a name="894863"> </a><code>-e </code><code><em>filename
<br></em></code></td>
    <td><a name="894865"> </a>Redirects error message to a file.
<br></td>
  </tr>
  <tr>
    <td><a name="894867"> </a><code>-v
<br></code></td>
    <td><a name="894869"> </a>Print version and exit.
<br></td>
  </tr>
  <tr>
    <td><a name="894855"> </a><code>-verbose
<br></code></td>
    <td><a name="894857"> </a>Prints longer description of all errors 
<br>found. The output from the utilities may 
<br>be harder to read with this option, but is 
<br>useful for diagnostics.
<br></td>
  </tr>
</table>




<p>
  <a name="894849"> </a>
</p>


<p>
  <a name="882705"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 	 If an application is active when a license is removed with <code>lmremove</code>, it will simply checkout the license again (assuming the applications FLEX<em>lm</em> timers are enabled or a heartbeat function is called). Therefore, <code>lmremove</code> cannot be used to "steal" licenses.</FONT><HR WIDTH=75%>


<table border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><img src="graphics/flexlmScript.gif"></td>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
<hr>
<h2>
  <a name="889967"> </a>Chapter 16 <br>End-User Installation Instruction Template
</h2>
<hr>


<p>
  <a name="882821"> </a>To ensure that your customers can use your -FLEX<em>lm</em>-managed product easily and successfully, use the information in this chapter as a guideline about what files and information they need.
</p>


<h3>
  <a name="882822"> </a>16.1	 FLEX<em>lm</em> Files Your Customers Will Require
</h3>


<p>
  <a name="882826"> </a>When your application software is built with FLEX<em>lm</em> calls, you will need to ship the following files in addition to the files that you normally ship in your software installation kit:
</p>


<p>
  <a name="888936"> </a>

<table border="3">
  <caption></caption>
  <tr>
    <td><a name="888939"> </a><code><em>vendor</em></code><code>.lic
<br></code></td>
    <td><a name="888941"> </a>The license file, customized for your 
<br>customer.
<br></td>
  </tr>
  <tr>
    <td><a name="888943"> </a><code>lmgrd</code> (or <code>lmgrd.exe</code>)
<br></td>
    <td><a name="888945"> </a>The license manager daemon.
<br></td>
  </tr>
  <tr>
    <td><a name="888947"> </a><code>lmutil</code> (or <code>lmutil.exe</code> 
<br>and <code>lmtools.exe</code>)
<br></td>
    <td><a name="888949"> </a>FLEX<em>lm</em> utility program.
<br></td>
  </tr>
  <tr>
    <td><a name="895097"> </a><code>xyzd</code> (or <code>xyzd.exe</code>)
<br></td>
    <td><a name="895099"> </a>Your vendor daemon. 
<br></td>
  </tr>
  <tr>
    <td><a name="888951"> </a><code>lcmflxa.dll
<br></code></td>
    <td><a name="888953"> </a>If you're using the LCM feature.
<br></td>
  </tr>
  <tr>
    <td><a name="904417"> </a><code>fldata.ini</code> and 
<br><code>flrsrc.dll
<br></code></td>
    <td><a name="904419"> </a>If you're using the FLEX<em>lock</em> feature.
<br></td>
  </tr>
</table>




<p>
  <a name="888966"> </a>
</p>


<h3>
  <a name="882839"> </a>16.2	 Information Every Customer Needs to Know
</h3>


<p>
  <a name="882840"> </a>In addition to installing your software, your customer will need to do the following steps.
</p>


<h4>
  <a name="882841"> </a>16.2.1	 Install the License File
</h4>


<p>
  <a name="882842"> </a>We recommend that the application specify a default directory for a license file in the installed product hierarchy, for example, <code><em>install_path</em></code><code>/licenses</code>, where <code><em>install_path</em></code> is determined by the end user during installation and <code>licenses</code> is a directory). At run time, <code><em>install_path</em></code> is determined (many applications do this with an environment variable or global internal character string), and the default license directory is specified in <font  face="Arial" size="2">CHECKOUT()</font>, <font  face="Arial" size="2">lp_checkout()</font><em>, </em>or<em> </em><font  face="Arial" size="2">lc_set_attr(</font><code><em>job</em></code><code>,</code><font  face="Arial" size="2"> </font><code>LM_A_LICENSE_DEFAULT,...</code><font  face="Arial" size="2">)</font>. 
</p>


<p>
  <a name="882843"> </a>The license file should be installed with a <code>.lic</code> suffix in the default license directory so the application can find it. The application does not need to know the exact name of the file, only that it ends with <code>.lic</code> and exists in the specified directory. A useful practice is to name the file the date of installation, in <code><em>yyyymmdd</em></code> format. For example, if the license is generated 10 January, 2005, it can be installed as:
</p>

<dl>  <dl>
     <dt> <a name="882844"> </a><CODE><code><em>install_path</em></code>/licenses/20050110.lic</CODE>
  </dl>
</dl>
<p>
  <a name="882846"> </a>We recommend that the license file be delivered by email. If delivered by email, the entire email message can be saved in the specified location; email headers and extraneous text are automatically ignored by FLEX<em>lm</em>.
</p>


<p>
  <a name="882850"> </a>If the license file is delivered in decimal format, the end user should use <code>lminstall</code> to generate a readable license file. <code>lminstall</code> will request the name of its output license file and will default to a license file called <code><em>yyyymmdd</em></code><code>.lic</code>. This license file should then be moved to the <code><em>install_path</em></code><code>/licenses</code> directory.
</p>


<p>
  <a name="896185"> </a>As an alternative to emailing a license file, you can use the License Certificate Manager (LCM) on Windows. LCM works with GT<em>licensing</em> to provide Internet-based license fulfillment.
</p>


<h4>
  <a name="882856"> </a>16.2.2	 And If Licenses are Counted...
</h4>


<h5>
  <a name="895196"> </a>Install lmgrd and Vendor Daemon<em> </em>
</h5>


<p>
  <a name="882857"> </a>These can be installed wherever the end user prefers. <code>lmgrd</code> will automatically find the vendor daemon if they are in the same directory or in <code>lmgrd</code>'s <code>PATH</code>. Otherwise, the user will need to edit the license file to add the path to the vendor daemon to the VENDOR line.
</p>


<h5>
  <a name="895159"> </a>Install lmgrd to Start at Boot (Optional)
</h5>


<p>
  <a name="895160"> </a>On UNIX, edit the appropriate boot script, which may be <code>/etc/rc.boot</code>, <code>/etc/rc.local</code>, <code>/etc/rc2.d/S</code><em>xxx</em>, <code>/sbin/rc2.d/S</code><em>xxxx</em>, etc. Remember that these scripts are run in <code>/bin/sh</code>, so do not use the <code>csh</code> "<code>&gt;&amp;</code>" redirection syntax.
</p>


<p>
  <a name="895161"> </a>Each UNIX operating system can have some quirks in doing this, but the following script has been successfully tested for HP700 systems. See the notes following the script listing for a full explanation.
</p>

<dl>  <dl>
     <dt> <a name="895162"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/su daniel -c &#153;echo "starting lmgrd" &gt; \</CODE>
     <dt> <a name="895163"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/boot.log'</CODE>
  </dl>
</dl>
<p>
  <a name="895164"> </a>
</p>

<dl>  <dl>
     <dt> <a name="895165"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/nohup /bin/su daniel -c "umask 022; \</CODE>
     <dt> <a name="895166"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/lmgrd -c \</CODE>
     <dt> <a name="895167"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/license.dat &gt;&gt;&amp; \</CODE>
     <dt> <a name="895168"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/boot.log"</CODE>
  </dl>
</dl>
<p>
  <a name="895169"> </a>
</p>

<dl>  <dl>
     <dt> <a name="895170"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/su daniel -c &#153;echo "sleep 5" &gt;&gt; \</CODE>
     <dt> <a name="895171"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/boot.log'</CODE>
     <dt> <a name="895172"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/sleep 5</CODE>
  </dl>
</dl>
<p>
  <a name="895173"> </a>
</p>

<dl>  <dl>
     <dt> <a name="895174"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/su daniel -c &#153;echo "lmdiag" &gt;&gt;\</CODE>
     <dt> <a name="895175"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/boot.log'</CODE>
  </dl>
</dl>
<p>
  <a name="895176"> </a>
</p>

<dl>  <dl>
     <dt> <a name="895177"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/su daniel -c &#153;/home/flexlm/v5.12/hp700_u9/lmdiag -n -c\</CODE>
     <dt> <a name="895178"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/license.dat &gt;&gt; \</CODE>
     <dt> <a name="895179"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/boot.log'</CODE>
  </dl>
</dl>
<p>
  <a name="895180"> </a>
</p>

<dl>  <dl>
     <dt> <a name="895181"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/su daniel -c &#153;echo "exiting" &gt;&gt;\</CODE>
     <dt> <a name="895182"> </a><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/home/flexlm/v7.2/hp700_u9/boot.log'</CODE>
  </dl>
</dl>
<p>
  <a name="895183"> </a>Please note the following about how this script was written:
</p>

<ul>
  <li><a name="895184"> </a>All paths are specified in full, since no paths can be assumed at boot time.

  <li><a name="895185"> </a>Since no paths are assumed, the vendor daemon must be in the same directory as <code>lmgrd</code>, or the VENDOR line must be edited to include the full path to the vendor daemon binary.

  <li><a name="895187"> </a>The <code>su</code> command is used to run <code>lmgrd</code> as a non-root user, "daniel." We recommend that <code>lmgrd</code> not be run as "root," since it can be a security risk to run any program as "root" that does not require root permissions, and <code>lmgrd</code> does not require root permissions.

  <li><a name="895188"> </a>Daniel has a <code>csh</code> login, so all commands executed as "daniel" must be in <code>csh</code> syntax. All commands not executed as "daniel" must be in <code>/bin/sh</code> syntax, since that's what's used by the boot scripts.

  <li><a name="895189"> </a>The use of <code>nohup</code> and <code>sleep</code> are required on some operating systems, notably HP-UX and Digital UNIX, for obscure technical reasons. These are not needed on Solaris and some other operating systems, but are safe to use on all.

  <li><a name="895190"> </a><code>lmdiag</code> is used as a diagnostic tool to verify that the server is running and serving licenses.


<p>
  <a name="895191"> </a><HR WIDTH=75%><FONT COLOR=RED>Note:	 On IBM RS6000 systems, <code>/etc/rc</code> cannot be used, because TCP/IP is not installed when this script is run. Instead, <code>/etc/inittab</code> must be used. Add a line like this to <code>/etc/inittab</code> after the lines which start networking:<br>	 	  &nbsp;&nbsp;<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rclocal:2:wait:/etc/rc.local &gt; /dev/console 2&gt;&amp;1</code></FONT><HR WIDTH=75%>

</ul>

<h5>
  <a name="882858"> </a>Start lmgrd Manually (If Not Started on Boot)
</h5>


<p>
  <a name="882859"> </a>First, make sure the vendor daemon is in the same directory as <code>lmgrd</code>, or in <code>lmgrd</code>'s <code>PATH</code>, or that the user has edited the license file to include the path to the vendor daemon on the VENDOR line.
</p>


<p>
  <a name="882861"> </a>Start the license manager daemon as follows:
</p>


<p>
  <a name="882863"> </a>UNIX:
</p>

<dl>  <dl>
     <dt> <a name="908573"> </a><CODE>lmgrd -c <code><em>license_file_list</em></code> -l <code><em>debug_log_path</em></code></CODE>
  </dl>
</dl>
<p>
  <a name="889021"> </a>Windows:
</p>

<dl>  <dl>
     <dt> <a name="908574"> </a><CODE>lmgrd -c <code><em>license_file_list</em></code> -l <code><em>debug_log_path</em></code> </CODE>
  </dl>
</dl>
<p>
  <a name="882864"> </a>where <code><em>license_file_list</em></code> is the full path to the license file or a delimited license file list and <code><em>debug_log_path</em></code> is the path to the debug log file. See the <em>FLEXlm End Users Guide</em> for descriptions of the messages in the debug log file.
</p>


<p>
  <a name="883926"> </a>
</p>
</blockquote>

<hr>

<table width="280" align="right" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td align=left><em>FLEXlm Programmers Guide</em>
  </tr>
    <td align=left><em>December 2000</em></td>
</table>

<table border="0" align="left" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="allTOC.htm#TOC"><img src="graphics/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="allIX.htm"><img src="graphics/navidx.gif" width="84" height="23"
    border="0" alt="INDEX"> </a></td>
  </tr>
</table>
</body>
</html>
