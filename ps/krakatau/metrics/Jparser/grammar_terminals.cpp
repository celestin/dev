/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Krakatau Java Parser (JPARSER.EXE)
 * Copyright (c) 2000,2008 Power Software
 * Author Craig McKay <craig@frontburner.co.uk>
 *
 * $Id$
 *
 * Who  When       Why
 * CAM  29-Mar-08  346 : File added to source control.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "y.tab.h"
#include "lexical_analysis.h"

typedef struct lexeme {
	int symbol;
	char* text;
	int line;
} lexeme;
 
extern lexeme* lexemes;
extern int lex_index;
extern int n_lexemes;

#define PARSE_TERMINAL(X) { if (lex_index<=n_lexemes) if (lexemes[lex_index].symbol==X) {lex_index++;return(0);} return(-1);}
#define PARSE_OPT_TERMINAL(X) { if (lex_index<=n_lexemes) if (lexemes[lex_index].symbol==X) lex_index++;}

int parse_ABSTRACT() PARSE_TERMINAL(ABSTRACT)
int parse_DEFAULT() PARSE_TERMINAL(DEFAULT)
int parse_IF() PARSE_TERMINAL(IF)
int parse_PRIVATE() PARSE_TERMINAL(PRIVATE)
int parse_THROW() PARSE_TERMINAL(THROW)
int parse_BOOLEAN() PARSE_TERMINAL(BOOLEAN)
int parse_DO() PARSE_TERMINAL(DO)
int parse_IMPLEMENTS() PARSE_TERMINAL(IMPLEMENTS)
int parse_PROTECTED() PARSE_TERMINAL(PROTECTED)
int parse_THROWS() PARSE_TERMINAL(THROWS)
int parse_BREAK() PARSE_TERMINAL(BREAK)
int parse_DOUBLE() PARSE_TERMINAL(DOUBLE)
int parse_IMPORT() PARSE_TERMINAL(IMPORT)
int parse_PUBLIC() PARSE_TERMINAL(PUBLIC)
int parse_TRANSIENT() PARSE_TERMINAL(TRANSIENT)
int parse_BYTE() PARSE_TERMINAL(BYTE)
int parse_ELSE() PARSE_TERMINAL(ELSE)
int parse_INSTANCEOF() PARSE_TERMINAL(INSTANCEOF)
int parse_RETURN() PARSE_TERMINAL(RETURN)
int parse_TRY() PARSE_TERMINAL(TRY)
int parse_CASE() PARSE_TERMINAL(CASE)
int parse_EXTENDS() PARSE_TERMINAL(EXTENDS)
int parse_INT() PARSE_TERMINAL(INT)
int parse_SHORT() PARSE_TERMINAL(SHORT)
int parse_VOID() PARSE_TERMINAL(VOID)
int parse_CATCH() PARSE_TERMINAL(CATCH)
int parse_FINAL() PARSE_TERMINAL(FINAL)
int parse_INTERFACE() PARSE_TERMINAL(INTERFACE)
int parse_STATIC() PARSE_TERMINAL(STATIC)
int parse_VOLATILE() PARSE_TERMINAL(VOLATILE)
int parse_CHAR() PARSE_TERMINAL(CHAR)
int parse_FINALLY() PARSE_TERMINAL(FINALLY)
int parse_LONG() PARSE_TERMINAL(LONG)
int parse_SUPER() PARSE_TERMINAL(SUPER)
int parse_WHILE() PARSE_TERMINAL(WHILE)
int parse_CLASS() PARSE_TERMINAL(CLASS)
int parse_FLOAT() PARSE_TERMINAL(FLOAT)
int parse_NATIVE() PARSE_TERMINAL(NATIVE)
int parse_SWITCH() PARSE_TERMINAL(SWITCH)
int parse_CONST() PARSE_TERMINAL(CONST)
int parse_FOR() PARSE_TERMINAL(FOR)
int parse_NEW() PARSE_TERMINAL(NEW)
int parse_SYNCHRONIZED() PARSE_TERMINAL(SYNCHRONIZED)
int parse_CONTINUE() PARSE_TERMINAL(CONTINUE)
int parse_GOTO() PARSE_TERMINAL(GOTO)
int parse_PACKAGE() PARSE_TERMINAL(PACKAGE)
int parse_THIS() PARSE_TERMINAL(THIS)
int parse_STRING_LITERAL() PARSE_TERMINAL(STRING_LITERAL)
int parse_IDENTIFIER() PARSE_TERMINAL(IDENTIFIER)
int parse_FLOATING_LITERAL() PARSE_TERMINAL(FLOATING_LITERAL)
int parse_INTEGER_LITERAL() PARSE_TERMINAL(INTEGER_LITERAL)
int parse_BOOLEAN_LITERAL() PARSE_TERMINAL(BOOLEAN_LITERAL)
int parse_CHARACTER_LITERAL() PARSE_TERMINAL(CHARACTER_LITERAL)
int parse_ASSIGN() PARSE_TERMINAL(ASSIGN)
int parse_GT() PARSE_TERMINAL(GT)
int parse_LT() PARSE_TERMINAL(LT)
int parse_NOT() PARSE_TERMINAL(NOT)
int parse_BIT_NOT() PARSE_TERMINAL(BIT_NOT)
int parse_QUERY() PARSE_TERMINAL(QUERY)
int parse_COLON() PARSE_TERMINAL(COLON)
int parse_EQUALITY() PARSE_TERMINAL(EQUALITY)
int parse_LE() PARSE_TERMINAL(LE)
int parse_GE() PARSE_TERMINAL(GE)
int parse_NE() PARSE_TERMINAL(NE)
int parse_AND() PARSE_TERMINAL(AND)
int parse_OR() PARSE_TERMINAL(OR)
int parse_PLUSPLUS() PARSE_TERMINAL(PLUSPLUS)
int parse_MINUSMINUS() PARSE_TERMINAL(MINUSMINUS)
int parse_PLUS() PARSE_TERMINAL(PLUS)
int parse_MINUS() PARSE_TERMINAL(MINUS)
int parse_TIMES() PARSE_TERMINAL(TIMES)
int parse_DIVIDE() PARSE_TERMINAL(DIVIDE)
int parse_BIT_AND() PARSE_TERMINAL(BIT_AND)
int parse_BIT_OR() PARSE_TERMINAL(BIT_OR)
int parse_CARET() PARSE_TERMINAL(CARET)
int parse_MOD() PARSE_TERMINAL(MOD)
int parse_LEFT_SHIFT() PARSE_TERMINAL(LEFT_SHIFT)
int parse_RIGHT_SHIFT() PARSE_TERMINAL(RIGHT_SHIFT)
int parse_GTGTGT() PARSE_TERMINAL(GTGTGT)
int parse_PLUSEQUALS() PARSE_TERMINAL(PLUSEQUALS)
int parse_MINUSEQUALS() PARSE_TERMINAL(MINUSEQUALS)
int parse_TIMESEQUALS() PARSE_TERMINAL(TIMESEQUALS)
int parse_DIVEQUALS() PARSE_TERMINAL(DIVEQUALS)
int parse_BIT_ANDEQUALS() PARSE_TERMINAL(BIT_ANDEQUALS)
int parse_BIT_OREQUALS() PARSE_TERMINAL(BIT_OREQUALS)
int parse_CARETEQUALS() PARSE_TERMINAL(CARETEQUALS)
int parse_MODEQUALS() PARSE_TERMINAL(MODEQUALS)
int parse_LEFT_SHIFTEQUALS() PARSE_TERMINAL(LEFT_SHIFTEQUALS)
int parse_RIGHT_SHIFTEQUALS() PARSE_TERMINAL(RIGHT_SHIFTEQUALS)
int parse_GTGTGTEQUALS() PARSE_TERMINAL(GTGTGTEQUALS)
int parse_LEFT_PARENTH() PARSE_TERMINAL(LEFT_PARENTH)
int parse_RIGHT_PARENTH() PARSE_TERMINAL(RIGHT_PARENTH)
int parse_LEFT_BRACE() PARSE_TERMINAL(LEFT_BRACE)
int parse_RIGHT_BRACE() PARSE_TERMINAL(RIGHT_BRACE)
int parse_LEFT_BRACKET() PARSE_TERMINAL(LEFT_BRACKET)
int parse_RIGHT_BRACKET() PARSE_TERMINAL(RIGHT_BRACKET)
int parse_SEMICOLON() PARSE_TERMINAL(SEMICOLON)
int parse_COMMA() PARSE_TERMINAL(COMMA)
int parse_DOT() PARSE_TERMINAL(DOT)
int parse_NULL_LITERAL() PARSE_TERMINAL(NULL_LITERAL)
void parse_COMMA_opt() PARSE_OPT_TERMINAL(COMMA)
void parse_IDENTIFIER_opt() PARSE_OPT_TERMINAL(IDENTIFIER)


